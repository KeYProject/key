
=== -479684789 ======================================================
```
{..#lhs=+#e;...}
```

ContextStatementBlock                    : ..{ ..   #lhs = +#e; ... } ...
  CopyAssignment                           : #lhs = +#e;
    ProgramSV                                : #lhs (program LeftHandSide)

    Positive                                 : +#e;
      ProgramSV                                : #e (program Expression)





=== -355654 ======================================================
```
{..#lhs=#e;...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e; ... } ...
  CopyAssignment                           : #lhs = #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== 738915854 ======================================================
```
{..#lhs=-#nse;...}
```

ContextStatementBlock                    : ..{ ..   #lhs = -#nse; ... } ...
  CopyAssignment                           : #lhs = -#nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    Negative                                 : -#nse;
      ProgramSV                                : #nse (program NonSimpleExpression)





=== 2011283680 ======================================================
```
{.. #typeof(#nse) #v0 = #nse;
                #lhs = -#v0;
                           ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v0 = #nse;   #lhs = -#v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v0 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = -#v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    Negative                                 : -#v0;
      ProgramSV                                : #v0 (program Variable)





=== 2001191133 ======================================================
```
{..#lhs=~#nse;...}
```

ContextStatementBlock                    : ..{ ..   #lhs = ~#nse; ... } ...
  CopyAssignment                           : #lhs = ~#nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryNot                                : ~#nse;
      ProgramSV                                : #nse (program NonSimpleExpression)





=== -98053245 ======================================================
```
{..#typeof(#nse) #v0=#nse; #lhs=~#v0;...}
                
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v0 = #nse;   #lhs = ~#v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v0 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = ~#v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryNot                                : ~#v0;
      ProgramSV                                : #v0 (program Variable)





=== 1427624788 ======================================================
```
{.. #lhs = (byte) #seByte; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (byte) #seByte; ... } ...
  CopyAssignment                           : #lhs = (byte) #seByte;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (byte) #seByte;
      SchemaTypeReference                      : byte;
        ProgramElementName                       : byte


      ProgramSV                                : #seByte (program JavaByteExpression)





=== -892974249 ======================================================
```
{.. #lhs = #seByte;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seByte; ... } ...
  CopyAssignment                           : #lhs = #seByte;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #seByte (program JavaByteExpression)




=== 2060370396 ======================================================
```
{.. #lhs = (short) #seByte; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (short) #seByte; ... } ...
  CopyAssignment                           : #lhs = (short) #seByte;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (short) #seByte;
      SchemaTypeReference                      : short;
        ProgramElementName                       : short


      ProgramSV                                : #seByte (program JavaByteExpression)





=== -892974249 ======================================================
```
{.. #lhs = #seByte;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seByte; ... } ...
  CopyAssignment                           : #lhs = #seByte;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #seByte (program JavaByteExpression)




=== -1567114476 ======================================================
```
{.. #lhs = (char) #seChar; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (char) #seChar; ... } ...
  CopyAssignment                           : #lhs = (char) #seChar;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (char) #seChar;
      SchemaTypeReference                      : char;
        ProgramElementName                       : char


      ProgramSV                                : #seChar (program JavaCharExpression)





=== 1814398281 ======================================================
```
{.. #lhs = #seChar;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seChar; ... } ...
  CopyAssignment                           : #lhs = #seChar;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #seChar (program JavaCharExpression)




=== -553473584 ======================================================
```
{.. #lhs = (short) #seShort; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (short) #seShort; ... } ...
  CopyAssignment                           : #lhs = (short) #seShort;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (short) #seShort;
      SchemaTypeReference                      : short;
        ProgramElementName                       : short


      ProgramSV                                : #seShort (program JavaShortExpression)





=== -1538288423 ======================================================
```
{.. #lhs = #seShort;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seShort; ... } ...
  CopyAssignment                           : #lhs = #seShort;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #seShort (program JavaShortExpression)




=== -1018392516 ======================================================
```
{.. #lhs = (int) #seByteShortInt; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (int) #seByteShortInt; ... } ...
  CopyAssignment                           : #lhs = (int) #seByteShortInt;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (int) #seByteShortInt;
      SchemaTypeReference                      : int;
        ProgramElementName                       : int


      ProgramSV                                : #seByteShortInt (program JavaByteShortIntExpression)





=== -219182844 ======================================================
```
{.. #lhs = #seByteShortInt;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seByteShortInt; ... } ...
  CopyAssignment                           : #lhs = #seByteShortInt;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #seByteShortInt (program JavaByteShortIntExpression)




=== -673175789 ======================================================
```
{.. #lhs = (long) #seByteShortInt; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (long) #seByteShortInt; ... } ...
  CopyAssignment                           : #lhs = (long) #seByteShortInt;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (long) #seByteShortInt;
      SchemaTypeReference                      : long;
        ProgramElementName                       : long


      ProgramSV                                : #seByteShortInt (program JavaByteShortIntExpression)





=== -219182844 ======================================================
```
{.. #lhs = #seByteShortInt;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seByteShortInt; ... } ...
  CopyAssignment                           : #lhs = #seByteShortInt;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #seByteShortInt (program JavaByteShortIntExpression)




=== 1240258004 ======================================================
```
{.. #lhs = (long) #seLong; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (long) #seLong; ... } ...
  CopyAssignment                           : #lhs = (long) #seLong;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (long) #seLong;
      SchemaTypeReference                      : long;
        ProgramElementName                       : long


      ProgramSV                                : #seLong (program JavaLongExpression)





=== 1727961955 ======================================================
```
{.. #lhs = #seLong;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seLong; ... } ...
  CopyAssignment                           : #lhs = #seLong;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #seLong (program JavaLongExpression)




=== 992393559 ======================================================
```
{.. #lhs = (int) #seChar; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (int) #seChar; ... } ...
  CopyAssignment                           : #lhs = (int) #seChar;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (int) #seChar;
      SchemaTypeReference                      : int;
        ProgramElementName                       : int


      ProgramSV                                : #seChar (program JavaCharExpression)





=== 1814398281 ======================================================
```
{.. #lhs = #seChar;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seChar; ... } ...
  CopyAssignment                           : #lhs = #seChar;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #seChar (program JavaCharExpression)




=== -1527900370 ======================================================
```
{.. #lhs = (long) #seChar; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (long) #seChar; ... } ...
  CopyAssignment                           : #lhs = (long) #seChar;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (long) #seChar;
      SchemaTypeReference                      : long;
        ProgramElementName                       : long


      ProgramSV                                : #seChar (program JavaCharExpression)





=== 1814398281 ======================================================
```
{.. #lhs = #seChar;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seChar; ... } ...
  CopyAssignment                           : #lhs = #seChar;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #seChar (program JavaCharExpression)




=== 10004425 ======================================================
```
{.. #loc = java.lang.Math.sin(#se); ...}
```

ContextStatementBlock                    : ..{ ..   #loc = java.lang.Math.sin(#se); ... } ...
  CopyAssignment                           : #loc = java.lang.Math.sin(#se);
    ProgramSV                                : #loc (program Variable)

    MethodReference                          : java.lang.Math.sin(#se);
      SchemaTypeReference                      : java.lang.Math;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Math


      ProgramElementName                       : sin

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1605996614 ======================================================
```
{.. #loc = java.lang.Math.cos(#se); ...}
```

ContextStatementBlock                    : ..{ ..   #loc = java.lang.Math.cos(#se); ... } ...
  CopyAssignment                           : #loc = java.lang.Math.cos(#se);
    ProgramSV                                : #loc (program Variable)

    MethodReference                          : java.lang.Math.cos(#se);
      SchemaTypeReference                      : java.lang.Math;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Math


      ProgramElementName                       : cos

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 546352857 ======================================================
```
{.. #loc = java.lang.Math.acos(#se); ...}
```

ContextStatementBlock                    : ..{ ..   #loc = java.lang.Math.acos(#se); ... } ...
  CopyAssignment                           : #loc = java.lang.Math.acos(#se);
    ProgramSV                                : #loc (program Variable)

    MethodReference                          : java.lang.Math.acos(#se);
      SchemaTypeReference                      : java.lang.Math;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Math


      ProgramElementName                       : acos

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -2132613400 ======================================================
```
{.. #loc = java.lang.Math.asin(#se); ...}
```

ContextStatementBlock                    : ..{ ..   #loc = java.lang.Math.asin(#se); ... } ...
  CopyAssignment                           : #loc = java.lang.Math.asin(#se);
    ProgramSV                                : #loc (program Variable)

    MethodReference                          : java.lang.Math.asin(#se);
      SchemaTypeReference                      : java.lang.Math;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Math


      ProgramElementName                       : asin

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1851669856 ======================================================
```
{.. #loc = java.lang.Math.tan(#se); ...}
```

ContextStatementBlock                    : ..{ ..   #loc = java.lang.Math.tan(#se); ... } ...
  CopyAssignment                           : #loc = java.lang.Math.tan(#se);
    ProgramSV                                : #loc (program Variable)

    MethodReference                          : java.lang.Math.tan(#se);
      SchemaTypeReference                      : java.lang.Math;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Math


      ProgramElementName                       : tan

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 786691561 ======================================================
```
{.. #loc = java.lang.Math.atan2(#se1, #se2); ...}
```

ContextStatementBlock                    : ..{ ..   #loc = java.lang.Math.atan2(#se1, #se2); ... } ...
  CopyAssignment                           : #loc = java.lang.Math.atan2(#se1, #se2);
    ProgramSV                                : #loc (program Variable)

    MethodReference                          : java.lang.Math.atan2(#se1, #se2);
      SchemaTypeReference                      : java.lang.Math;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Math


      ProgramElementName                       : atan2

      ProgramSV                                : #se1 (program SimpleExpression)

      ProgramSV                                : #se2 (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1621498113 ======================================================
```
{.. #loc = java.lang.Math.sqrt(#se); ...}
```

ContextStatementBlock                    : ..{ ..   #loc = java.lang.Math.sqrt(#se); ... } ...
  CopyAssignment                           : #loc = java.lang.Math.sqrt(#se);
    ProgramSV                                : #loc (program Variable)

    MethodReference                          : java.lang.Math.sqrt(#se);
      SchemaTypeReference                      : java.lang.Math;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Math


      ProgramElementName                       : sqrt

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1842458095 ======================================================
```
{.. #loc = java.lang.Math.pow(#se1, #se2); ...}
```

ContextStatementBlock                    : ..{ ..   #loc = java.lang.Math.pow(#se1, #se2); ... } ...
  CopyAssignment                           : #loc = java.lang.Math.pow(#se1, #se2);
    ProgramSV                                : #loc (program Variable)

    MethodReference                          : java.lang.Math.pow(#se1, #se2);
      SchemaTypeReference                      : java.lang.Math;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Math


      ProgramElementName                       : pow

      ProgramSV                                : #se1 (program SimpleExpression)

      ProgramSV                                : #se2 (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1350021788 ======================================================
```
{.. #loc = java.lang.Math.exp(#se); ...}
```

ContextStatementBlock                    : ..{ ..   #loc = java.lang.Math.exp(#se); ... } ...
  CopyAssignment                           : #loc = java.lang.Math.exp(#se);
    ProgramSV                                : #loc (program Variable)

    MethodReference                          : java.lang.Math.exp(#se);
      SchemaTypeReference                      : java.lang.Math;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Math


      ProgramElementName                       : exp

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -290947969 ======================================================
```
{.. #loc = java.lang.Math.atan(#se); ...}
```

ContextStatementBlock                    : ..{ ..   #loc = java.lang.Math.atan(#se); ... } ...
  CopyAssignment                           : #loc = java.lang.Math.atan(#se);
    ProgramSV                                : #loc (program Variable)

    MethodReference                          : java.lang.Math.atan(#se);
      SchemaTypeReference                      : java.lang.Math;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Math


      ProgramElementName                       : atan

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -937338861 ======================================================
```
{.. assert #nse1; ...}
```

ContextStatementBlock                    : ..{ ..   assert #nse1; ... } ...
  Assert                                   : assert #nse1;
    ProgramSV                                : #nse1 (program NonSimpleExpression)




=== -1712010532 ======================================================
```
{.. #typeof(#nse1) #condition = #nse1;
                assert #condition; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse1) #condition = #nse1;   assert #condition; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse1) #condition = #nse1;
    TypeOf                                   : #typeof( #nse1 (program NonSimpleExpression));
      ProgramSV                                : #nse1 (program NonSimpleExpression)


    VariableSpecification                    : #condition = #nse1;
      ProgramSV                                : #condition (program Variable)

      ProgramSV                                : #nse1 (program NonSimpleExpression)



  Assert                                   : assert #condition;
    ProgramSV                                : #condition (program Variable)




=== -419640099 ======================================================
```
{.. assert #nse1 : #e; ...}
```

ContextStatementBlock                    : ..{ ..   assert #nse1 : #e; ... } ...
  Assert                                   : assert #nse1 : #e;
    ProgramSV                                : #nse1 (program NonSimpleExpression)

    ProgramSV                                : #e (program Expression)




=== 545173428 ======================================================
```
{.. #typeof(#nse1) #condition = #nse1;
                assert #condition : #e; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse1) #condition = #nse1;   assert #condition : #e; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse1) #condition = #nse1;
    TypeOf                                   : #typeof( #nse1 (program NonSimpleExpression));
      ProgramSV                                : #nse1 (program NonSimpleExpression)


    VariableSpecification                    : #condition = #nse1;
      ProgramSV                                : #condition (program Variable)

      ProgramSV                                : #nse1 (program NonSimpleExpression)



  Assert                                   : assert #condition : #e;
    ProgramSV                                : #condition (program Variable)

    ProgramSV                                : #e (program Expression)




=== -842625996 ======================================================
```
{.. assert #se1 : #nse2; ...}
```

ContextStatementBlock                    : ..{ ..   assert #se1 : #nse2; ... } ...
  Assert                                   : assert #se1 : #nse2;
    ProgramSV                                : #se1 (program SimpleExpression)

    ProgramSV                                : #nse2 (program NonSimpleExpression)




=== -107806400 ======================================================
```
{.. #typeof(#nse2) #message = #nse2;
                assert #se1 : #message; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse2) #message = #nse2;   assert #se1 : #message; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse2) #message = #nse2;
    TypeOf                                   : #typeof( #nse2 (program NonSimpleExpression));
      ProgramSV                                : #nse2 (program NonSimpleExpression)


    VariableSpecification                    : #message = #nse2;
      ProgramSV                                : #message (program Variable)

      ProgramSV                                : #nse2 (program NonSimpleExpression)



  Assert                                   : assert #se1 : #message;
    ProgramSV                                : #se1 (program SimpleExpression)

    ProgramSV                                : #message (program Variable)




=== 1694917733 ======================================================
```
{.. assert #se1; ...}
```

ContextStatementBlock                    : ..{ ..   assert #se1; ... } ...
  Assert                                   : assert #se1;
    ProgramSV                                : #se1 (program SimpleExpression)




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 98209422 ======================================================
```
{.. throw new java.lang.AssertionError(); ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.AssertionError(); ... } ...
  Throw                                    : throw new java.lang.AssertionError();
    New                                      : new java.lang.AssertionError();
      SchemaTypeReference                      : java.lang.AssertionError;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : AssertionError






=== -352646458 ======================================================
```
{.. assert #se1 : #se2; ...}
```

ContextStatementBlock                    : ..{ ..   assert #se1 : #se2; ... } ...
  Assert                                   : assert #se1 : #se2;
    ProgramSV                                : #se1 (program SimpleExpression)

    ProgramSV                                : #se2 (program SimpleExpression)




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -217665967 ======================================================
```
{.. throw new java.lang.AssertionError(#se2); ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.AssertionError(#se2); ... } ...
  Throw                                    : throw new java.lang.AssertionError(#se2);
    New                                      : new java.lang.AssertionError(#se2);
      SchemaTypeReference                      : java.lang.AssertionError;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : AssertionError


      ProgramSV                                : #se2 (program SimpleExpression)





=== 2019144624 ======================================================
```
{.. assert #se1 : null; ...}
```

ContextStatementBlock                    : ..{ ..   assert #se1 : null; ... } ...
  Assert                                   : assert #se1 : null;
    ProgramSV                                : #se1 (program SimpleExpression)

    NullLiteral                              : null;




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1582829635 ======================================================
```
{..
                    throw new java.lang.AssertionError((java.lang.Object)null); ...}
```

ContextStatementBlock                    : ..{ ..   throw   new java.lang.AssertionError((java.lang.Object) null); ... } ...
  Throw                                    : throw new java.lang.AssertionError((java.lang.Object) null);
    New                                      : new java.lang.AssertionError((java.lang.Object) null);
      SchemaTypeReference                      : java.lang.AssertionError;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : AssertionError


      TypeCast                                 : (java.lang.Object) null;
        SchemaTypeReference                      : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        NullLiteral                              : null;






=== -352646458 ======================================================
```
{.. assert #se1 : #se2; ...}
```

ContextStatementBlock                    : ..{ ..   assert #se1 : #se2; ... } ...
  Assert                                   : assert #se1 : #se2;
    ProgramSV                                : #se1 (program SimpleExpression)

    ProgramSV                                : #se2 (program SimpleExpression)




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -217665967 ======================================================
```
{.. throw new java.lang.AssertionError(#se2); ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.AssertionError(#se2); ... } ...
  Throw                                    : throw new java.lang.AssertionError(#se2);
    New                                      : new java.lang.AssertionError(#se2);
      SchemaTypeReference                      : java.lang.AssertionError;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : AssertionError


      ProgramSV                                : #se2 (program SimpleExpression)





=== -1836840296 ======================================================
```
{.. assert #e1 : #e2; ...}
```

ContextStatementBlock                    : ..{ ..   assert #e1 : #e2; ... } ...
  Assert                                   : assert #e1 : #e2;
    ProgramSV                                : #e1 (program Expression)

    ProgramSV                                : #e2 (program Expression)




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1118788302 ======================================================
```
{.. assert #e1; ...}
```

ContextStatementBlock                    : ..{ ..   assert #e1; ... } ...
  Assert                                   : assert #e1;
    ProgramSV                                : #e1 (program Expression)




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1377068582 ======================================================
```
{.#ex.. assert #e1; ...}
```

ContextStatementBlock                    : ..{ ..   assert #e1; ... } ...
  ProgramSV                                : #ex (program ExecutionContext)

  Assert                                   : assert #e1;
    ProgramSV                                : #e1 (program Expression)




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1487406107 ======================================================
```
{method-frame(#ex){#condition = #e1;}}
```

StatementBlock                           : {   method-frame (#ex) {     #condition = #e1;   } }
  MethodFrame                              : method-frame (#ex) {   #condition = #e1; }
    ProgramSV                                : #ex (program ExecutionContext)

    StatementBlock                           : {   #condition = #e1; }
      CopyAssignment                           : #condition = #e1;
        ProgramSV                                : #condition (program Variable)

        ProgramSV                                : #e1 (program Expression)






=== 1793230579 ======================================================
```
{ method-frame(#ex){
                          #typeof(#e1) #condition = #e1 ;
                        }
                    }
```

StatementBlock                           : {   method-frame (#ex) {     #typeof(#e1) #condition = #e1;   } }
  MethodFrame                              : method-frame (#ex) {   #typeof(#e1) #condition = #e1; }
    ProgramSV                                : #ex (program ExecutionContext)

    StatementBlock                           : {   #typeof(#e1) #condition = #e1; }
      LocalVariableDeclaration                 : #typeof(#e1) #condition = #e1;
        TypeOf                                   : #typeof( #e1 (program Expression));
          ProgramSV                                : #e1 (program Expression)


        VariableSpecification                    : #condition = #e1;
          ProgramSV                                : #condition (program Variable)

          ProgramSV                                : #e1 (program Expression)







=== -707185680 ======================================================
```
{.#ex.. assert #e1 : #e2; ...}
```

ContextStatementBlock                    : ..{ ..   assert #e1 : #e2; ... } ...
  ProgramSV                                : #ex (program ExecutionContext)

  Assert                                   : assert #e1 : #e2;
    ProgramSV                                : #e1 (program Expression)

    ProgramSV                                : #e2 (program Expression)




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1480149760 ======================================================
```
{method-frame(#ex){#typeof(#e1) #condition = #e1;
                    #typeof(#e2) #message   = #e2;}}
```

StatementBlock                           : {   method-frame (#ex) {     #typeof(#e1) #condition = #e1;     #typeof(#e2) #message = #e2;   } }
  MethodFrame                              : method-frame (#ex) {   #typeof(#e1) #condition = #e1;   #typeof(#e2) #message = #e2; }
    ProgramSV                                : #ex (program ExecutionContext)

    StatementBlock                           : {   #typeof(#e1) #condition = #e1;   #typeof(#e2) #message = #e2; }
      LocalVariableDeclaration                 : #typeof(#e1) #condition = #e1;
        TypeOf                                   : #typeof( #e1 (program Expression));
          ProgramSV                                : #e1 (program Expression)


        VariableSpecification                    : #condition = #e1;
          ProgramSV                                : #condition (program Variable)

          ProgramSV                                : #e1 (program Expression)



      LocalVariableDeclaration                 : #typeof(#e2) #message = #e2;
        TypeOf                                   : #typeof( #e2 (program Expression));
          ProgramSV                                : #e2 (program Expression)


        VariableSpecification                    : #message = #e2;
          ProgramSV                                : #message (program Variable)

          ProgramSV                                : #e2 (program Expression)







=== 1032124350 ======================================================
```
{ method-frame(#ex){
                                    #typeof(#e1) #condition = #e1;
                    #typeof(#e2) #message   = #e2;
                                  }
                              }
```

StatementBlock                           : {   method-frame (#ex) {     #typeof(#e1) #condition = #e1;     #typeof(#e2) #message = #e2;   } }
  MethodFrame                              : method-frame (#ex) {   #typeof(#e1) #condition = #e1;   #typeof(#e2) #message = #e2; }
    ProgramSV                                : #ex (program ExecutionContext)

    StatementBlock                           : {   #typeof(#e1) #condition = #e1;   #typeof(#e2) #message = #e2; }
      LocalVariableDeclaration                 : #typeof(#e1) #condition = #e1;
        TypeOf                                   : #typeof( #e1 (program Expression));
          ProgramSV                                : #e1 (program Expression)


        VariableSpecification                    : #condition = #e1;
          ProgramSV                                : #condition (program Variable)

          ProgramSV                                : #e1 (program Expression)



      LocalVariableDeclaration                 : #typeof(#e2) #message = #e2;
        TypeOf                                   : #typeof( #e2 (program Expression));
          ProgramSV                                : #e2 (program Expression)


        VariableSpecification                    : #message = #e2;
          ProgramSV                                : #message (program Variable)

          ProgramSV                                : #e2 (program Expression)







=== 521002223 ======================================================
```
{..
                   #lhs = #jcsystemType.#getTransient(#se)@#jcsystemType;
                ...}
```

ContextStatementBlock                    : ..{ ..   #lhs   =   #jcsystemType.#getTransient(#se)@#jcsystemType; ... } ...
  MethodBodyStatement                      : #lhs = #jcsystemType.#getTransient(#se)@#jcsystemType;
    ProgramSV                                : #jcsystemType (program NonPrimitiveType[name=javacard.framework.JCSystem])

    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #jcsystemType.#getTransient(#se);
      ProgramSV                                : #jcsystemType (program NonPrimitiveType[name=javacard.framework.JCSystem])

      ProgramSV                                : #getTransient (program MethodName[name=nativeKeYGetTransient])

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1910389374 ======================================================
```
{..
                   #jcsystemType.#setTransient(#se, #se1)@#jcsystemType;
                ...}
```

ContextStatementBlock                    : ..{ ..   #jcsystemType.#setTransient(#se, #se1)@#jcsystemType; ... } ...
  MethodBodyStatement                      : #jcsystemType.#setTransient(#se, #se1)@#jcsystemType;
    ProgramSV                                : #jcsystemType (program NonPrimitiveType[name=javacard.framework.JCSystem])

    MethodReference                          : #jcsystemType.#setTransient(#se, #se1);
      ProgramSV                                : #jcsystemType (program NonPrimitiveType[name=javacard.framework.JCSystem])

      ProgramSV                                : #setTransient (program MethodName[name=nativeKeYSetTransient])

      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #se1 (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -278685246 ======================================================
```
{..
                   #jcsystemType.#beginTransaction()@#jcsystemType;
                ...}
```

ContextStatementBlock                    : ..{ ..   #jcsystemType.#beginTransaction()@#jcsystemType; ... } ...
  MethodBodyStatement                      : #jcsystemType.#beginTransaction()@#jcsystemType;
    ProgramSV                                : #jcsystemType (program NonPrimitiveType[name=javacard.framework.JCSystem])

    MethodReference                          : #jcsystemType.#beginTransaction();
      ProgramSV                                : #jcsystemType (program NonPrimitiveType[name=javacard.framework.JCSystem])

      ProgramSV                                : #beginTransaction (program MethodName[name=nativeKeYBeginTransaction])





=== 1196191317 ======================================================
```
{.. #beginJavaCardTransaction; ...}
```

ContextStatementBlock                    : ..{ ..   #beginJavaCardTransaction; ... } ...
  TransactionStatement                     : #beginJavaCardTransaction



=== -108804798 ======================================================
```
{..
                   #jcsystemType.#commitTransaction()@#jcsystemType;
                ...}
```

ContextStatementBlock                    : ..{ ..   #jcsystemType.#commitTransaction()@#jcsystemType; ... } ...
  MethodBodyStatement                      : #jcsystemType.#commitTransaction()@#jcsystemType;
    ProgramSV                                : #jcsystemType (program NonPrimitiveType[name=javacard.framework.JCSystem])

    MethodReference                          : #jcsystemType.#commitTransaction();
      ProgramSV                                : #jcsystemType (program NonPrimitiveType[name=javacard.framework.JCSystem])

      ProgramSV                                : #commitTransaction (program MethodName[name=nativeKeYCommitTransaction])





=== 649287883 ======================================================
```
{.. #commitJavaCardTransaction; ...}
```

ContextStatementBlock                    : ..{ ..   #commitJavaCardTransaction; ... } ...
  TransactionStatement                     : #commitJavaCardTransaction



=== -1506096613 ======================================================
```
{..
                   #jcsystemType.#abortTransaction()@#jcsystemType;
                ...}
```

ContextStatementBlock                    : ..{ ..   #jcsystemType.#abortTransaction()@#jcsystemType; ... } ...
  MethodBodyStatement                      : #jcsystemType.#abortTransaction()@#jcsystemType;
    ProgramSV                                : #jcsystemType (program NonPrimitiveType[name=javacard.framework.JCSystem])

    MethodReference                          : #jcsystemType.#abortTransaction();
      ProgramSV                                : #jcsystemType (program NonPrimitiveType[name=javacard.framework.JCSystem])

      ProgramSV                                : #abortTransaction (program MethodName[name=nativeKeYAbortTransaction])





=== 1613355438 ======================================================
```
{.. #abortJavaCardTransaction; ...}
```

ContextStatementBlock                    : ..{ ..   #abortJavaCardTransaction; ... } ...
  TransactionStatement                     : #abortJavaCardTransaction



=== 927031283 ======================================================
```
{..
                   #beginJavaCardTransaction;
                ...}
```

ContextStatementBlock                    : ..{ ..   #beginJavaCardTransaction; ... } ...
  TransactionStatement                     : #beginJavaCardTransaction



=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 927031283 ======================================================
```
{..
                   #beginJavaCardTransaction;
                ...}
```

ContextStatementBlock                    : ..{ ..   #beginJavaCardTransaction; ... } ...
  TransactionStatement                     : #beginJavaCardTransaction



=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 785909633 ======================================================
```
{..
                   #commitJavaCardTransaction;
                ...}
```

ContextStatementBlock                    : ..{ ..   #commitJavaCardTransaction; ... } ...
  TransactionStatement                     : #commitJavaCardTransaction



=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 785909633 ======================================================
```
{..
                   #commitJavaCardTransaction;
                ...}
```

ContextStatementBlock                    : ..{ ..   #commitJavaCardTransaction; ... } ...
  TransactionStatement                     : #commitJavaCardTransaction



=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1631067045 ======================================================
```
{..
                   #finishJavaCardTransaction;
                ...}
```

ContextStatementBlock                    : ..{ ..   #finishJavaCardTransaction; ... } ...
  TransactionStatement                     : #finishJavaCardTransaction



=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1631067045 ======================================================
```
{..
                   #finishJavaCardTransaction;
                ...}
```

ContextStatementBlock                    : ..{ ..   #finishJavaCardTransaction; ... } ...
  TransactionStatement                     : #finishJavaCardTransaction



=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 16185676 ======================================================
```
{..
                   #abortJavaCardTransaction;
                ...}
```

ContextStatementBlock                    : ..{ ..   #abortJavaCardTransaction; ... } ...
  TransactionStatement                     : #abortJavaCardTransaction



=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 16185676 ======================================================
```
{..
                   #abortJavaCardTransaction;
                ...}
```

ContextStatementBlock                    : ..{ ..   #abortJavaCardTransaction; ... } ...
  TransactionStatement                     : #abortJavaCardTransaction



=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1000371868 ======================================================
```
{.. return #nse; ...}
```

ContextStatementBlock                    : ..{ ..   return #nse; ... } ...
  Return                                   : return #nse;
    ProgramSV                                : #nse (program NonSimpleExpression)




=== -329962928 ======================================================
```
{.. #typeof(#nse) #v0=#nse; return #v0; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v0 = #nse;   return #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v0 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  Return                                   : return #v0;
    ProgramSV                                : #v0 (program Variable)




=== 636310149 ======================================================
```
{.. merge_point(#lhs); ...}
```

ContextStatementBlock                    : ..{ ..   //@ merge_point (#lhs);;   ... } ...
  MergePointStatement                      : 
    ProgramSV                                : #lhs (program LeftHandSide)




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1058430712 ======================================================
```
{.. #loc = #se; ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #se; ... } ...
  CopyAssignment                           : #loc = #se;
    ProgramSV                                : #loc (program Variable)

    ProgramSV                                : #se (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1786116331 ======================================================
```
{.#pm@#t(#v).. this[#se]=#se0; ...}
```

ContextStatementBlock                    : ..{ ..   this[#se] = #se0; ... } ...
  ExecutionContext                         : Context: #t (program Type)##pm (program ProgramMethod) Instance: #v (program Variable)
    ProgramSV                                : #t (program Type)

    ProgramSV                                : #pm (program ProgramMethod)

    ProgramSV                                : #v (program Variable)


  CopyAssignment                           : this[#se] = #se0;
    ArrayReference                           : this[#se];
      ThisReference                            : this;

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1786116331 ======================================================
```
{.#pm@#t(#v).. this[#se]=#se0; ...}
```

ContextStatementBlock                    : ..{ ..   this[#se] = #se0; ... } ...
  ExecutionContext                         : Context: #t (program Type)##pm (program ProgramMethod) Instance: #v (program Variable)
    ProgramSV                                : #t (program Type)

    ProgramSV                                : #pm (program ProgramMethod)

    ProgramSV                                : #v (program Variable)


  CopyAssignment                           : this[#se] = #se0;
    ArrayReference                           : this[#se];
      ThisReference                            : this;

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1394811324 ======================================================
```
{.. this[#nse]=#se0; ...}
```

ContextStatementBlock                    : ..{ ..   this[#nse] = #se0; ... } ...
  CopyAssignment                           : this[#nse] = #se0;
    ArrayReference                           : this[#nse];
      ThisReference                            : this;

      ProgramSV                                : #nse (program NonSimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== 1600937278 ======================================================
```
{.. #typeof(#nse) #v0=#nse; this[#v0]=#se0; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v0 = #nse;   this[#v0] = #se0; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v0 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : this[#v0] = #se0;
    ArrayReference                           : this[#v0];
      ThisReference                            : this;

      ProgramSV                                : #v0 (program Variable)


    ProgramSV                                : #se0 (program SimpleExpression)




=== 1940778119 ======================================================
```
{.. #t #v0; ...}
```

ContextStatementBlock                    : ..{ ..   #t #v0; ... } ...
  LocalVariableDeclaration                 : #t #v0;
    ProgramSV                                : #t (program Type)

    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1000100657 ======================================================
```
{.. final #t #v0; ...}
```

ContextStatementBlock                    : ..{ ..   final #t #v0; ... } ...
  LocalVariableDeclaration                 : final #t #v0;
    Final                                    : final;

    ProgramSV                                : #t (program Type)

    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -244188488 ======================================================
```
{.. ghost #t #v0; ...}
```

ContextStatementBlock                    : ..{ ..   ghost #t #v0; ... } ...
  LocalVariableDeclaration                 : ghost #t #v0;
    Ghost                                    : ghost;

    ProgramSV                                : #t (program Type)

    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 822836122 ======================================================
```
{.. #t #v0 = #vi; ...}
```

ContextStatementBlock                    : ..{ ..   #t #v0 = #vi; ... } ...
  LocalVariableDeclaration                 : #t #v0 = #vi;
    ProgramSV                                : #t (program Type)

    VariableSpecification                    : #v0 = #vi;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #vi (program VariableInitializer)





=== 1082934412 ======================================================
```
{.. #t #v0; #v0 = #vi; ...}
```

ContextStatementBlock                    : ..{ ..   #t #v0;   #v0 = #vi; ... } ...
  LocalVariableDeclaration                 : #t #v0;
    ProgramSV                                : #t (program Type)

    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  CopyAssignment                           : #v0 = #vi;
    ProgramSV                                : #v0 (program Variable)

    ProgramSV                                : #vi (program VariableInitializer)




=== -1426539836 ======================================================
```
{.. final #t #v0 = #vi; ...}
```

ContextStatementBlock                    : ..{ ..   final #t #v0 = #vi; ... } ...
  LocalVariableDeclaration                 : final #t #v0 = #vi;
    Final                                    : final;

    ProgramSV                                : #t (program Type)

    VariableSpecification                    : #v0 = #vi;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #vi (program VariableInitializer)





=== -1145442398 ======================================================
```
{.. final #t #v0; #v0 = #vi; ...}
```

ContextStatementBlock                    : ..{ ..   final #t #v0;   #v0 = #vi; ... } ...
  LocalVariableDeclaration                 : final #t #v0;
    Final                                    : final;

    ProgramSV                                : #t (program Type)

    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  CopyAssignment                           : #v0 = #vi;
    ProgramSV                                : #v0 (program Variable)

    ProgramSV                                : #vi (program VariableInitializer)




=== 52322571 ======================================================
```
{.. ghost #t #v0 = #vi; ...}
```

ContextStatementBlock                    : ..{ ..   ghost #t #v0 = #vi; ... } ...
  LocalVariableDeclaration                 : ghost #t #v0 = #vi;
    Ghost                                    : ghost;

    ProgramSV                                : #t (program Type)

    VariableSpecification                    : #v0 = #vi;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #vi (program VariableInitializer)





=== 1884560827 ======================================================
```
{.. ghost #t #v0; #v0 = #vi; ...}
```

ContextStatementBlock                    : ..{ ..   ghost #t #v0;   #v0 = #vi; ... } ...
  LocalVariableDeclaration                 : ghost #t #v0;
    Ghost                                    : ghost;

    ProgramSV                                : #t (program Type)

    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  CopyAssignment                           : #v0 = #vi;
    ProgramSV                                : #v0 (program Variable)

    ProgramSV                                : #vi (program VariableInitializer)




=== -1997148116 ======================================================
```
{.. #multvardecl ...}
```

ContextStatementBlock                    : ..{ ..   #multvardecl ... } ...
  ProgramSV                                : #multvardecl (program MultipleVariableDeclaration)



=== 2114316549 ======================================================
```
{.. #resolve-multiple-var-decl(#multvardecl); ...}
```

ContextStatementBlock                    : ..{ ..   multiple-var-decl(#multvardecl) ... } ...
  MultipleVarDecl                          : multiple-var-decl( #multvardecl (program MultipleVariableDeclaration));
    ProgramSV                                : #multvardecl (program MultipleVariableDeclaration)




=== -1434764972 ======================================================
```
{.. #arraypost ...}
```

ContextStatementBlock                    : ..{ ..   #arraypost ... } ...
  ProgramSV                                : #arraypost (program ArrayPostDeclaration)



=== 144098718 ======================================================
```
{..
                #array-post-declaration(#arraypost);
                              ...}
```

ContextStatementBlock                    : ..{ ..   array-post-declaration(#arraypost) ... } ...
  ArrayPostDecl                            : array-post-declaration( #arraypost (program ArrayPostDeclaration));
    ProgramSV                                : #arraypost (program ArrayPostDeclaration)




=== -750308262 ======================================================
```
{.. throw null; ...}
```

ContextStatementBlock                    : ..{ ..   throw null; ... } ...
  Throw                                    : throw null;
    NullLiteral                              : null;




=== -2085472415 ======================================================
```
{.. throw new java.lang.NullPointerException(); ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.NullPointerException(); ... } ...
  Throw                                    : throw new java.lang.NullPointerException();
    New                                      : new java.lang.NullPointerException();
      SchemaTypeReference                      : java.lang.NullPointerException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : NullPointerException






=== -1732205936 ======================================================
```
{.. throw #nse; ...}
```

ContextStatementBlock                    : ..{ ..   throw #nse; ... } ...
  Throw                                    : throw #nse;
    ProgramSV                                : #nse (program NonSimpleExpression)




=== 875520482 ======================================================
```
{.. #typeof(#nse) #v0 = #nse; throw #v0; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v0 = #nse;   throw #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v0 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  Throw                                    : throw #v0;
    ProgramSV                                : #v0 (program Variable)




=== 1252171189 ======================================================
```
{.. #lb: throw #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lb:   throw #se; ... } ...
  LabeledStatement                         : #lb: throw #se;
    ProgramSV                                : #lb (program Label)

    Throw                                    : throw #se;
      ProgramSV                                : #se (program SimpleExpression)





=== -837399766 ======================================================
```
{.. throw #se; ...}
```

ContextStatementBlock                    : ..{ ..   throw #se; ... } ...
  Throw                                    : throw #se;
    ProgramSV                                : #se (program SimpleExpression)




=== 1966598915 ======================================================
```
{.. #lb: { throw #se; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   #lb:   {     throw #se;     #slist   } ... } ...
  LabeledStatement                         : #lb: {   throw #se;   #slist }
    ProgramSV                                : #lb (program Label)

    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)





=== -837399766 ======================================================
```
{.. throw #se; ...}
```

ContextStatementBlock                    : ..{ ..   throw #se; ... } ...
  Throw                                    : throw #se;
    ProgramSV                                : #se (program SimpleExpression)




=== 582483206 ======================================================
```
{ throw #se; #slist }
```

StatementBlock                           : {   throw #se;   #slist }
  Throw                                    : throw #se;
    ProgramSV                                : #se (program SimpleExpression)


  ProgramSV                                : #slist (program Statement)



=== 582483206 ======================================================
```
{ throw #se; #slist }
```

StatementBlock                           : {   throw #se;   #slist }
  Throw                                    : throw #se;
    ProgramSV                                : #se (program SimpleExpression)


  ProgramSV                                : #slist (program Statement)



=== -1776824110 ======================================================
```
{.. try { throw #se; #slist }
                catch ( #t #v0 ) { #slist1 } ...}
```

ContextStatementBlock                    : ..{ ..   try {     throw #se;     #slist   } catch (#t #v0) {     #slist1   } ... } ...
  Try                                      : try {   throw #se;   #slist } catch (#t #v0) {   #slist1 }
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Catch                                    :  catch (#t #v0) {   #slist1 }
      ParameterDeclaration                     : #t #v0;
        ProgramSV                                : #t (program Type)

        VariableSpecification                    : #v0;
          ProgramSV                                : #v0 (program Variable)



      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)






=== -1998530045 ======================================================
```
{.. if ( #se == null ) {
                      try { throw new java.lang.NullPointerException (); }
                      catch ( #t #v0 ) { #slist1 }
                } else if ( #se instanceof #t ) {
                      #t #v0;
                      #v0 = (#t) #se;
                      #slist1
                } else {
                      throw #se;
                } ...}
```

ContextStatementBlock                    : ..{ ..   if (#se == null) {     try {       throw new java.lang.NullPointerException();     } catch (#t #v0) {       #slist1     }   } else if (#se instanceof #t) {     #t #v0;     #v0 = (#t) #se;     #slist1   } else {     throw #se;   } ... } ...
  If                                       : if (#se == null) {   try {     throw new java.lang.NullPointerException();   } catch (#t #v0) {     #slist1   } } else if (#se instanceof #t) {   #t #v0;   #v0 = (#t) #se;   #slist1 } else {   throw #se; }
    Equals                                   : #se == null;
      ProgramSV                                : #se (program SimpleExpression)

      NullLiteral                              : null;


    Then                                     :  {   try {     throw new java.lang.NullPointerException();   } catch (#t #v0) {     #slist1   } }
      StatementBlock                           : {   try {     throw new java.lang.NullPointerException();   } catch (#t #v0) {     #slist1   } }
        Try                                      : try {   throw new java.lang.NullPointerException(); } catch (#t #v0) {   #slist1 }
          StatementBlock                           : {   throw new java.lang.NullPointerException(); }
            Throw                                    : throw new java.lang.NullPointerException();
              New                                      : new java.lang.NullPointerException();
                SchemaTypeReference                      : java.lang.NullPointerException;
                  PackageReference                         : java.lang
                    PackageReference                         : java
                      ProgramElementName                       : java


                    ProgramElementName                       : lang


                  ProgramElementName                       : NullPointerException





          Catch                                    :  catch (#t #v0) {   #slist1 }
            ParameterDeclaration                     : #t #v0;
              ProgramSV                                : #t (program Type)

              VariableSpecification                    : #v0;
                ProgramSV                                : #v0 (program Variable)



            StatementBlock                           : {   #slist1 }
              ProgramSV                                : #slist1 (program Statement)






    Else                                     : else if (#se instanceof #t) {   #t #v0;   #v0 = (#t) #se;   #slist1 } else {   throw #se; }
      If                                       : if (#se instanceof #t) {   #t #v0;   #v0 = (#t) #se;   #slist1 } else {   throw #se; }
        Instanceof                               : #se instanceof #t;
          ProgramSV                                : #se (program SimpleExpression)

          ProgramSV                                : #t (program Type)


        Then                                     :  {   #t #v0;   #v0 = (#t) #se;   #slist1 }
          StatementBlock                           : {   #t #v0;   #v0 = (#t) #se;   #slist1 }
            LocalVariableDeclaration                 : #t #v0;
              ProgramSV                                : #t (program Type)

              VariableSpecification                    : #v0;
                ProgramSV                                : #v0 (program Variable)



            CopyAssignment                           : #v0 = (#t) #se;
              ProgramSV                                : #v0 (program Variable)

              TypeCast                                 : (#t) #se;
                ProgramSV                                : #t (program Type)

                ProgramSV                                : #se (program SimpleExpression)



            ProgramSV                                : #slist1 (program Statement)



        Else                                     : else {   throw #se; }
          StatementBlock                           : {   throw #se; }
            Throw                                    : throw #se;
              ProgramSV                                : #se (program SimpleExpression)









=== -164186320 ======================================================
```
{.. try { throw #se; #slist }
                catch ( #t #v0 ) { #slist1 }
                catch ( #t2 #v1 ) { #slist3 }
                catch #cs ...}
```

ContextStatementBlock                    : ..{ ..   try {     throw #se;     #slist   } catch (#t #v0) {     #slist1   } catch (#t2 #v1) {     #slist3   }#cs ... } ...
  Try                                      : try {   throw #se;   #slist } catch (#t #v0) {   #slist1 } catch (#t2 #v1) {   #slist3 }#cs
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Catch                                    :  catch (#t #v0) {   #slist1 }
      ParameterDeclaration                     : #t #v0;
        ProgramSV                                : #t (program Type)

        VariableSpecification                    : #v0;
          ProgramSV                                : #v0 (program Variable)



      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    Catch                                    :  catch (#t2 #v1) {   #slist3 }
      ParameterDeclaration                     : #t2 #v1;
        ProgramSV                                : #t2 (program Type)

        VariableSpecification                    : #v1;
          ProgramSV                                : #v1 (program Variable)



      StatementBlock                           : {   #slist3 }
        ProgramSV                                : #slist3 (program Statement)



    ProgramSV                                : #cs (program Catch)




=== -867388430 ======================================================
```
{.. if ( #se == null ) {
                     try { throw new java.lang.NullPointerException (); }
                     catch ( #t #v0 ) { #slist1 }
                     catch ( #t2 #v1 ) { #slist3 }
                     catch #cs
                } else if ( #se instanceof #t ) {
                     #t #v0;
                     #v0 = (#t) #se;
                     #slist1
                } else {
                     try { throw #se; }
                     catch ( #t2 #v1 ) { #slist3 }
                     catch #cs
                } ...}
```

ContextStatementBlock                    : ..{ ..   if (#se == null) {     try {       throw new java.lang.NullPointerException();     } catch (#t #v0) {       #slist1     } catch (#t2 #v1) {       #slist3     }#cs   } else if (#se instanceof #t) {     #t #v0;     #v0 = (#t) #se;     #slist1   } else {     try {       throw #se;     } catch (#t2 #v1) {       #slist3     }#cs   } ... } ...
  If                                       : if (#se == null) {   try {     throw new java.lang.NullPointerException();   } catch (#t #v0) {     #slist1   } catch (#t2 #v1) {     #slist3   }#cs } else if (#se instanceof #t) {   #t #v0;   #v0 = (#t) #se;   #slist1 } else {   try {     throw #se;   } catch (#t2 #v1) {     #slist3   }#cs }
    Equals                                   : #se == null;
      ProgramSV                                : #se (program SimpleExpression)

      NullLiteral                              : null;


    Then                                     :  {   try {     throw new java.lang.NullPointerException();   } catch (#t #v0) {     #slist1   } catch (#t2 #v1) {     #slist3   }#cs }
      StatementBlock                           : {   try {     throw new java.lang.NullPointerException();   } catch (#t #v0) {     #slist1   } catch (#t2 #v1) {     #slist3   }#cs }
        Try                                      : try {   throw new java.lang.NullPointerException(); } catch (#t #v0) {   #slist1 } catch (#t2 #v1) {   #slist3 }#cs
          StatementBlock                           : {   throw new java.lang.NullPointerException(); }
            Throw                                    : throw new java.lang.NullPointerException();
              New                                      : new java.lang.NullPointerException();
                SchemaTypeReference                      : java.lang.NullPointerException;
                  PackageReference                         : java.lang
                    PackageReference                         : java
                      ProgramElementName                       : java


                    ProgramElementName                       : lang


                  ProgramElementName                       : NullPointerException





          Catch                                    :  catch (#t #v0) {   #slist1 }
            ParameterDeclaration                     : #t #v0;
              ProgramSV                                : #t (program Type)

              VariableSpecification                    : #v0;
                ProgramSV                                : #v0 (program Variable)



            StatementBlock                           : {   #slist1 }
              ProgramSV                                : #slist1 (program Statement)



          Catch                                    :  catch (#t2 #v1) {   #slist3 }
            ParameterDeclaration                     : #t2 #v1;
              ProgramSV                                : #t2 (program Type)

              VariableSpecification                    : #v1;
                ProgramSV                                : #v1 (program Variable)



            StatementBlock                           : {   #slist3 }
              ProgramSV                                : #slist3 (program Statement)



          ProgramSV                                : #cs (program Catch)




    Else                                     : else if (#se instanceof #t) {   #t #v0;   #v0 = (#t) #se;   #slist1 } else {   try {     throw #se;   } catch (#t2 #v1) {     #slist3   }#cs }
      If                                       : if (#se instanceof #t) {   #t #v0;   #v0 = (#t) #se;   #slist1 } else {   try {     throw #se;   } catch (#t2 #v1) {     #slist3   }#cs }
        Instanceof                               : #se instanceof #t;
          ProgramSV                                : #se (program SimpleExpression)

          ProgramSV                                : #t (program Type)


        Then                                     :  {   #t #v0;   #v0 = (#t) #se;   #slist1 }
          StatementBlock                           : {   #t #v0;   #v0 = (#t) #se;   #slist1 }
            LocalVariableDeclaration                 : #t #v0;
              ProgramSV                                : #t (program Type)

              VariableSpecification                    : #v0;
                ProgramSV                                : #v0 (program Variable)



            CopyAssignment                           : #v0 = (#t) #se;
              ProgramSV                                : #v0 (program Variable)

              TypeCast                                 : (#t) #se;
                ProgramSV                                : #t (program Type)

                ProgramSV                                : #se (program SimpleExpression)



            ProgramSV                                : #slist1 (program Statement)



        Else                                     : else {   try {     throw #se;   } catch (#t2 #v1) {     #slist3   }#cs }
          StatementBlock                           : {   try {     throw #se;   } catch (#t2 #v1) {     #slist3   }#cs }
            Try                                      : try {   throw #se; } catch (#t2 #v1) {   #slist3 }#cs
              StatementBlock                           : {   throw #se; }
                Throw                                    : throw #se;
                  ProgramSV                                : #se (program SimpleExpression)



              Catch                                    :  catch (#t2 #v1) {   #slist3 }
                ParameterDeclaration                     : #t2 #v1;
                  ProgramSV                                : #t2 (program Type)

                  VariableSpecification                    : #v1;
                    ProgramSV                                : #v1 (program Variable)



                StatementBlock                           : {   #slist3 }
                  ProgramSV                                : #slist3 (program Statement)



              ProgramSV                                : #cs (program Catch)









=== 525566171 ======================================================
```
{.. try { throw #se; #slist}
                catch ( #t #v0 ) { #slist1 }
                catch #cs
                finally { #slist2 } ...}
```

ContextStatementBlock                    : ..{ ..   try {     throw #se;     #slist   } catch (#t #v0) {     #slist1   }#cs finally {     #slist2   } ... } ...
  Try                                      : try {   throw #se;   #slist } catch (#t #v0) {   #slist1 }#cs finally {   #slist2 }
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Catch                                    :  catch (#t #v0) {   #slist1 }
      ParameterDeclaration                     : #t #v0;
        ProgramSV                                : #t (program Type)

        VariableSpecification                    : #v0;
          ProgramSV                                : #v0 (program Variable)



      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Catch)

    Finally                                  :  finally {   #slist2 }
      StatementBlock                           : {   #slist2 }
        ProgramSV                                : #slist2 (program Statement)






=== 426886028 ======================================================
```
{.. if ( #se == null ) {
                     try { throw new java.lang.NullPointerException (); }
                     catch ( #t #v0 ) { #slist1 }
                     catch #cs
                     finally { #slist2 }
                } else if ( #se instanceof #t ) {
                     try {
                        #t #v0;
                        #v0 = (#t) #se;
                        #slist1
                     } finally { #slist2 }
                } else {
                     try { throw #se; }
                     catch #cs
                     finally { #slist2 }
                } ...}
```

ContextStatementBlock                    : ..{ ..   if (#se == null) {     try {       throw new java.lang.NullPointerException();     } catch (#t #v0) {       #slist1     }#cs finally {       #slist2     }   } else if (#se instanceof #t) {     try {       #t #v0;       #v0 = (#t) #se;       #slist1     } finally {       #slist2     }   } else {     try {       throw #se;     }#cs finally {       #slist2     }   } ... } ...
  If                                       : if (#se == null) {   try {     throw new java.lang.NullPointerException();   } catch (#t #v0) {     #slist1   }#cs finally {     #slist2   } } else if (#se instanceof #t) {   try {     #t #v0;     #v0 = (#t) #se;     #slist1   } finally {     #slist2   } } else {   try {     throw #se;   }#cs finally {     #slist2   } }
    Equals                                   : #se == null;
      ProgramSV                                : #se (program SimpleExpression)

      NullLiteral                              : null;


    Then                                     :  {   try {     throw new java.lang.NullPointerException();   } catch (#t #v0) {     #slist1   }#cs finally {     #slist2   } }
      StatementBlock                           : {   try {     throw new java.lang.NullPointerException();   } catch (#t #v0) {     #slist1   }#cs finally {     #slist2   } }
        Try                                      : try {   throw new java.lang.NullPointerException(); } catch (#t #v0) {   #slist1 }#cs finally {   #slist2 }
          StatementBlock                           : {   throw new java.lang.NullPointerException(); }
            Throw                                    : throw new java.lang.NullPointerException();
              New                                      : new java.lang.NullPointerException();
                SchemaTypeReference                      : java.lang.NullPointerException;
                  PackageReference                         : java.lang
                    PackageReference                         : java
                      ProgramElementName                       : java


                    ProgramElementName                       : lang


                  ProgramElementName                       : NullPointerException





          Catch                                    :  catch (#t #v0) {   #slist1 }
            ParameterDeclaration                     : #t #v0;
              ProgramSV                                : #t (program Type)

              VariableSpecification                    : #v0;
                ProgramSV                                : #v0 (program Variable)



            StatementBlock                           : {   #slist1 }
              ProgramSV                                : #slist1 (program Statement)



          ProgramSV                                : #cs (program Catch)

          Finally                                  :  finally {   #slist2 }
            StatementBlock                           : {   #slist2 }
              ProgramSV                                : #slist2 (program Statement)






    Else                                     : else if (#se instanceof #t) {   try {     #t #v0;     #v0 = (#t) #se;     #slist1   } finally {     #slist2   } } else {   try {     throw #se;   }#cs finally {     #slist2   } }
      If                                       : if (#se instanceof #t) {   try {     #t #v0;     #v0 = (#t) #se;     #slist1   } finally {     #slist2   } } else {   try {     throw #se;   }#cs finally {     #slist2   } }
        Instanceof                               : #se instanceof #t;
          ProgramSV                                : #se (program SimpleExpression)

          ProgramSV                                : #t (program Type)


        Then                                     :  {   try {     #t #v0;     #v0 = (#t) #se;     #slist1   } finally {     #slist2   } }
          StatementBlock                           : {   try {     #t #v0;     #v0 = (#t) #se;     #slist1   } finally {     #slist2   } }
            Try                                      : try {   #t #v0;   #v0 = (#t) #se;   #slist1 } finally {   #slist2 }
              StatementBlock                           : {   #t #v0;   #v0 = (#t) #se;   #slist1 }
                LocalVariableDeclaration                 : #t #v0;
                  ProgramSV                                : #t (program Type)

                  VariableSpecification                    : #v0;
                    ProgramSV                                : #v0 (program Variable)



                CopyAssignment                           : #v0 = (#t) #se;
                  ProgramSV                                : #v0 (program Variable)

                  TypeCast                                 : (#t) #se;
                    ProgramSV                                : #t (program Type)

                    ProgramSV                                : #se (program SimpleExpression)



                ProgramSV                                : #slist1 (program Statement)


              Finally                                  :  finally {   #slist2 }
                StatementBlock                           : {   #slist2 }
                  ProgramSV                                : #slist2 (program Statement)






        Else                                     : else {   try {     throw #se;   }#cs finally {     #slist2   } }
          StatementBlock                           : {   try {     throw #se;   }#cs finally {     #slist2   } }
            Try                                      : try {   throw #se; }#cs finally {   #slist2 }
              StatementBlock                           : {   throw #se; }
                Throw                                    : throw #se;
                  ProgramSV                                : #se (program SimpleExpression)



              ProgramSV                                : #cs (program Catch)

              Finally                                  :  finally {   #slist2 }
                StatementBlock                           : {   #slist2 }
                  ProgramSV                                : #slist2 (program Statement)











=== -979268258 ======================================================
```
{.. try { throw #se; #slist }
                finally { #slist2 } ...}
```

ContextStatementBlock                    : ..{ ..   try {     throw #se;     #slist   } finally {     #slist2   } ... } ...
  Try                                      : try {   throw #se;   #slist } finally {   #slist2 }
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Finally                                  :  finally {   #slist2 }
      StatementBlock                           : {   #slist2 }
        ProgramSV                                : #slist2 (program Statement)






=== 424272168 ======================================================
```
{.. if ( #se == null ) {
                     { #slist2 }
                     throw new java.lang.NullPointerException ();
                } else {
                     #typeof(#se) #v0 = #se;
                     { #slist2 }
                     throw #v0;
                } ...}
```

ContextStatementBlock                    : ..{ ..   if (#se == null) {     {       #slist2     }     throw new java.lang.NullPointerException();   } else {     #typeof(#se) #v0 = #se;     {       #slist2     }     throw #v0;   } ... } ...
  If                                       : if (#se == null) {   {     #slist2   }   throw new java.lang.NullPointerException(); } else {   #typeof(#se) #v0 = #se;   {     #slist2   }   throw #v0; }
    Equals                                   : #se == null;
      ProgramSV                                : #se (program SimpleExpression)

      NullLiteral                              : null;


    Then                                     :  {   {     #slist2   }   throw new java.lang.NullPointerException(); }
      StatementBlock                           : {   {     #slist2   }   throw new java.lang.NullPointerException(); }
        StatementBlock                           : {   #slist2 }
          ProgramSV                                : #slist2 (program Statement)


        Throw                                    : throw new java.lang.NullPointerException();
          New                                      : new java.lang.NullPointerException();
            SchemaTypeReference                      : java.lang.NullPointerException;
              PackageReference                         : java.lang
                PackageReference                         : java
                  ProgramElementName                       : java


                ProgramElementName                       : lang


              ProgramElementName                       : NullPointerException






    Else                                     : else {   #typeof(#se) #v0 = #se;   {     #slist2   }   throw #v0; }
      StatementBlock                           : {   #typeof(#se) #v0 = #se;   {     #slist2   }   throw #v0; }
        LocalVariableDeclaration                 : #typeof(#se) #v0 = #se;
          TypeOf                                   : #typeof( #se (program SimpleExpression));
            ProgramSV                                : #se (program SimpleExpression)


          VariableSpecification                    : #v0 = #se;
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #se (program SimpleExpression)



        StatementBlock                           : {   #slist2 }
          ProgramSV                                : #slist2 (program Statement)


        Throw                                    : throw #v0;
          ProgramSV                                : #v0 (program Variable)







=== -1688482448 ======================================================
```
{.. try {} #cs ...}
```

ContextStatementBlock                    : ..{ ..   try {}#cs ... } ...
  Try                                      : try {}#cs
    StatementBlock                           : {}

    ProgramSV                                : #cs (program Catch)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1709325686 ======================================================
```
{.. try {}
                catch #cs
                finally { #slist2 } ...}
```

ContextStatementBlock                    : ..{ ..   try {}#cs finally {     #slist2   } ... } ...
  Try                                      : try {}#cs finally {   #slist2 }
    StatementBlock                           : {}

    ProgramSV                                : #cs (program Catch)

    Finally                                  :  finally {   #slist2 }
      StatementBlock                           : {   #slist2 }
        ProgramSV                                : #slist2 (program Statement)






=== 1081067526 ======================================================
```
{.. { #slist2 }  ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist2   } ... } ...
  StatementBlock                           : {   #slist2 }
    ProgramSV                                : #slist2 (program Statement)




=== -1789713742 ======================================================
```
{.. try { break #lb; #slist }
                catch #cs ...}
```

ContextStatementBlock                    : ..{ ..   try {     break;     #slist   }#cs ... } ...
  Try                                      : try {   break;   #slist }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Catch)




=== 1449199143 ======================================================
```
{.. break #lb; ...}
```

ContextStatementBlock                    : ..{ ..   break; ... } ...
  Break                                    : break;
    ProgramSV                                : #lb (program Label)




=== 2060835613 ======================================================
```
{.. try { break #lb; #slist }
                catch #cs
                finally { #slist2 } ...}
```

ContextStatementBlock                    : ..{ ..   try {     break;     #slist   }#cs finally {     #slist2   } ... } ...
  Try                                      : try {   break;   #slist }#cs finally {   #slist2 }
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Catch)

    Finally                                  :  finally {   #slist2 }
      StatementBlock                           : {   #slist2 }
        ProgramSV                                : #slist2 (program Statement)






=== -1428940765 ======================================================
```
{.. { #slist2 } break #lb; ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist2   }   break; ... } ...
  StatementBlock                           : {   #slist2 }
    ProgramSV                                : #slist2 (program Statement)


  Break                                    : break;
    ProgramSV                                : #lb (program Label)




=== 552768331 ======================================================
```
{.. try { break; #slist }
                catch #cs ...}
```

ContextStatementBlock                    : ..{ ..   try {     break;     #slist   }#cs ... } ...
  Try                                      : try {   break;   #slist }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;

      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Catch)




=== -1168509650 ======================================================
```
{.. break; ...}
```

ContextStatementBlock                    : ..{ ..   break; ... } ...
  Break                                    : break;



=== 248165174 ======================================================
```
{.. try { break; #slist }
                catch #cs
                finally { #slist2 } ...}
```

ContextStatementBlock                    : ..{ ..   try {     break;     #slist   }#cs finally {     #slist2   } ... } ...
  Try                                      : try {   break;   #slist }#cs finally {   #slist2 }
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;

      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Catch)

    Finally                                  :  finally {   #slist2 }
      StatementBlock                           : {   #slist2 }
        ProgramSV                                : #slist2 (program Statement)






=== -1908579030 ======================================================
```
{.. { #slist2 } break; ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist2   }   break; ... } ...
  StatementBlock                           : {   #slist2 }
    ProgramSV                                : #slist2 (program Statement)


  Break                                    : break;



=== -342737524 ======================================================
```
{.. try { continue #lb; #slist }
                catch #cs ...}
```

ContextStatementBlock                    : ..{ ..   try {     continue;     #slist   }#cs ... } ...
  Try                                      : try {   continue;   #slist }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Catch)




=== -2027310279 ======================================================
```
{.. continue #lb; ...}
```

ContextStatementBlock                    : ..{ ..   continue; ... } ...
  Continue                                 : continue;
    ProgramSV                                : #lb (program Label)




=== -1510338313 ======================================================
```
{.. try { continue #lb; #slist }
                catch #cs
                finally { #slist2 } ...}
```

ContextStatementBlock                    : ..{ ..   try {     continue;     #slist   }#cs finally {     #slist2   } ... } ...
  Try                                      : try {   continue;   #slist }#cs finally {   #slist2 }
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Catch)

    Finally                                  :  finally {   #slist2 }
      StatementBlock                           : {   #slist2 }
        ProgramSV                                : #slist2 (program Statement)






=== 33787837 ======================================================
```
{.. { #slist2 } continue #lb; ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist2   }   continue; ... } ...
  StatementBlock                           : {   #slist2 }
    ProgramSV                                : #slist2 (program Statement)


  Continue                                 : continue;
    ProgramSV                                : #lb (program Label)




=== -1672139995 ======================================================
```
{.. try { continue; #slist }
                catch #cs ...}
```

ContextStatementBlock                    : ..{ ..   try {     continue;     #slist   }#cs ... } ...
  Try                                      : try {   continue;   #slist }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;

      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Catch)




=== -459801792 ======================================================
```
{.. continue; ...}
```

ContextStatementBlock                    : ..{ ..   continue; ... } ...
  Continue                                 : continue;



=== -1143478768 ======================================================
```
{.. try { continue; #slist }
                catch #cs
                finally { #slist2 } ...}
```

ContextStatementBlock                    : ..{ ..   try {     continue;     #slist   }#cs finally {     #slist2   } ... } ...
  Try                                      : try {   continue;   #slist }#cs finally {   #slist2 }
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;

      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Catch)

    Finally                                  :  finally {   #slist2 }
      StatementBlock                           : {   #slist2 }
        ProgramSV                                : #slist2 (program Statement)






=== -1799571004 ======================================================
```
{.. { #slist2 } continue; ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist2   }   continue; ... } ...
  StatementBlock                           : {   #slist2 }
    ProgramSV                                : #slist2 (program Statement)


  Continue                                 : continue;



=== 1464225415 ======================================================
```
{.. try { return #se; #slist }
                catch #cs ...}
```

ContextStatementBlock                    : ..{ ..   try {     return #se;     #slist   }#cs ... } ...
  Try                                      : try {   return #se;   #slist }#cs
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Catch)




=== 220579230 ======================================================
```
{.. return #se; ...}
```

ContextStatementBlock                    : ..{ ..   return #se; ... } ...
  Return                                   : return #se;
    ProgramSV                                : #se (program SimpleExpression)




=== 175276146 ======================================================
```
{.. try { return #se; #slist }
                catch #cs
                finally { #slist2 } ...}
```

ContextStatementBlock                    : ..{ ..   try {     return #se;     #slist   }#cs finally {     #slist2   } ... } ...
  Try                                      : try {   return #se;   #slist }#cs finally {   #slist2 }
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Catch)

    Finally                                  :  finally {   #slist2 }
      StatementBlock                           : {   #slist2 }
        ProgramSV                                : #slist2 (program Statement)






=== -1209269990 ======================================================
```
{.. #typeof(#se) #v0 = #se;
                { #slist2 }
                return #v0; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#se) #v0 = #se;   {     #slist2   }   return #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#se) #v0 = #se;
    TypeOf                                   : #typeof( #se (program SimpleExpression));
      ProgramSV                                : #se (program SimpleExpression)


    VariableSpecification                    : #v0 = #se;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)



  StatementBlock                           : {   #slist2 }
    ProgramSV                                : #slist2 (program Statement)


  Return                                   : return #v0;
    ProgramSV                                : #v0 (program Variable)




=== 9984252 ======================================================
```
{.. try { return; #slist }
                catch #cs ...}
```

ContextStatementBlock                    : ..{ ..   try {     return;     #slist   }#cs ... } ...
  Try                                      : try {   return;   #slist }#cs
    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Catch)




=== -262418871 ======================================================
```
{.. return; ...}
```

ContextStatementBlock                    : ..{ ..   return; ... } ...
  Return                                   : return;



=== 2092643431 ======================================================
```
{.. try { return; #slist }
                catch #cs
                finally { #slist2 } ...}
```

ContextStatementBlock                    : ..{ ..   try {     return;     #slist   }#cs finally {     #slist2   } ... } ...
  Try                                      : try {   return;   #slist }#cs finally {   #slist2 }
    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Catch)

    Finally                                  :  finally {   #slist2 }
      StatementBlock                           : {   #slist2 }
        ProgramSV                                : #slist2 (program Statement)






=== -1729733171 ======================================================
```
{.. { #slist2 } return; ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist2   }   return; ... } ...
  StatementBlock                           : {   #slist2 }
    ProgramSV                                : #slist2 (program Statement)


  Return                                   : return;



=== 1707724357 ======================================================
```
{.. #lhs0 = ++#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = ++#lhs1; ... } ...
  CopyAssignment                           : #lhs0 = ++#lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PreIncrement                             : ++#lhs1;
      ProgramSV                                : #lhs1 (program LeftHandSide)





=== 1066047565 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1+1); #lhs0 = #lhs1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 + 1);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 + 1);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 + 1);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 + 1);
        Plus                                     : #lhs1 + 1;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          IntLiteral                               : 1





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== -2028754003 ======================================================
```
{.. #lhs0 = ++#e.#attribute; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = ++#e.#attribute; ... } ...
  CopyAssignment                           : #lhs0 = ++#e.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PreIncrement                             : ++#e.#attribute;
      SchematicFieldReference                  : #e.#attribute;
        ProgramSV                                : #e (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)






=== -391870180 ======================================================
```
{.. #typeof(#e) #v=#e; #v.#attribute = (#typeof(#attribute))(#v.#attribute+1); #lhs0=#v.#attribute;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute +                                            1);   #lhs0 = #v.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute +                                          1);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute + 1);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute + 1);
        Plus                                     : #v.#attribute + 1;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          IntLiteral                               : 1





  CopyAssignment                           : #lhs0 = #v.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== 1436659600 ======================================================
```
{.. #lhs0 = ++#e[#e0]; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = ++#e[#e0]; ... } ...
  CopyAssignment                           : #lhs0 = ++#e[#e0];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PreIncrement                             : ++#e[#e0];
      ArrayReference                           : #e[#e0];
        ProgramSV                                : #e (program Expression)

        ProgramSV                                : #e0 (program Expression)






=== -957497361 ======================================================
```
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0;
                #v[#v0] = (#typeof(#e[#e0]))(#v[#v0]+1); #lhs0=#v[#v0];
                 ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #typeof(#e0) #v0 = #e0;   #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] + 1);   #lhs0 = #v[#v0]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] + 1);
    ArrayReference                           : #v[#v0];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #v0 (program Variable)


    TypeCast                                 : (#typeof(#e[#e0])) (#v[#v0] + 1);
      TypeOf                                   : #typeof( #e[#e0];);
        ArrayReference                           : #e[#e0];
          ProgramSV                                : #e (program Expression)

          ProgramSV                                : #e0 (program Expression)



      ParenthesizedExpression                  : (#v[#v0] + 1);
        Plus                                     : #v[#v0] + 1;
          ArrayReference                           : #v[#v0];
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #v0 (program Variable)


          IntLiteral                               : 1





  CopyAssignment                           : #lhs0 = #v[#v0];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v[#v0];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #v0 (program Variable)





=== -593564468 ======================================================
```
{.. ++#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   ++#lhs1; ... } ...
  PreIncrement                             : ++#lhs1;
    ProgramSV                                : #lhs1 (program LeftHandSide)




=== -694506176 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1+1);
                ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 + 1); ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 + 1);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 + 1);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 + 1);
        Plus                                     : #lhs1 + 1;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          IntLiteral                               : 1







=== -1912515788 ======================================================
```
{.. ++#e.#attribute; ...}
```

ContextStatementBlock                    : ..{ ..   ++#e.#attribute; ... } ...
  PreIncrement                             : ++#e.#attribute;
    SchematicFieldReference                  : #e.#attribute;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)





=== -15779570 ======================================================
```
{.. #typeof(#e) #v=#e; #v.#attribute = (#typeof(#attribute))(#v.#attribute+1);
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute +                                            1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute +                                          1);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute + 1);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute + 1);
        Plus                                     : #v.#attribute + 1;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          IntLiteral                               : 1







=== 1806256215 ======================================================
```
{.. ++#e[#e0]; ...}
```

ContextStatementBlock                    : ..{ ..   ++#e[#e0]; ... } ...
  PreIncrement                             : ++#e[#e0];
    ArrayReference                           : #e[#e0];
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #e0 (program Expression)





=== 934522987 ======================================================
```
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0;
                   #v[#v0]=(#typeof(#e[#e0]))(#v[#v0]+1);
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #typeof(#e0) #v0 = #e0;   #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] + 1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] + 1);
    ArrayReference                           : #v[#v0];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #v0 (program Variable)


    TypeCast                                 : (#typeof(#e[#e0])) (#v[#v0] + 1);
      TypeOf                                   : #typeof( #e[#e0];);
        ArrayReference                           : #e[#e0];
          ProgramSV                                : #e (program Expression)

          ProgramSV                                : #e0 (program Expression)



      ParenthesizedExpression                  : (#v[#v0] + 1);
        Plus                                     : #v[#v0] + 1;
          ArrayReference                           : #v[#v0];
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #v0 (program Variable)


          IntLiteral                               : 1







=== -922205044 ======================================================
```
{.. --#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   --#lhs1; ... } ...
  PreDecrement                             : --#lhs1;
    ProgramSV                                : #lhs1 (program LeftHandSide)




=== -553957566 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1-1);
                ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 - 1); ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 - 1);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 - 1);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 - 1);
        Minus                                    : #lhs1 - 1;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          IntLiteral                               : 1







=== 1987504884 ======================================================
```
{.. --#e.#attribute; ...}
```

ContextStatementBlock                    : ..{ ..   --#e.#attribute; ... } ...
  PreDecrement                             : --#e.#attribute;
    SchematicFieldReference                  : #e.#attribute;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)





=== 124769040 ======================================================
```
{.. #typeof(#e) #v=#e; #v.#attribute = (#typeof(#attribute))(#v.#attribute-1);
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute -                                            1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute -                                          1);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute - 1);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute - 1);
        Minus                                    : #v.#attribute - 1;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          IntLiteral                               : 1







=== -484724713 ======================================================
```
{.. --#e[#e0]; ...}
```

ContextStatementBlock                    : ..{ ..   --#e[#e0]; ... } ...
  PreDecrement                             : --#e[#e0];
    ArrayReference                           : #e[#e0];
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #e0 (program Expression)





=== -528075929 ======================================================
```
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0;
                #v[#v0]=(#typeof(#e[#e0]))(#v[#v0]-1);
                     ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #typeof(#e0) #v0 = #e0;   #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] - 1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] - 1);
    ArrayReference                           : #v[#v0];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #v0 (program Variable)


    TypeCast                                 : (#typeof(#e[#e0])) (#v[#v0] - 1);
      TypeOf                                   : #typeof( #e[#e0];);
        ArrayReference                           : #e[#e0];
          ProgramSV                                : #e (program Expression)

          ProgramSV                                : #e0 (program Expression)



      ParenthesizedExpression                  : (#v[#v0] - 1);
        Minus                                    : #v[#v0] - 1;
          ArrayReference                           : #v[#v0];
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #v0 (program Variable)


          IntLiteral                               : 1







=== 1379083781 ======================================================
```
{.. #lhs0 = --#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = --#lhs1; ... } ...
  CopyAssignment                           : #lhs0 = --#lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PreDecrement                             : --#lhs1;
      ProgramSV                                : #lhs1 (program LeftHandSide)





=== -222013663 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1-1); #lhs0 = #lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 - 1);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 - 1);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 - 1);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 - 1);
        Minus                                    : #lhs1 - 1;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          IntLiteral                               : 1





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== 987600911 ======================================================
```
{.. #lhs = --#e.#attribute; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = --#e.#attribute; ... } ...
  CopyAssignment                           : #lhs = --#e.#attribute;
    ProgramSV                                : #lhs (program LeftHandSide)

    PreDecrement                             : --#e.#attribute;
      SchematicFieldReference                  : #e.#attribute;
        ProgramSV                                : #e (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)






=== -1290165382 ======================================================
```
{.. #typeof(#e) #v=#e; #v.#attribute = (#typeof(#attribute))(#v.#attribute-1); #lhs = #v.#attribute;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute -                                            1);   #lhs = #v.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute -                                          1);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute - 1);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute - 1);
        Minus                                    : #v.#attribute - 1;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          IntLiteral                               : 1





  CopyAssignment                           : #lhs = #v.#attribute;
    ProgramSV                                : #lhs (program LeftHandSide)

    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== -854321328 ======================================================
```
{.. #lhs0 = --#e[#e0]; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = --#e[#e0]; ... } ...
  CopyAssignment                           : #lhs0 = --#e[#e0];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PreDecrement                             : --#e[#e0];
      ArrayReference                           : #e[#e0];
        ProgramSV                                : #e (program Expression)

        ProgramSV                                : #e0 (program Expression)






=== 1777676247 ======================================================
```
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0;
                #v[#v0] = (#typeof(#e[#e0]))(#v[#v0]-1); #lhs0 = #v[#v0];
                 ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #typeof(#e0) #v0 = #e0;   #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] - 1);   #lhs0 = #v[#v0]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] - 1);
    ArrayReference                           : #v[#v0];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #v0 (program Variable)


    TypeCast                                 : (#typeof(#e[#e0])) (#v[#v0] - 1);
      TypeOf                                   : #typeof( #e[#e0];);
        ArrayReference                           : #e[#e0];
          ProgramSV                                : #e (program Expression)

          ProgramSV                                : #e0 (program Expression)



      ParenthesizedExpression                  : (#v[#v0] - 1);
        Minus                                    : #v[#v0] - 1;
          ArrayReference                           : #v[#v0];
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #v0 (program Variable)


          IntLiteral                               : 1





  CopyAssignment                           : #lhs0 = #v[#v0];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v[#v0];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #v0 (program Variable)





=== 1711604165 ======================================================
```
{.. #lhs0 = #lhs1++; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1++; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1++;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PostIncrement                            : #lhs1++;
      ProgramSV                                : #lhs1 (program LeftHandSide)





=== -988690344 ======================================================
```
{.. #typeof(#lhs0) #v = #lhs1; #lhs1 = (#typeof(#lhs1))(#lhs1+1); #lhs0 = #v;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#lhs0) #v = #lhs1;   #lhs1 = (#typeof(#lhs1)) (#lhs1 + 1);   #lhs0 = #v; ... } ...
  LocalVariableDeclaration                 : #typeof(#lhs0) #v = #lhs1;
    TypeOf                                   : #typeof( #lhs0 (program LeftHandSide));
      ProgramSV                                : #lhs0 (program LeftHandSide)


    VariableSpecification                    : #v = #lhs1;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #lhs1 (program LeftHandSide)



  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 + 1);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 + 1);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 + 1);
        Plus                                     : #lhs1 + 1;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          IntLiteral                               : 1





  CopyAssignment                           : #lhs0 = #v;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #v (program Variable)




=== -1413954259 ======================================================
```
{.. #lhs0 = #e.#attribute++; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e.#attribute++; ... } ...
  CopyAssignment                           : #lhs0 = #e.#attribute++;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PostIncrement                            : #e.#attribute++;
      SchematicFieldReference                  : #e.#attribute;
        ProgramSV                                : #e (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)






=== 427060869 ======================================================
```
{.. #typeof(#e) #v=#e; #typeof(#lhs0) #v1=#v.#attribute; #v.#attribute = (#typeof(#attribute))(#v.#attribute+1); #lhs0 = #v1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #typeof(#lhs0) #v1 = #v.#attribute;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute +                                            1);   #lhs0 = #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#lhs0) #v1 = #v.#attribute;
    TypeOf                                   : #typeof( #lhs0 (program LeftHandSide));
      ProgramSV                                : #lhs0 (program LeftHandSide)


    VariableSpecification                    : #v1 = #v.#attribute;
      ProgramSV                                : #v1 (program Variable)

      SchematicFieldReference                  : #v.#attribute;
        ProgramSV                                : #v (program Variable)

        ProgramSV                                : #attribute (program LeftHandSide)




  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute +                                          1);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute + 1);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute + 1);
        Plus                                     : #v.#attribute + 1;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          IntLiteral                               : 1





  CopyAssignment                           : #lhs0 = #v1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #v1 (program Variable)




=== 504079440 ======================================================
```
{.. #lhs0 = #e[#e0]++; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e[#e0]++; ... } ...
  CopyAssignment                           : #lhs0 = #e[#e0]++;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PostIncrement                            : #e[#e0]++;
      ArrayReference                           : #e[#e0];
        ProgramSV                                : #e (program Expression)

        ProgramSV                                : #e0 (program Expression)






=== 1444163690 ======================================================
```
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0;
                #typeof(#lhs0) #v1=#v[#v0]; #v[#v0] = (#typeof(#e[#e0]))(#v[#v0]+1); #lhs0=#v1;
                 ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #typeof(#e0) #v0 = #e0;   #typeof(#lhs0) #v1 = #v[#v0];   #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] + 1);   #lhs0 = #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#lhs0) #v1 = #v[#v0];
    TypeOf                                   : #typeof( #lhs0 (program LeftHandSide));
      ProgramSV                                : #lhs0 (program LeftHandSide)


    VariableSpecification                    : #v1 = #v[#v0];
      ProgramSV                                : #v1 (program Variable)

      ArrayReference                           : #v[#v0];
        ProgramSV                                : #v (program Variable)

        ProgramSV                                : #v0 (program Variable)




  CopyAssignment                           : #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] + 1);
    ArrayReference                           : #v[#v0];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #v0 (program Variable)


    TypeCast                                 : (#typeof(#e[#e0])) (#v[#v0] + 1);
      TypeOf                                   : #typeof( #e[#e0];);
        ArrayReference                           : #e[#e0];
          ProgramSV                                : #e (program Expression)

          ProgramSV                                : #e0 (program Expression)



      ParenthesizedExpression                  : (#v[#v0] + 1);
        Plus                                     : #v[#v0] + 1;
          ArrayReference                           : #v[#v0];
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #v0 (program Variable)


          IntLiteral                               : 1





  CopyAssignment                           : #lhs0 = #v1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #v1 (program Variable)




=== -589684660 ======================================================
```
{.. #lhs1++; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1++; ... } ...
  PostIncrement                            : #lhs1++;
    ProgramSV                                : #lhs1 (program LeftHandSide)




=== -694506176 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1+1);
                ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 + 1); ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 + 1);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 + 1);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 + 1);
        Plus                                     : #lhs1 + 1;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          IntLiteral                               : 1







=== -1297716044 ======================================================
```
{.. #e.#attribute++; ...}
```

ContextStatementBlock                    : ..{ ..   #e.#attribute++; ... } ...
  PostIncrement                            : #e.#attribute++;
    SchematicFieldReference                  : #e.#attribute;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)





=== -15779570 ======================================================
```
{.. #typeof(#e) #v=#e; #v.#attribute = (#typeof(#attribute))(#v.#attribute+1);
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute +                                            1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute +                                          1);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute + 1);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute + 1);
        Plus                                     : #v.#attribute + 1;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          IntLiteral                               : 1







=== 873676055 ======================================================
```
{.. #e[#e0]++; ...}
```

ContextStatementBlock                    : ..{ ..   #e[#e0]++; ... } ...
  PostIncrement                            : #e[#e0]++;
    ArrayReference                           : #e[#e0];
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #e0 (program Expression)





=== 934522987 ======================================================
```
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0;
                   #v[#v0]=(#typeof(#e[#e0]))(#v[#v0]+1);
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #typeof(#e0) #v0 = #e0;   #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] + 1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] + 1);
    ArrayReference                           : #v[#v0];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #v0 (program Variable)


    TypeCast                                 : (#typeof(#e[#e0])) (#v[#v0] + 1);
      TypeOf                                   : #typeof( #e[#e0];);
        ArrayReference                           : #e[#e0];
          ProgramSV                                : #e (program Expression)

          ProgramSV                                : #e0 (program Expression)



      ParenthesizedExpression                  : (#v[#v0] + 1);
        Plus                                     : #v[#v0] + 1;
          ArrayReference                           : #v[#v0];
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #v0 (program Variable)


          IntLiteral                               : 1







=== 375976076 ======================================================
```
{.. #lhs1--; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1--; ... } ...
  PostDecrement                            : #lhs1--;
    ProgramSV                                : #lhs1 (program LeftHandSide)




=== 350691411 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))#lhs1-1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) #lhs1 - 1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) #lhs1 - 1;
    ProgramSV                                : #lhs1 (program LeftHandSide)

    Minus                                    : (#typeof(#lhs1)) #lhs1 - 1;
      TypeCast                                 : (#typeof(#lhs1)) #lhs1;
        TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
          ProgramSV                                : #lhs1 (program LeftHandSide)


        ProgramSV                                : #lhs1 (program LeftHandSide)


      IntLiteral                               : 1





=== -332055308 ======================================================
```
{.. #e.#attribute--; ...}
```

ContextStatementBlock                    : ..{ ..   #e.#attribute--; ... } ...
  PostDecrement                            : #e.#attribute--;
    SchematicFieldReference                  : #e.#attribute;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)





=== 124769040 ======================================================
```
{.. #typeof(#e) #v=#e; #v.#attribute = (#typeof(#attribute))(#v.#attribute-1);
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute -                                            1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute -                                          1);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute - 1);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute - 1);
        Minus                                    : #v.#attribute - 1;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          IntLiteral                               : 1







=== 1839336791 ======================================================
```
{.. #e[#e0]--; ...}
```

ContextStatementBlock                    : ..{ ..   #e[#e0]--; ... } ...
  PostDecrement                            : #e[#e0]--;
    ArrayReference                           : #e[#e0];
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #e0 (program Expression)





=== -528075929 ======================================================
```
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0;
                #v[#v0]=(#typeof(#e[#e0]))(#v[#v0]-1);
                     ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #typeof(#e0) #v0 = #e0;   #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] - 1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] - 1);
    ArrayReference                           : #v[#v0];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #v0 (program Variable)


    TypeCast                                 : (#typeof(#e[#e0])) (#v[#v0] - 1);
      TypeOf                                   : #typeof( #e[#e0];);
        ArrayReference                           : #e[#e0];
          ProgramSV                                : #e (program Expression)

          ProgramSV                                : #e0 (program Expression)



      ParenthesizedExpression                  : (#v[#v0] - 1);
        Minus                                    : #v[#v0] - 1;
          ArrayReference                           : #v[#v0];
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #v0 (program Variable)


          IntLiteral                               : 1







=== -1617702395 ======================================================
```
{.. #lhs0 = #lhs1--; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1--; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1--;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PostDecrement                            : #lhs1--;
      ProgramSV                                : #lhs1 (program LeftHandSide)





=== 1211746928 ======================================================
```
{.. #typeof(#lhs0) #v = #lhs1; #lhs1 = (#typeof(#lhs1))(#lhs1-1); #lhs0 = #v; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#lhs0) #v = #lhs1;   #lhs1 = (#typeof(#lhs1)) (#lhs1 - 1);   #lhs0 = #v; ... } ...
  LocalVariableDeclaration                 : #typeof(#lhs0) #v = #lhs1;
    TypeOf                                   : #typeof( #lhs0 (program LeftHandSide));
      ProgramSV                                : #lhs0 (program LeftHandSide)


    VariableSpecification                    : #v = #lhs1;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #lhs1 (program LeftHandSide)



  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 - 1);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 - 1);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 - 1);
        Minus                                    : #lhs1 - 1;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          IntLiteral                               : 1





  CopyAssignment                           : #lhs0 = #v;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #v (program Variable)




=== -448293523 ======================================================
```
{.. #lhs0 = #e.#attribute--; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e.#attribute--; ... } ...
  CopyAssignment                           : #lhs0 = #e.#attribute--;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PostDecrement                            : #e.#attribute--;
      SchematicFieldReference                  : #e.#attribute;
        ProgramSV                                : #e (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)






=== -602298429 ======================================================
```
{.. #typeof(#e) #v=#e; #typeof(#lhs0) #v1=#v.#attribute; #v.#attribute = (#typeof(#attribute))(#v.#attribute-1); #lhs0 = #v1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #typeof(#lhs0) #v1 = #v.#attribute;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute -                                            1);   #lhs0 = #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#lhs0) #v1 = #v.#attribute;
    TypeOf                                   : #typeof( #lhs0 (program LeftHandSide));
      ProgramSV                                : #lhs0 (program LeftHandSide)


    VariableSpecification                    : #v1 = #v.#attribute;
      ProgramSV                                : #v1 (program Variable)

      SchematicFieldReference                  : #v.#attribute;
        ProgramSV                                : #v (program Variable)

        ProgramSV                                : #attribute (program LeftHandSide)




  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute -                                          1);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute - 1);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute - 1);
        Minus                                    : #v.#attribute - 1;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          IntLiteral                               : 1





  CopyAssignment                           : #lhs0 = #v1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #v1 (program Variable)




=== 1469740176 ======================================================
```
{.. #lhs0 = #e[#e0]--; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e[#e0]--; ... } ...
  CopyAssignment                           : #lhs0 = #e[#e0]--;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PostDecrement                            : #e[#e0]--;
      ArrayReference                           : #e[#e0];
        ProgramSV                                : #e (program Expression)

        ProgramSV                                : #e0 (program Expression)






=== 642563090 ======================================================
```
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0;
                #typeof(#lhs0) #v1=#v[#v0]; #v[#v0] = (#typeof(#e[#e0]))(#v[#v0]-1); #lhs0 = #v1;
                 ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v = #e;   #typeof(#e0) #v0 = #e0;   #typeof(#lhs0) #v1 = #v[#v0];   #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] - 1);   #lhs0 = #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v = #e;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#lhs0) #v1 = #v[#v0];
    TypeOf                                   : #typeof( #lhs0 (program LeftHandSide));
      ProgramSV                                : #lhs0 (program LeftHandSide)


    VariableSpecification                    : #v1 = #v[#v0];
      ProgramSV                                : #v1 (program Variable)

      ArrayReference                           : #v[#v0];
        ProgramSV                                : #v (program Variable)

        ProgramSV                                : #v0 (program Variable)




  CopyAssignment                           : #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] - 1);
    ArrayReference                           : #v[#v0];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #v0 (program Variable)


    TypeCast                                 : (#typeof(#e[#e0])) (#v[#v0] - 1);
      TypeOf                                   : #typeof( #e[#e0];);
        ArrayReference                           : #e[#e0];
          ProgramSV                                : #e (program Expression)

          ProgramSV                                : #e0 (program Expression)



      ParenthesizedExpression                  : (#v[#v0] - 1);
        Minus                                    : #v[#v0] - 1;
          ArrayReference                           : #v[#v0];
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #v0 (program Variable)


          IntLiteral                               : 1





  CopyAssignment                           : #lhs0 = #v1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #v1 (program Variable)




=== 1194299059 ======================================================
```
{.. #lhs = (boolean) #exBool; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (boolean) #exBool; ... } ...
  CopyAssignment                           : #lhs = (boolean) #exBool;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (boolean) #exBool;
      SchemaTypeReference                      : boolean;
        ProgramElementName                       : boolean


      ProgramSV                                : #exBool (program JavaBooleanExpression)





=== -38145814 ======================================================
```
{.. #lhs = #exBool; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #exBool; ... } ...
  CopyAssignment                           : #lhs = #exBool;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #exBool (program JavaBooleanExpression)




=== -1423275302 ======================================================
```
{.. #lhs = (#npit) #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#npit) #nse; ... } ...
  CopyAssignment                           : #lhs = (#npit) #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#npit) #nse;
      ProgramSV                                : #npit (program NonPrimitiveType)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== 76301102 ======================================================
```
{.. #typeof(#nse) #v = #nse;
                #lhs = (#npit) #v;
                     ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = (#npit) #v; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = (#npit) #v;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#npit) #v;
      ProgramSV                                : #npit (program NonPrimitiveType)

      ProgramSV                                : #v (program Variable)





=== -802953378 ======================================================
```
{.. #lhs = (#pit) #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#pit) #nse; ... } ...
  CopyAssignment                           : #lhs = (#pit) #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#pit) #nse;
      ProgramSV                                : #pit (program PrimitiveType)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== 1664735702 ======================================================
```
{.. #typeof(#nse) #v = #nse;
                #lhs = (#pit) #v;
                     ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = (#pit) #v; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = (#pit) #v;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#pit) #v;
      ProgramSV                                : #pit (program PrimitiveType)

      ProgramSV                                : #v (program Variable)





=== 973681056 ======================================================
```
{.. #lhs = (#npit) #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#npit) #se; ... } ...
  CopyAssignment                           : #lhs = (#npit) #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#npit) #se;
      ProgramSV                                : #npit (program NonPrimitiveType)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 973681056 ======================================================
```
{.. #lhs = (#npit) #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#npit) #se; ... } ...
  CopyAssignment                           : #lhs = (#npit) #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#npit) #se;
      ProgramSV                                : #npit (program NonPrimitiveType)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1507521654 ======================================================
```
{.. throw new java.lang.ClassCastException();
                    ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ClassCastException(); ... } ...
  Throw                                    : throw new java.lang.ClassCastException();
    New                                      : new java.lang.ClassCastException();
      SchemaTypeReference                      : java.lang.ClassCastException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ClassCastException






=== 973681056 ======================================================
```
{.. #lhs = (#npit) #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#npit) #se; ... } ...
  CopyAssignment                           : #lhs = (#npit) #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#npit) #se;
      ProgramSV                                : #npit (program NonPrimitiveType)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 973681056 ======================================================
```
{.. #lhs = (#npit) #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#npit) #se; ... } ...
  CopyAssignment                           : #lhs = (#npit) #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#npit) #se;
      ProgramSV                                : #npit (program NonPrimitiveType)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1683005068 ======================================================
```
{.. #se.#mn(#selist); ...}
```

ContextStatementBlock                    : ..{ ..   #se.#mn(#selist); ... } ...
  MethodReference                          : #se.#mn(#selist);
    ProgramSV                                : #se (program SimpleExpression)

    ProgramSV                                : #mn (program MethodName)

    ProgramSV                                : #selist (program SimpleExpression)




=== -394487858 ======================================================
```
{.. #method-call(#se.#mn(#selist)); ...}
```

ContextStatementBlock                    : ..{ ..   method-call(#se.#mn(#selist)) ... } ...
  MethodCall                               : method-call( #se.#mn(#selist););
    MethodReference                          : #se.#mn(#selist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #selist (program SimpleExpression)





=== 2017150027 ======================================================
```
{.. throw new java.lang.NullPointerException();
                    ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.NullPointerException(); ... } ...
  Throw                                    : throw new java.lang.NullPointerException();
    New                                      : new java.lang.NullPointerException();
      SchemaTypeReference                      : java.lang.NullPointerException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : NullPointerException






=== 1683005068 ======================================================
```
{.. #se.#mn(#selist); ...}
```

ContextStatementBlock                    : ..{ ..   #se.#mn(#selist); ... } ...
  MethodReference                          : #se.#mn(#selist);
    ProgramSV                                : #se (program SimpleExpression)

    ProgramSV                                : #mn (program MethodName)

    ProgramSV                                : #selist (program SimpleExpression)




=== -394487858 ======================================================
```
{.. #method-call(#se.#mn(#selist)); ...}
```

ContextStatementBlock                    : ..{ ..   method-call(#se.#mn(#selist)) ... } ...
  MethodCall                               : method-call( #se.#mn(#selist););
    MethodReference                          : #se.#mn(#selist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #selist (program SimpleExpression)





=== 1683005068 ======================================================
```
{.. #se.#mn(#selist); ...}
```

ContextStatementBlock                    : ..{ ..   #se.#mn(#selist); ... } ...
  MethodReference                          : #se.#mn(#selist);
    ProgramSV                                : #se (program SimpleExpression)

    ProgramSV                                : #mn (program MethodName)

    ProgramSV                                : #selist (program SimpleExpression)




=== -394487858 ======================================================
```
{.. #method-call(#se.#mn(#selist)); ...}
```

ContextStatementBlock                    : ..{ ..   method-call(#se.#mn(#selist)) ... } ...
  MethodCall                               : method-call( #se.#mn(#selist););
    MethodReference                          : #se.#mn(#selist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #selist (program SimpleExpression)





=== 750752977 ======================================================
```
{.. #lhs = #se.#mn(#selist); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #se.#mn(#selist); ... } ...
  CopyAssignment                           : #lhs = #se.#mn(#selist);
    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #se.#mn(#selist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #selist (program SimpleExpression)





=== -2093879079 ======================================================
```
{.. #typeof(#lhs) #v0;
                      #method-call(#v0, #se.#mn(#selist));
                    #lhs = #v0;
                            ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#lhs) #v0;   method-call(#se.#mn(#selist))   #lhs = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  MethodCall                               : method-call( #se.#mn(#selist););
    MethodReference                          : #se.#mn(#selist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #selist (program SimpleExpression)



  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== 2017150027 ======================================================
```
{.. throw new java.lang.NullPointerException();
                    ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.NullPointerException(); ... } ...
  Throw                                    : throw new java.lang.NullPointerException();
    New                                      : new java.lang.NullPointerException();
      SchemaTypeReference                      : java.lang.NullPointerException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : NullPointerException






=== 750752977 ======================================================
```
{.. #lhs = #se.#mn(#selist); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #se.#mn(#selist); ... } ...
  CopyAssignment                           : #lhs = #se.#mn(#selist);
    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #se.#mn(#selist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #selist (program SimpleExpression)





=== -2093879079 ======================================================
```
{.. #typeof(#lhs) #v0;
                      #method-call(#v0, #se.#mn(#selist));
                    #lhs = #v0;
                            ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#lhs) #v0;   method-call(#se.#mn(#selist))   #lhs = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  MethodCall                               : method-call( #se.#mn(#selist););
    MethodReference                          : #se.#mn(#selist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #selist (program SimpleExpression)



  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== 750752977 ======================================================
```
{.. #lhs = #se.#mn(#selist); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #se.#mn(#selist); ... } ...
  CopyAssignment                           : #lhs = #se.#mn(#selist);
    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #se.#mn(#selist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #selist (program SimpleExpression)





=== 584656985 ======================================================
```
{.. #typeof(#lhs) #v0;
                  #method-call(#v0, #se.#mn(#selist));
                #lhs = #v0;
                        ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#lhs) #v0;   method-call(#se.#mn(#selist))   #lhs = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  MethodCall                               : method-call( #se.#mn(#selist););
    MethodReference                          : #se.#mn(#selist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #selist (program SimpleExpression)



  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== 1872668935 ======================================================
```
{.. #nsmr ...}
```

ContextStatementBlock                    : ..{ ..   #nsmr ... } ...
  ProgramSV                                : #nsmr (program NonSimpleMethodReference)



=== 1838056024 ======================================================
```
{.. #evaluate-arguments(#nsmr); ...}
```

ContextStatementBlock                    : ..{ ..   #evaluate-arguments(#nsmr) ... } ...
  EvaluateArgs                             : #evaluate-arguments( #nsmr (program NonSimpleMethodReference));
    ProgramSV                                : #nsmr (program NonSimpleMethodReference)




=== -1312608403 ======================================================
```
{.. #nse.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #nse.#mn(#elist); ... } ...
  MethodReference                          : #nse.#mn(#elist);
    ProgramSV                                : #nse (program NonSimpleExpression)

    ProgramSV                                : #mn (program MethodName)

    ProgramSV                                : #elist (program Expression)




=== -905855007 ======================================================
```
{.. #typeof(#nse) #v0;
                #v0 = #nse; #v0.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v0;   #v0 = #nse;   #v0.#mn(#elist); ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v0;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  CopyAssignment                           : #v0 = #nse;
    ProgramSV                                : #v0 (program Variable)

    ProgramSV                                : #nse (program NonSimpleExpression)


  MethodReference                          : #v0.#mn(#elist);
    ProgramSV                                : #v0 (program Variable)

    ProgramSV                                : #mn (program MethodName)

    ProgramSV                                : #elist (program Expression)




=== 293342441 ======================================================
```
{.#ex.. super.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   super.#mn(#elist); ... } ...
  ProgramSV                                : #ex (program ExecutionContext)

  MethodReference                          : super.#mn(#elist);
    SuperReference                           : super;

    ProgramSV                                : #mn (program MethodName)

    ProgramSV                                : #elist (program Expression)




=== 309888259 ======================================================
```
{.. #method-call(#ex, super.#mn(#elist));
                ...}
```

ContextStatementBlock                    : ..{ ..   method-call(super.#mn(#elist)) ... } ...
  MethodCall                               : method-call( super.#mn(#elist););
    MethodReference                          : super.#mn(#elist);
      SuperReference                           : super;

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 1269543258 ======================================================
```
{.#ex.. #lhs=super.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = super.#mn(#elist); ... } ...
  ProgramSV                                : #ex (program ExecutionContext)

  CopyAssignment                           : #lhs = super.#mn(#elist);
    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : super.#mn(#elist);
      SuperReference                           : super;

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== -653447498 ======================================================
```
{.. #typeof(#lhs) #v0;
                   #method-call(#ex, #v0, super.#mn(#elist));
                   #lhs = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#lhs) #v0;   method-call(super.#mn(#elist))   #lhs = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  MethodCall                               : method-call( super.#mn(#elist););
    MethodReference                          : super.#mn(#elist);
      SuperReference                           : super;

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== 1194344791 ======================================================
```
{.. #lhs = #nsmr; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nsmr; ... } ...
  CopyAssignment                           : #lhs = #nsmr;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #nsmr (program NonSimpleMethodReference)




=== -256569609 ======================================================
```
{.. #evaluate-arguments(#lhs = #nsmr); ...}
```

ContextStatementBlock                    : ..{ ..   #evaluate-arguments(#lhs = #nsmr) ... } ...
  EvaluateArgs                             : #evaluate-arguments( #lhs = #nsmr;);
    CopyAssignment                           : #lhs = #nsmr;
      ProgramSV                                : #lhs (program LeftHandSide)

      ProgramSV                                : #nsmr (program NonSimpleMethodReference)





=== 2050106802 ======================================================
```
{.. #lhs = #nse.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse.#mn(#elist); ... } ...
  CopyAssignment                           : #lhs = #nse.#mn(#elist);
    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #nse.#mn(#elist);
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== -110298304 ======================================================
```
{.. #typeof(#nse) #v0;
                #v0 = #nse; #lhs = #v0.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v0;   #v0 = #nse;   #lhs = #v0.#mn(#elist); ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v0;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  CopyAssignment                           : #v0 = #nse;
    ProgramSV                                : #v0 (program Variable)

    ProgramSV                                : #nse (program NonSimpleExpression)


  CopyAssignment                           : #lhs = #v0.#mn(#elist);
    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #v0.#mn(#elist);
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 289173368 ======================================================
```
{.. method-frame(#ex){} ...}
```

ContextStatementBlock                    : ..{ ..   method-frame (#ex) {} ... } ...
  MethodFrame                              : method-frame (#ex) {}
    ProgramSV                                : #ex (program ExecutionContext)

    StatementBlock                           : {}




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -499777349 ======================================================
```
{.. method-frame(#ex){return; #slist} ...}
```

ContextStatementBlock                    : ..{ ..   method-frame (#ex) {     return;     #slist   } ... } ...
  MethodFrame                              : method-frame (#ex) {   return;   #slist }
    ProgramSV                                : #ex (program ExecutionContext)

    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 185341475 ======================================================
```
{.. method-frame(#v0, #ex){return #se; #slist} ...}
```

ContextStatementBlock                    : ..{ ..   method-frame (result->#v0, #ex) {     return #se;     #slist   } ... } ...
  MethodFrame                              : method-frame (result->#v0, #ex) {   return #se;   #slist }
    ProgramSV                                : #v0 (program Variable)

    ProgramSV                                : #ex (program ExecutionContext)

    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)





=== 1503383084 ======================================================
```
{.. method-frame(#ex){ #v0 = #se; } ...}
```

ContextStatementBlock                    : ..{ ..   method-frame (#ex) {     #v0 = #se;   } ... } ...
  MethodFrame                              : method-frame (#ex) {   #v0 = #se; }
    ProgramSV                                : #ex (program ExecutionContext)

    StatementBlock                           : {   #v0 = #se; }
      CopyAssignment                           : #v0 = #se;
        ProgramSV                                : #v0 (program Variable)

        ProgramSV                                : #se (program SimpleExpression)






=== 2005334672 ======================================================
```
{.. method-frame(#ex){return #se; #slist} ...}
```

ContextStatementBlock                    : ..{ ..   method-frame (#ex) {     return #se;     #slist   } ... } ...
  MethodFrame                              : method-frame (#ex) {   return #se;   #slist }
    ProgramSV                                : #ex (program ExecutionContext)

    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1142332668 ======================================================
```
{.. #mb ...}
```

ContextStatementBlock                    : ..{ ..   #mb ... } ...
  ProgramSV                                : #mb (program NonModelMethodBody)



=== 498321652 ======================================================
```
{.. #expand-method-body(#mb); ...}
```

ContextStatementBlock                    : ..{ ..   expand-method-body(#mb) ... } ...
  ExpandMethodBody                         : expand-method-body( #mb (program NonModelMethodBody));
    ProgramSV                                : #mb (program NonModelMethodBody)




=== 1863363435 ======================================================
```
{.. {return; #slist} ...}
```

ContextStatementBlock                    : ..{ ..   {     return;     #slist   } ... } ...
  StatementBlock                           : {   return;   #slist }
    Return                                   : return;

    ProgramSV                                : #slist (program Statement)




=== 442017973 ======================================================
```
{.. return;  ...}
```

ContextStatementBlock                    : ..{ ..   return; ... } ...
  Return                                   : return;



=== 1823264064 ======================================================
```
{.. {return #se; #slist} ...}
```

ContextStatementBlock                    : ..{ ..   {     return #se;     #slist   } ... } ...
  StatementBlock                           : {   return #se;   #slist }
    Return                                   : return #se;
      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #slist (program Statement)




=== -1764910080 ======================================================
```
{.. return #se;  ...}
```

ContextStatementBlock                    : ..{ ..   return #se; ... } ...
  Return                                   : return #se;
    ProgramSV                                : #se (program SimpleExpression)




=== 572769395 ======================================================
```
{.. #lb: return #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lb:   return #se; ... } ...
  LabeledStatement                         : #lb: return #se;
    ProgramSV                                : #lb (program Label)

    Return                                   : return #se;
      ProgramSV                                : #se (program SimpleExpression)





=== -1764910080 ======================================================
```
{.. return #se;  ...}
```

ContextStatementBlock                    : ..{ ..   return #se; ... } ...
  Return                                   : return #se;
    ProgramSV                                : #se (program SimpleExpression)




=== 1996957595 ======================================================
```
{.. #lb: { return #se; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   #lb:   {     return #se;     #slist   } ... } ...
  LabeledStatement                         : #lb: {   return #se;   #slist }
    ProgramSV                                : #lb (program Label)

    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)





=== -1764910080 ======================================================
```
{.. return #se;  ...}
```

ContextStatementBlock                    : ..{ ..   return #se; ... } ...
  Return                                   : return #se;
    ProgramSV                                : #se (program SimpleExpression)




=== 157392186 ======================================================
```
{.. method-frame(#ex){throw #se; #slist} ...}
```

ContextStatementBlock                    : ..{ ..   method-frame (#ex) {     throw #se;     #slist   } ... } ...
  MethodFrame                              : method-frame (#ex) {   throw #se;   #slist }
    ProgramSV                                : #ex (program ExecutionContext)

    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)





=== -837399766 ======================================================
```
{.. throw #se; ...}
```

ContextStatementBlock                    : ..{ ..   throw #se; ... } ...
  Throw                                    : throw #se;
    ProgramSV                                : #se (program SimpleExpression)




=== -1196271055 ======================================================
```
{.. method-frame(#v0, #ex){throw #se; #slist}
                ...}
```

ContextStatementBlock                    : ..{ ..   method-frame (result->#v0, #ex) {     throw #se;     #slist   } ... } ...
  MethodFrame                              : method-frame (result->#v0, #ex) {   throw #se;   #slist }
    ProgramSV                                : #v0 (program Variable)

    ProgramSV                                : #ex (program ExecutionContext)

    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)





=== -837399766 ======================================================
```
{.. throw #se; ...}
```

ContextStatementBlock                    : ..{ ..   throw #se; ... } ...
  Throw                                    : throw #se;
    ProgramSV                                : #se (program SimpleExpression)




=== -837399766 ======================================================
```
{.. throw #se; ...}
```

ContextStatementBlock                    : ..{ ..   throw #se; ... } ...
  Throw                                    : throw #se;
    ProgramSV                                : #se (program SimpleExpression)




=== 155785430 ======================================================
```
{.. #typeof(#se) #v0 = #se; throw #v0; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#se) #v0 = #se;   throw #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#se) #v0 = #se;
    TypeOf                                   : #typeof( #se (program SimpleExpression));
      ProgramSV                                : #se (program SimpleExpression)


    VariableSpecification                    : #v0 = #se;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)



  Throw                                    : throw #v0;
    ProgramSV                                : #v0 (program Variable)




=== 304240599 ======================================================
```
{.. {throw #e; #slist} ...}
```

ContextStatementBlock                    : ..{ ..   {     throw #e;     #slist   } ... } ...
  StatementBlock                           : {   throw #e;   #slist }
    Throw                                    : throw #e;
      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #slist (program Statement)




=== 1139623305 ======================================================
```
{.. throw #e;  ...}
```

ContextStatementBlock                    : ..{ ..   throw #e; ... } ...
  Throw                                    : throw #e;
    ProgramSV                                : #e (program Expression)




=== 1248483787 ======================================================
```
{.. method-frame(#v0, #ex){} ...}
```

ContextStatementBlock                    : ..{ ..   method-frame (result->#v0, #ex) {} ... } ...
  MethodFrame                              : method-frame (result->#v0, #ex) {}
    ProgramSV                                : #v0 (program Variable)

    ProgramSV                                : #ex (program ExecutionContext)

    StatementBlock                           : {}




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1217498487 ======================================================
```
{.. if(#nse) #s0 ...}
```

ContextStatementBlock                    : ..{ ..   if (#nse) #s0 ... } ...
  If                                       : if (#nse) #s0
    ProgramSV                                : #nse (program NonSimpleExpression)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)





=== -2058565751 ======================================================
```
{.. boolean #boolv; #boolv = #nse; if(#boolv) #s0 ...}
```

ContextStatementBlock                    : ..{ ..   boolean #boolv;   #boolv = #nse;   if (#boolv) #s0 ... } ...
  LocalVariableDeclaration                 : boolean #boolv;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #boolv;
      ProgramSV                                : #boolv (program Variable)



  CopyAssignment                           : #boolv = #nse;
    ProgramSV                                : #boolv (program Variable)

    ProgramSV                                : #nse (program NonSimpleExpression)


  If                                       : if (#boolv) #s0
    ProgramSV                                : #boolv (program Variable)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)





=== 1596391579 ======================================================
```
{.. if(#nse) #s0 else #s1 ...}
```

ContextStatementBlock                    : ..{ ..   if (#nse) #s0   else #s1 ... } ...
  If                                       : if (#nse) #s0 else #s1
    ProgramSV                                : #nse (program NonSimpleExpression)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)


    Else                                     : else #s1
      ProgramSV                                : #s1 (program Statement)





=== 1779043413 ======================================================
```
{.. boolean #boolv; #boolv = #nse; if(#boolv) #s0 else{#s1}
                ...}
```

ContextStatementBlock                    : ..{ ..   boolean #boolv;   #boolv = #nse;   if (#boolv) #s0   else {     #s1   } ... } ...
  LocalVariableDeclaration                 : boolean #boolv;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #boolv;
      ProgramSV                                : #boolv (program Variable)



  CopyAssignment                           : #boolv = #nse;
    ProgramSV                                : #boolv (program Variable)

    ProgramSV                                : #nse (program NonSimpleExpression)


  If                                       : if (#boolv) #s0 else {   #s1 }
    ProgramSV                                : #boolv (program Variable)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)


    Else                                     : else {   #s1 }
      StatementBlock                           : {   #s1 }
        ProgramSV                                : #s1 (program Statement)






=== -1212944567 ======================================================
```
{.. if(#se) #s0  ...}
```

ContextStatementBlock                    : ..{ ..   if (#se) #s0 ... } ...
  If                                       : if (#se) #s0
    ProgramSV                                : #se (program SimpleExpression)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)





=== 740929908 ======================================================
```
{.. #s0 ...}
```

ContextStatementBlock                    : ..{ ..   #s0 ... } ...
  ProgramSV                                : #s0 (program Statement)



=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1284878481 ======================================================
```
{.. if(#se) #s0 else #s1 ...}
```

ContextStatementBlock                    : ..{ ..   if (#se) #s0   else #s1 ... } ...
  If                                       : if (#se) #s0 else #s1
    ProgramSV                                : #se (program SimpleExpression)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)


    Else                                     : else #s1
      ProgramSV                                : #s1 (program Statement)





=== 740929908 ======================================================
```
{.. #s0 ...}
```

ContextStatementBlock                    : ..{ ..   #s0 ... } ...
  ProgramSV                                : #s0 (program Statement)



=== 769559059 ======================================================
```
{.. #s1 ...}
```

ContextStatementBlock                    : ..{ ..   #s1 ... } ...
  ProgramSV                                : #s1 (program Statement)



=== -1284878481 ======================================================
```
{.. if(#se) #s0 else #s1 ...}
```

ContextStatementBlock                    : ..{ ..   if (#se) #s0   else #s1 ... } ...
  If                                       : if (#se) #s0 else #s1
    ProgramSV                                : #se (program SimpleExpression)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)


    Else                                     : else #s1
      ProgramSV                                : #s1 (program Statement)





=== 740929908 ======================================================
```
{.. #s0 ...}
```

ContextStatementBlock                    : ..{ ..   #s0 ... } ...
  ProgramSV                                : #s0 (program Statement)



=== 769559059 ======================================================
```
{.. #s1 ...}
```

ContextStatementBlock                    : ..{ ..   #s1 ... } ...
  ProgramSV                                : #s1 (program Statement)



=== -1212944567 ======================================================
```
{.. if(#se) #s0  ...}
```

ContextStatementBlock                    : ..{ ..   if (#se) #s0 ... } ...
  If                                       : if (#se) #s0
    ProgramSV                                : #se (program SimpleExpression)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)





=== 740929908 ======================================================
```
{.. #s0 ...}
```

ContextStatementBlock                    : ..{ ..   #s0 ... } ...
  ProgramSV                                : #s0 (program Statement)



=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1284878481 ======================================================
```
{.. if(#se) #s0 else #s1 ...}
```

ContextStatementBlock                    : ..{ ..   if (#se) #s0   else #s1 ... } ...
  If                                       : if (#se) #s0 else #s1
    ProgramSV                                : #se (program SimpleExpression)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)


    Else                                     : else #s1
      ProgramSV                                : #s1 (program Statement)





=== 740929908 ======================================================
```
{.. #s0 ...}
```

ContextStatementBlock                    : ..{ ..   #s0 ... } ...
  ProgramSV                                : #s0 (program Statement)



=== 769559059 ======================================================
```
{.. #s1 ...}
```

ContextStatementBlock                    : ..{ ..   #s1 ... } ...
  ProgramSV                                : #s1 (program Statement)



=== -1212944567 ======================================================
```
{.. if(#se) #s0  ...}
```

ContextStatementBlock                    : ..{ ..   if (#se) #s0 ... } ...
  If                                       : if (#se) #s0
    ProgramSV                                : #se (program SimpleExpression)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)





=== 740929908 ======================================================
```
{.. #s0 ...}
```

ContextStatementBlock                    : ..{ ..   #s0 ... } ...
  ProgramSV                                : #s0 (program Statement)



=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1904552145 ======================================================
```
{.. if (#se) #s0 ...}
```

ContextStatementBlock                    : ..{ ..   if (#se) #s0 ... } ...
  If                                       : if (#se) #s0
    ProgramSV                                : #se (program SimpleExpression)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)





=== 740929908 ======================================================
```
{.. #s0 ...}
```

ContextStatementBlock                    : ..{ ..   #s0 ... } ...
  ProgramSV                                : #s0 (program Statement)



=== -1998267565 ======================================================
```
{.. if (#se) #s0 else #s1 ...}
```

ContextStatementBlock                    : ..{ ..   if (#se) #s0   else #s1 ... } ...
  If                                       : if (#se) #s0 else #s1
    ProgramSV                                : #se (program SimpleExpression)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)


    Else                                     : else #s1
      ProgramSV                                : #s1 (program Statement)





=== 740929908 ======================================================
```
{.. #s0 ...}
```

ContextStatementBlock                    : ..{ ..   #s0 ... } ...
  ProgramSV                                : #s0 (program Statement)



=== 1904552145 ======================================================
```
{.. if (#se) #s0 ...}
```

ContextStatementBlock                    : ..{ ..   if (#se) #s0 ... } ...
  If                                       : if (#se) #s0
    ProgramSV                                : #se (program SimpleExpression)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1998267565 ======================================================
```
{.. if (#se) #s0 else #s1 ...}
```

ContextStatementBlock                    : ..{ ..   if (#se) #s0   else #s1 ... } ...
  If                                       : if (#se) #s0 else #s1
    ProgramSV                                : #se (program SimpleExpression)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)


    Else                                     : else #s1
      ProgramSV                                : #s1 (program Statement)





=== 769559059 ======================================================
```
{.. #s1 ...}
```

ContextStatementBlock                    : ..{ ..   #s1 ... } ...
  ProgramSV                                : #s1 (program Statement)



=== 969388534 ======================================================
```
{.. #loc=true; if (#loc) #s0 ...}
```

ContextStatementBlock                    : ..{ ..   #loc = true;   if (#loc) #s0 ... } ...
  CopyAssignment                           : #loc = true;
    ProgramSV                                : #loc (program Variable)

    BooleanLiteral                           : true;


  If                                       : if (#loc) #s0
    ProgramSV                                : #loc (program Variable)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)





=== -1518899139 ======================================================
```
{.. #loc=true; #s0 ...}
```

ContextStatementBlock                    : ..{ ..   #loc = true;   #s0 ... } ...
  CopyAssignment                           : #loc = true;
    ProgramSV                                : #loc (program Variable)

    BooleanLiteral                           : true;


  ProgramSV                                : #s0 (program Statement)



=== -318227211 ======================================================
```
{.. #loc=false; if (#loc) #s0 ...}
```

ContextStatementBlock                    : ..{ ..   #loc = false;   if (#loc) #s0 ... } ...
  CopyAssignment                           : #loc = false;
    ProgramSV                                : #loc (program Variable)

    BooleanLiteral                           : false;


  If                                       : if (#loc) #s0
    ProgramSV                                : #loc (program Variable)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)





=== -959226404 ======================================================
```
{.. #loc=false; ...}
```

ContextStatementBlock                    : ..{ ..   #loc = false; ... } ...
  CopyAssignment                           : #loc = false;
    ProgramSV                                : #loc (program Variable)

    BooleanLiteral                           : false;




=== -2029401138 ======================================================
```
{.. #loc=true; if (#loc) #s0 else #s1 ...}
```

ContextStatementBlock                    : ..{ ..   #loc = true;   if (#loc) #s0   else #s1 ... } ...
  CopyAssignment                           : #loc = true;
    ProgramSV                                : #loc (program Variable)

    BooleanLiteral                           : true;


  If                                       : if (#loc) #s0 else #s1
    ProgramSV                                : #loc (program Variable)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)


    Else                                     : else #s1
      ProgramSV                                : #s1 (program Statement)





=== -1518899139 ======================================================
```
{.. #loc=true; #s0 ...}
```

ContextStatementBlock                    : ..{ ..   #loc = true;   #s0 ... } ...
  CopyAssignment                           : #loc = true;
    ProgramSV                                : #loc (program Variable)

    BooleanLiteral                           : true;


  ProgramSV                                : #s0 (program Statement)



=== 1743531951 ======================================================
```
{.. #loc=false; if (#loc) #s0 else #s1 ...}
```

ContextStatementBlock                    : ..{ ..   #loc = false;   if (#loc) #s0   else #s1 ... } ...
  CopyAssignment                           : #loc = false;
    ProgramSV                                : #loc (program Variable)

    BooleanLiteral                           : false;


  If                                       : if (#loc) #s0 else #s1
    ProgramSV                                : #loc (program Variable)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)


    Else                                     : else #s1
      ProgramSV                                : #s1 (program Statement)





=== 460306075 ======================================================
```
{.. #loc=false; #s1 ...}
```

ContextStatementBlock                    : ..{ ..   #loc = false;   #s1 ... } ...
  CopyAssignment                           : #loc = false;
    ProgramSV                                : #loc (program Variable)

    BooleanLiteral                           : false;


  ProgramSV                                : #s1 (program Statement)



=== -1342725996 ======================================================
```
{.. { #loc=true; } if (#loc) #s0 ...}
```

ContextStatementBlock                    : ..{ ..   {     #loc = true;   }   if (#loc) #s0 ... } ...
  StatementBlock                           : {   #loc = true; }
    CopyAssignment                           : #loc = true;
      ProgramSV                                : #loc (program Variable)

      BooleanLiteral                           : true;



  If                                       : if (#loc) #s0
    ProgramSV                                : #loc (program Variable)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)





=== 2099604571 ======================================================
```
{.. { #loc=true; } #s0 ...}
```

ContextStatementBlock                    : ..{ ..   {     #loc = true;   }   #s0 ... } ...
  StatementBlock                           : {   #loc = true; }
    CopyAssignment                           : #loc = true;
      ProgramSV                                : #loc (program Variable)

      BooleanLiteral                           : true;



  ProgramSV                                : #s0 (program Statement)



=== -1009364995 ======================================================
```
{.. { #loc=false; } if (#loc) #s0 ...}
```

ContextStatementBlock                    : ..{ ..   {     #loc = false;   }   if (#loc) #s0 ... } ...
  StatementBlock                           : {   #loc = false; }
    CopyAssignment                           : #loc = false;
      ProgramSV                                : #loc (program Variable)

      BooleanLiteral                           : false;



  If                                       : if (#loc) #s0
    ProgramSV                                : #loc (program Variable)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)





=== -734273820 ======================================================
```
{.. { #loc=false; } ...}
```

ContextStatementBlock                    : ..{ ..   {     #loc = false;   } ... } ...
  StatementBlock                           : {   #loc = false; }
    CopyAssignment                           : #loc = false;
      ProgramSV                                : #loc (program Variable)

      BooleanLiteral                           : false;





=== -1947825022 ======================================================
```
{.. { #loc=true;} if (#loc) #s0 else #s1 ...}
```

ContextStatementBlock                    : ..{ ..   {     #loc = true;   }   if (#loc) #s0   else #s1 ... } ...
  StatementBlock                           : {   #loc = true; }
    CopyAssignment                           : #loc = true;
      ProgramSV                                : #loc (program Variable)

      BooleanLiteral                           : true;



  If                                       : if (#loc) #s0 else #s1
    ProgramSV                                : #loc (program Variable)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)


    Else                                     : else #s1
      ProgramSV                                : #s1 (program Statement)





=== -957963255 ======================================================
```
{.. { #loc=true;} #s0 ...}
```

ContextStatementBlock                    : ..{ ..   {     #loc = true;   }   #s0 ... } ...
  StatementBlock                           : {   #loc = true; }
    CopyAssignment                           : #loc = true;
      ProgramSV                                : #loc (program Variable)

      BooleanLiteral                           : true;



  ProgramSV                                : #s0 (program Statement)



=== 1854866855 ======================================================
```
{.. { #loc=false; } if (#loc) #s0 else #s1 ...}
```

ContextStatementBlock                    : ..{ ..   {     #loc = false;   }   if (#loc) #s0   else #s1 ... } ...
  StatementBlock                           : {   #loc = false; }
    CopyAssignment                           : #loc = false;
      ProgramSV                                : #loc (program Variable)

      BooleanLiteral                           : false;



  If                                       : if (#loc) #s0 else #s1
    ProgramSV                                : #loc (program Variable)

    Then                                     :  #s0
      ProgramSV                                : #s0 (program Statement)


    Else                                     : else #s1
      ProgramSV                                : #s1 (program Statement)





=== 1327526819 ======================================================
```
{.. { #loc=false; } #s1 ...}
```

ContextStatementBlock                    : ..{ ..   {     #loc = false;   }   #s1 ... } ...
  StatementBlock                           : {   #loc = false; }
    CopyAssignment                           : #loc = false;
      ProgramSV                                : #loc (program Variable)

      BooleanLiteral                           : false;



  ProgramSV                                : #s1 (program Statement)



=== -1521367667 ======================================================
```
{.. #sw ...}
```

ContextStatementBlock                    : ..{ ..   #sw ... } ...
  ProgramSV                                : #sw (program Switch)



=== 954597209 ======================================================
```
{.. #switch-to-if(#sw) ...}
```

ContextStatementBlock                    : ..{ ..   switch-to-if(#sw) ... } ...
  SwitchToIf                               : switch-to-if( #sw (program Switch));
    ProgramSV                                : #sw (program Switch)




=== -328402737 ======================================================
```
{.. #lb0: break #lb1;  ...}
```

ContextStatementBlock                    : ..{ ..   #lb0:   break; ... } ...
  LabeledStatement                         : #lb0: break;
    ProgramSV                                : #lb0 (program Label)

    Break                                    : break;
      ProgramSV                                : #lb1 (program Label)





=== -461267835 ======================================================
```
{.. #do-break(#lb0: break #lb1;); ...}
```

ContextStatementBlock                    : ..{ ..   do-break(#lb0:   break;) ... } ...
  DoBreak                                  : do-break( #lb0: break;);
    LabeledStatement                         : #lb0: break;
      ProgramSV                                : #lb0 (program Label)

      Break                                    : break;
        ProgramSV                                : #lb1 (program Label)






=== 359826728 ======================================================
```
{.. { break #lb1; #slist} ...}
```

ContextStatementBlock                    : ..{ ..   {     break;     #slist   } ... } ...
  StatementBlock                           : {   break;   #slist }
    Break                                    : break;
      ProgramSV                                : #lb1 (program Label)


    ProgramSV                                : #slist (program Statement)




=== -1844513582 ======================================================
```
{.. break #lb1; ...}
```

ContextStatementBlock                    : ..{ ..   break; ... } ...
  Break                                    : break;
    ProgramSV                                : #lb1 (program Label)




=== -1552335635 ======================================================
```
{.. #lb0: {break #lb1; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   #lb0:   {     break;     #slist   } ... } ...
  LabeledStatement                         : #lb0: {   break;   #slist }
    ProgramSV                                : #lb0 (program Label)

    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb1 (program Label)


      ProgramSV                                : #slist (program Statement)





=== -461267835 ======================================================
```
{.. #do-break(#lb0: break #lb1;); ...}
```

ContextStatementBlock                    : ..{ ..   do-break(#lb0:   break;) ... } ...
  DoBreak                                  : do-break( #lb0: break;);
    LabeledStatement                         : #lb0: break;
      ProgramSV                                : #lb0 (program Label)

      Break                                    : break;
        ProgramSV                                : #lb1 (program Label)






=== -1958626553 ======================================================
```
{.. #lb:{} ...}
```

ContextStatementBlock                    : ..{ ..   #lb:   {} ... } ...
  LabeledStatement                         : #lb: {}
    ProgramSV                                : #lb (program Label)

    StatementBlock                           : {}




=== -683547466 ======================================================
```
{.. {}  ...}
```

ContextStatementBlock                    : ..{ ..   {} ... } ...
  StatementBlock                           : {}



=== 1363840552 ======================================================
```
{.. {} ...}
```

ContextStatementBlock                    : ..{ ..   {} ... } ...
  StatementBlock                           : {}



=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -472463579 ======================================================
```
{.. #lb: #s ...}
```

ContextStatementBlock                    : ..{ ..   #lb:   #s ... } ...
  LabeledStatement                         : #lb: #s
    ProgramSV                                : #lb (program Label)

    ProgramSV                                : #s (program Statement)




=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== -1319551783 ======================================================
```
{.. ; ...}
```

ContextStatementBlock                    : ..{ ..   ; ... } ...
  EmptyStatement                           : ;



=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 983014375 ======================================================
```
{.. synchronized(#nsencr){ #slist } ...}
```

ContextStatementBlock                    : ..{ ..   synchronized(#nsencr) {     #slist   } ... } ...
  SynchronizedBlock                        : synchronized(#nsencr) {   #slist }
    ProgramSV                                : #nsencr (program NonSimpleExpressionNoClassReference)

    StatementBlock                           : {   #slist }
      ProgramSV                                : #slist (program Statement)





=== -1704909436 ======================================================
```
{.. #typeof(#nsencr) #loc=#nsencr; synchronized(#loc){ #slist } ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nsencr) #loc = #nsencr;   synchronized(#loc) {     #slist   } ... } ...
  LocalVariableDeclaration                 : #typeof(#nsencr) #loc = #nsencr;
    TypeOf                                   : #typeof( #nsencr (program NonSimpleExpressionNoClassReference));
      ProgramSV                                : #nsencr (program NonSimpleExpressionNoClassReference)


    VariableSpecification                    : #loc = #nsencr;
      ProgramSV                                : #loc (program Variable)

      ProgramSV                                : #nsencr (program NonSimpleExpressionNoClassReference)



  SynchronizedBlock                        : synchronized(#loc) {   #slist }
    ProgramSV                                : #loc (program Variable)

    StatementBlock                           : {   #slist }
      ProgramSV                                : #slist (program Statement)





=== -1314815702 ======================================================
```
{.. synchronized(#se){} ...}
```

ContextStatementBlock                    : ..{ ..   synchronized(#se) {} ... } ...
  SynchronizedBlock                        : synchronized(#se) {}
    ProgramSV                                : #se (program SimpleExpression)

    StatementBlock                           : {}




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1314815702 ======================================================
```
{.. synchronized(#se){} ...}
```

ContextStatementBlock                    : ..{ ..   synchronized(#se) {} ... } ...
  SynchronizedBlock                        : synchronized(#se) {}
    ProgramSV                                : #se (program SimpleExpression)

    StatementBlock                           : {}




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1314815702 ======================================================
```
{.. synchronized(#se){} ...}
```

ContextStatementBlock                    : ..{ ..   synchronized(#se) {} ... } ...
  SynchronizedBlock                        : synchronized(#se) {}
    ProgramSV                                : #se (program SimpleExpression)

    StatementBlock                           : {}




=== 1067035403 ======================================================
```

                {.. if(#se==null){throw new java.lang.NullPointerException();}  ...}
```

ContextStatementBlock                    : ..{ ..   if (#se == null) {     throw new java.lang.NullPointerException();   } ... } ...
  If                                       : if (#se == null) {   throw new java.lang.NullPointerException(); }
    Equals                                   : #se == null;
      ProgramSV                                : #se (program SimpleExpression)

      NullLiteral                              : null;


    Then                                     :  {   throw new java.lang.NullPointerException(); }
      StatementBlock                           : {   throw new java.lang.NullPointerException(); }
        Throw                                    : throw new java.lang.NullPointerException();
          New                                      : new java.lang.NullPointerException();
            SchemaTypeReference                      : java.lang.NullPointerException;
              PackageReference                         : java.lang
                PackageReference                         : java
                  ProgramElementName                       : java


                ProgramElementName                       : lang


              ProgramElementName                       : NullPointerException









=== -192671161 ======================================================
```
{.. synchronized(#cr){} ...}
```

ContextStatementBlock                    : ..{ ..   synchronized(#cr) {} ... } ...
  SynchronizedBlock                        : synchronized(#cr) {}
    ProgramSV                                : #cr (program ClassReference)

    StatementBlock                           : {}




=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -521511743 ======================================================
```
{.. #v = #nse instanceof #t; ...}
```

ContextStatementBlock                    : ..{ ..   #v = #nse instanceof #t; ... } ...
  CopyAssignment                           : #v = #nse instanceof #t;
    ProgramSV                                : #v (program Variable)

    Instanceof                               : #nse instanceof #t;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #t (program Type)





=== -1719248893 ======================================================
```
{..#typeof(#nse) #v0=#nse;
                #v=#v0 instanceof #t;...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v0 = #nse;   #v = #v0 instanceof #t; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v0 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #v = #v0 instanceof #t;
    ProgramSV                                : #v (program Variable)

    Instanceof                               : #v0 instanceof #t;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #t (program Type)





=== 1140252080 ======================================================
```
{.. #lhs = #e0 ? #e1 : #e2; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e0 ? #e1 : #e2; ... } ...
  CopyAssignment                           : #lhs = #e0 ? #e1 : #e2;
    ProgramSV                                : #lhs (program LeftHandSide)

    Conditional                              : #e0 ? #e1 : #e2;
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #e1 (program Expression)

      ProgramSV                                : #e2 (program Expression)





=== 2146394540 ======================================================
```
{.. if(#e0) {#lhs = #e1;}
                else {#lhs = #e2;} ...}
```

ContextStatementBlock                    : ..{ ..   if (#e0) {     #lhs = #e1;   } else {     #lhs = #e2;   } ... } ...
  If                                       : if (#e0) {   #lhs = #e1; } else {   #lhs = #e2; }
    ProgramSV                                : #e0 (program Expression)

    Then                                     :  {   #lhs = #e1; }
      StatementBlock                           : {   #lhs = #e1; }
        CopyAssignment                           : #lhs = #e1;
          ProgramSV                                : #lhs (program LeftHandSide)

          ProgramSV                                : #e1 (program Expression)




    Else                                     : else {   #lhs = #e2; }
      StatementBlock                           : {   #lhs = #e2; }
        CopyAssignment                           : #lhs = #e2;
          ProgramSV                                : #lhs (program LeftHandSide)

          ProgramSV                                : #e2 (program Expression)







=== 303039521 ======================================================
```
{.. #lhs = #nse ? #se1 : #se2; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse ? #se1 : #se2; ... } ...
  CopyAssignment                           : #lhs = #nse ? #se1 : #se2;
    ProgramSV                                : #lhs (program LeftHandSide)

    Conditional                              : #nse ? #se1 : #se2;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #se1 (program SimpleExpression)

      ProgramSV                                : #se2 (program SimpleExpression)





=== 598824413 ======================================================
```
{.. #typeof(#nse) #v0 = #nse; #lhs = #v0 ? #se1 : #se2; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v0 = #nse;   #lhs = #v0 ? #se1 : #se2; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v0 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 ? #se1 : #se2;
    ProgramSV                                : #lhs (program LeftHandSide)

    Conditional                              : #v0 ? #se1 : #se2;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #se1 (program SimpleExpression)

      ProgramSV                                : #se2 (program SimpleExpression)





=== -1911752193 ======================================================
```
{.. #lhs = #se0 ? #se1 : #se2; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #se0 ? #se1 : #se2; ... } ...
  CopyAssignment                           : #lhs = #se0 ? #se1 : #se2;
    ProgramSV                                : #lhs (program LeftHandSide)

    Conditional                              : #se0 ? #se1 : #se2;
      ProgramSV                                : #se0 (program SimpleExpression)

      ProgramSV                                : #se1 (program SimpleExpression)

      ProgramSV                                : #se2 (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1786740677 ======================================================
```
{.. #lhs = #senf0 == #senf1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #senf0 == #senf1; ... } ...
  CopyAssignment                           : #lhs = #senf0 == #senf1;
    ProgramSV                                : #lhs (program LeftHandSide)

    Equals                                   : #senf0 == #senf1;
      ProgramSV                                : #senf0 (program SimpleExpressionNonFloatDouble)

      ProgramSV                                : #senf1 (program SimpleExpressionNonFloatDouble)





=== -1996010195 ======================================================
```
{.. #lhs = false; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = false; ... } ...
  CopyAssignment                           : #lhs = false;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : false;




=== -1834452942 ======================================================
```
{.. #lhs = true;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = true; ... } ...
  CopyAssignment                           : #lhs = true;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : true;




=== 1786740677 ======================================================
```
{.. #lhs = #senf0 == #senf1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #senf0 == #senf1; ... } ...
  CopyAssignment                           : #lhs = #senf0 == #senf1;
    ProgramSV                                : #lhs (program LeftHandSide)

    Equals                                   : #senf0 == #senf1;
      ProgramSV                                : #senf0 (program SimpleExpressionNonFloatDouble)

      ProgramSV                                : #senf1 (program SimpleExpressionNonFloatDouble)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1770004311 ======================================================
```
{.. #lhs = #senf0 != #senf1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #senf0 != #senf1; ... } ...
  CopyAssignment                           : #lhs = #senf0 != #senf1;
    ProgramSV                                : #lhs (program LeftHandSide)

    NotEquals                                : #senf0 != #senf1;
      ProgramSV                                : #senf0 (program SimpleExpressionNonFloatDouble)

      ProgramSV                                : #senf1 (program SimpleExpressionNonFloatDouble)





=== 356883244 ======================================================
```
{.. #lhs = true; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = true; ... } ...
  CopyAssignment                           : #lhs = true;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : true;




=== -1996010195 ======================================================
```
{.. #lhs = false; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = false; ... } ...
  CopyAssignment                           : #lhs = false;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : false;




=== -1770004311 ======================================================
```
{.. #lhs = #senf0 != #senf1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #senf0 != #senf1; ... } ...
  CopyAssignment                           : #lhs = #senf0 != #senf1;
    ProgramSV                                : #lhs (program LeftHandSide)

    NotEquals                                : #senf0 != #senf1;
      ProgramSV                                : #senf0 (program SimpleExpressionNonFloatDouble)

      ProgramSV                                : #senf1 (program SimpleExpressionNonFloatDouble)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1922114287 ======================================================
```
{.. #lhs = #senf0 < #senf1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #senf0 < #senf1; ... } ...
  CopyAssignment                           : #lhs = #senf0 < #senf1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessThan                                 : #senf0 < #senf1;
      ProgramSV                                : #senf0 (program SimpleExpressionNonFloatDouble)

      ProgramSV                                : #senf1 (program SimpleExpressionNonFloatDouble)





=== -1834452942 ======================================================
```
{.. #lhs = true;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = true; ... } ...
  CopyAssignment                           : #lhs = true;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : true;




=== -1996010195 ======================================================
```
{.. #lhs = false; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = false; ... } ...
  CopyAssignment                           : #lhs = false;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : false;




=== 1922114287 ======================================================
```
{.. #lhs = #senf0 < #senf1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #senf0 < #senf1; ... } ...
  CopyAssignment                           : #lhs = #senf0 < #senf1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessThan                                 : #senf0 < #senf1;
      ProgramSV                                : #senf0 (program SimpleExpressionNonFloatDouble)

      ProgramSV                                : #senf1 (program SimpleExpressionNonFloatDouble)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 279188868 ======================================================
```
{.. #lhs = #senf0 <= #senf1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #senf0 <= #senf1; ... } ...
  CopyAssignment                           : #lhs = #senf0 <= #senf1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessOrEquals                             : #senf0 <= #senf1;
      ProgramSV                                : #senf0 (program SimpleExpressionNonFloatDouble)

      ProgramSV                                : #senf1 (program SimpleExpressionNonFloatDouble)





=== 356883244 ======================================================
```
{.. #lhs = true; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = true; ... } ...
  CopyAssignment                           : #lhs = true;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : true;




=== -1996010195 ======================================================
```
{.. #lhs = false; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = false; ... } ...
  CopyAssignment                           : #lhs = false;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : false;




=== 279188868 ======================================================
```
{.. #lhs = #senf0 <= #senf1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #senf0 <= #senf1; ... } ...
  CopyAssignment                           : #lhs = #senf0 <= #senf1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessOrEquals                             : #senf0 <= #senf1;
      ProgramSV                                : #senf0 (program SimpleExpressionNonFloatDouble)

      ProgramSV                                : #senf1 (program SimpleExpressionNonFloatDouble)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 910997037 ======================================================
```
{.. #lhs = #senf0 > #senf1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #senf0 > #senf1; ... } ...
  CopyAssignment                           : #lhs = #senf0 > #senf1;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterThan                              : #senf0 > #senf1;
      ProgramSV                                : #senf0 (program SimpleExpressionNonFloatDouble)

      ProgramSV                                : #senf1 (program SimpleExpressionNonFloatDouble)





=== -1834452942 ======================================================
```
{.. #lhs = true;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = true; ... } ...
  CopyAssignment                           : #lhs = true;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : true;




=== -1996010195 ======================================================
```
{.. #lhs = false; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = false; ... } ...
  CopyAssignment                           : #lhs = false;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : false;




=== 910997037 ======================================================
```
{.. #lhs = #senf0 > #senf1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #senf0 > #senf1; ... } ...
  CopyAssignment                           : #lhs = #senf0 > #senf1;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterThan                              : #senf0 > #senf1;
      ProgramSV                                : #senf0 (program SimpleExpressionNonFloatDouble)

      ProgramSV                                : #senf1 (program SimpleExpressionNonFloatDouble)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1000674810 ======================================================
```
{.. #lhs = #senf0 >= #senf1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #senf0 >= #senf1; ... } ...
  CopyAssignment                           : #lhs = #senf0 >= #senf1;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterOrEquals                          : #senf0 >= #senf1;
      ProgramSV                                : #senf0 (program SimpleExpressionNonFloatDouble)

      ProgramSV                                : #senf1 (program SimpleExpressionNonFloatDouble)





=== 356883244 ======================================================
```
{.. #lhs = true; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = true; ... } ...
  CopyAssignment                           : #lhs = true;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : true;




=== -1996010195 ======================================================
```
{.. #lhs = false; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = false; ... } ...
  CopyAssignment                           : #lhs = false;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : false;




=== -1000674810 ======================================================
```
{.. #lhs = #senf0 >= #senf1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #senf0 >= #senf1; ... } ...
  CopyAssignment                           : #lhs = #senf0 >= #senf1;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterOrEquals                          : #senf0 >= #senf1;
      ProgramSV                                : #senf0 (program SimpleExpressionNonFloatDouble)

      ProgramSV                                : #senf1 (program SimpleExpressionNonFloatDouble)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 916096462 ======================================================
```
{.. #lhs = (byte) #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (byte) #nse; ... } ...
  CopyAssignment                           : #lhs = (byte) #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (byte) #nse;
      SchemaTypeReference                      : byte;
        ProgramElementName                       : byte


      ProgramSV                                : #nse (program NonSimpleExpression)





=== -1700342342 ======================================================
```
{.. #typeof(#nse) #v = #nse; #lhs = (byte) #v;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = (byte) #v; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = (byte) #v;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (byte) #v;
      SchemaTypeReference                      : byte;
        ProgramElementName                       : byte


      ProgramSV                                : #v (program Variable)





=== 767910982 ======================================================
```
{.. #lhs = (short) #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (short) #nse; ... } ...
  CopyAssignment                           : #lhs = (short) #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (short) #nse;
      SchemaTypeReference                      : short;
        ProgramElementName                       : short


      ProgramSV                                : #nse (program NonSimpleExpression)





=== -2095733886 ======================================================
```
{.. #typeof(#nse) #v = #nse; #lhs = (short) #v;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = (short) #v; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = (short) #v;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (short) #v;
      SchemaTypeReference                      : short;
        ProgramElementName                       : short


      ProgramSV                                : #v (program Variable)





=== -274197575 ======================================================
```
{.. #lhs = (int) #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (int) #nse; ... } ...
  CopyAssignment                           : #lhs = (int) #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (int) #nse;
      SchemaTypeReference                      : int;
        ProgramElementName                       : int


      ProgramSV                                : #nse (program NonSimpleExpression)





=== 2041455023 ======================================================
```
{.. #typeof(#nse) #v = #nse; #lhs = (int) #v;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = (int) #v; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = (int) #v;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (int) #v;
      SchemaTypeReference                      : int;
        ProgramElementName                       : int


      ProgramSV                                : #v (program Variable)





=== 361651522 ======================================================
```
{.. #lhs = (long) #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (long) #nse; ... } ...
  CopyAssignment                           : #lhs = (long) #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (long) #nse;
      SchemaTypeReference                      : long;
        ProgramElementName                       : long


      ProgramSV                                : #nse (program NonSimpleExpression)





=== -1025491002 ======================================================
```
{.. #typeof(#nse) #v = #nse; #lhs = (long) #v;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = (long) #v; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = (long) #v;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (long) #v;
      SchemaTypeReference                      : long;
        ProgramElementName                       : long


      ProgramSV                                : #v (program Variable)





=== -1818102271 ======================================================
```
{.. #e0.#attribute *= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #e0.#attribute *= #e; ... } ...
  TimesAssignment                          : #e0.#attribute *= #e;
    SchematicFieldReference                  : #e0.#attribute;
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== 900571330 ======================================================
```
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute * #e); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v = #e0;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute *                                            #e); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v = #e0;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute *                                          #e);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute * #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute * #e);
        Times                                    : #v.#attribute * #e;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)







=== -1225427347 ======================================================
```
{.. #e0[#e] *= #e1; ...}
```

ContextStatementBlock                    : ..{ ..   #e0[#e] *= #e1; ... } ...
  TimesAssignment                          : #e0[#e] *= #e1;
    ArrayReference                           : #e0[#e];
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e1 (program Expression)




=== -1262516205 ======================================================
```
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e;
                #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] * #e1); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] * #e1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] * #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] * #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] * #e1);
        Times                                    : #v0[#v1] * #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)







=== -399065284 ======================================================
```
{.. #lhs *= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs *= #e; ... } ...
  TimesAssignment                          : #lhs *= #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== 1731634334 ======================================================
```
{.. #lhs = (#typeof(#lhs))(#lhs * (#e)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#typeof(#lhs)) (#lhs * (#e)); ... } ...
  CopyAssignment                           : #lhs = (#typeof(#lhs)) (#lhs * (#e));
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs)) (#lhs * (#e));
      TypeOf                                   : #typeof( #lhs (program LeftHandSide));
        ProgramSV                                : #lhs (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs * (#e));
        Times                                    : #lhs * (#e);
          ProgramSV                                : #lhs (program LeftHandSide)

          ParenthesizedExpression                  : (#e);
            ProgramSV                                : #e (program Expression)








=== 2082042822 ======================================================
```
{.. #e0.#attribute /= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #e0.#attribute /= #e; ... } ...
  DivideAssignment                         : #e0.#attribute /= #e;
    SchematicFieldReference                  : #e0.#attribute;
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== 505749127 ======================================================
```
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute / #e); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v = #e0;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute /                                            #e); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v = #e0;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute /                                          #e);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute / #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute / #e);
        Divide                                   : #v.#attribute / #e;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)







=== -580013752 ======================================================
```
{.. #e0[#e] /= #e1; ...}
```

ContextStatementBlock                    : ..{ ..   #e0[#e] /= #e1; ... } ...
  DivideAssignment                         : #e0[#e] /= #e1;
    ArrayReference                           : #e0[#e];
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e1 (program Expression)




=== -1238147304 ======================================================
```
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] / #e1); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] / #e1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] / #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] / #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] / #e1);
        Divide                                   : #v0[#v1] / #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)







=== -793887487 ======================================================
```
{.. #lhs /= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs /= #e; ... } ...
  DivideAssignment                         : #lhs /= #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== 264619299 ======================================================
```
{.. #lhs = (#typeof(#lhs))(#lhs / (#e)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#typeof(#lhs)) (#lhs / (#e)); ... } ...
  CopyAssignment                           : #lhs = (#typeof(#lhs)) (#lhs / (#e));
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs)) (#lhs / (#e));
      TypeOf                                   : #typeof( #lhs (program LeftHandSide));
        ProgramSV                                : #lhs (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs / (#e));
        Divide                                   : #lhs / (#e);
          ProgramSV                                : #lhs (program LeftHandSide)

          ParenthesizedExpression                  : (#e);
            ProgramSV                                : #e (program Expression)








=== -1423280068 ======================================================
```
{.. #e0.#attribute %= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #e0.#attribute %= #e; ... } ...
  ModuloAssignment                         : #e0.#attribute %= #e;
    SchematicFieldReference                  : #e0.#attribute;
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== 1295393533 ======================================================
```
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute % #e); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v = #e0;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute %                                            #e); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v = #e0;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute %                                          #e);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute % #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute % #e);
        Modulo                                   : #v.#attribute % #e;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)







=== -1870840942 ======================================================
```
{.. #e0[#e] %= #e1; ...}
```

ContextStatementBlock                    : ..{ ..   #e0[#e] %= #e1; ... } ...
  ModuloAssignment                         : #e0[#e] %= #e1;
    ArrayReference                           : #e0[#e];
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e1 (program Expression)




=== -1907929800 ======================================================
```
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e;
                #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] % #e1); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] % #e1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] % #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] % #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] % #e1);
        Modulo                                   : #v0[#v1] % #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)







=== -4243081 ======================================================
```
{.. #lhs %= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs %= #e; ... } ...
  ModuloAssignment                         : #lhs %= #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== -1096317927 ======================================================
```
{.. #lhs = (#typeof(#lhs))(#lhs % (#e)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#typeof(#lhs)) (#lhs % (#e)); ... } ...
  CopyAssignment                           : #lhs = (#typeof(#lhs)) (#lhs % (#e));
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs)) (#lhs % (#e));
      TypeOf                                   : #typeof( #lhs (program LeftHandSide));
        ProgramSV                                : #lhs (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs % (#e));
        Modulo                                   : #lhs % (#e);
          ProgramSV                                : #lhs (program LeftHandSide)

          ParenthesizedExpression                  : (#e);
            ProgramSV                                : #e (program Expression)








=== 679913666 ======================================================
```
{.. #e0.#attribute += #e; ...}
```

ContextStatementBlock                    : ..{ ..   #e0.#attribute += #e; ... } ...
  PlusAssignment                           : #e0.#attribute += #e;
    SchematicFieldReference                  : #e0.#attribute;
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== -896380029 ======================================================
```
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute + #e); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v = #e0;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute +                                            #e); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v = #e0;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute +                                          #e);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute + #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute + #e);
        Plus                                     : #v.#attribute + #e;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)







=== -1096344628 ======================================================
```
{.. #e0[#e] += #e1; ...}
```

ContextStatementBlock                    : ..{ ..   #e0[#e] += #e1; ... } ...
  PlusAssignment                           : #e0[#e] += #e1;
    ArrayReference                           : #e0[#e];
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e1 (program Expression)




=== -1133433486 ======================================================
```
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e;
                #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] + #e1); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] + #e1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] + #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] + #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] + #e1);
        Plus                                     : #v0[#v1] + #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)







=== 2098950653 ======================================================
```
{.. #lhs += #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs += #e; ... } ...
  PlusAssignment                           : #lhs += #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== 1438231327 ======================================================
```
{.. #lhs = (#typeof(#lhs))(#lhs + (#e)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#typeof(#lhs)) (#lhs + (#e)); ... } ...
  CopyAssignment                           : #lhs = (#typeof(#lhs)) (#lhs + (#e));
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs)) (#lhs + (#e));
      TypeOf                                   : #typeof( #lhs (program LeftHandSide));
        ProgramSV                                : #lhs (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs + (#e));
        Plus                                     : #lhs + (#e);
          ProgramSV                                : #lhs (program LeftHandSide)

          ParenthesizedExpression                  : (#e);
            ProgramSV                                : #e (program Expression)








=== 1380978244 ======================================================
```
{.. #e0.#attribute -= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #e0.#attribute -= #e; ... } ...
  MinusAssignment                          : #e0.#attribute -= #e;
    SchematicFieldReference                  : #e0.#attribute;
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== -195315451 ======================================================
```
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute - #e); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v = #e0;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute -                                            #e); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v = #e0;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute -                                          #e);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute - #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute - #e);
        Minus                                    : #v.#attribute - #e;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)







=== -838179190 ======================================================
```
{.. #e0[#e] -= #e1; ...}
```

ContextStatementBlock                    : ..{ ..   #e0[#e] -= #e1; ... } ...
  MinusAssignment                          : #e0[#e] -= #e1;
    ArrayReference                           : #e0[#e];
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e1 (program Expression)




=== -875268048 ======================================================
```
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e;
                #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] - #e1); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] - #e1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] - #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] - #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] - #e1);
        Minus                                    : #v0[#v1] - #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)







=== -1494952065 ======================================================
```
{.. #lhs -= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs -= #e; ... } ...
  MinusAssignment                          : #lhs -= #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== 851425313 ======================================================
```
{.. #lhs = (#typeof(#lhs))(#lhs - (#e)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#typeof(#lhs)) (#lhs - (#e)); ... } ...
  CopyAssignment                           : #lhs = (#typeof(#lhs)) (#lhs - (#e));
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs)) (#lhs - (#e));
      TypeOf                                   : #typeof( #lhs (program LeftHandSide));
        ProgramSV                                : #lhs (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs - (#e));
        Minus                                    : #lhs - (#e);
          ProgramSV                                : #lhs (program LeftHandSide)

          ParenthesizedExpression                  : (#e);
            ProgramSV                                : #e (program Expression)








=== -658511525 ======================================================
```
{.. #e0.#attribute <<= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #e0.#attribute <<= #e; ... } ...
  ShiftLeftAssignment                      : #e0.#attribute <<= #e;
    SchematicFieldReference                  : #e0.#attribute;
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== 183145470 ======================================================
```
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute << #e); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v = #e0;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute <<                                            #e); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v = #e0;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute <<                                          #e);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute << #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute << #e);
        ShiftLeft                                : #v.#attribute << #e;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)







=== -491665271 ======================================================
```
{.. #e0[#e] <<= #e1; ...}
```

ContextStatementBlock                    : ..{ ..   #e0[#e] <<= #e1; ... } ...
  ShiftLeftAssignment                      : #e0[#e] <<= #e1;
    ArrayReference                           : #e0[#e];
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e1 (program Expression)




=== -1740238145 ======================================================
```
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e;
                #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] << #e1); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] << #e1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] << #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] << #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] << #e1);
        ShiftLeft                                : #v0[#v1] << #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)







=== 381962112 ======================================================
```
{.. #lhs <<= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs <<= #e; ... } ...
  ShiftLeftAssignment                      : #lhs <<= #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== 1554865032 ======================================================
```
{.. #lhs = (#typeof(#lhs))(#lhs << (#e)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#typeof(#lhs)) (#lhs << (#e)); ... } ...
  CopyAssignment                           : #lhs = (#typeof(#lhs)) (#lhs << (#e));
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs)) (#lhs << (#e));
      TypeOf                                   : #typeof( #lhs (program LeftHandSide));
        ProgramSV                                : #lhs (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs << (#e));
        ShiftLeft                                : #lhs << (#e);
          ProgramSV                                : #lhs (program LeftHandSide)

          ParenthesizedExpression                  : (#e);
            ProgramSV                                : #e (program Expression)








=== 300718491 ======================================================
```
{.. #e0.#attribute >>= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #e0.#attribute >>= #e; ... } ...
  ShiftRightAssignment                     : #e0.#attribute >>= #e;
    SchematicFieldReference                  : #e0.#attribute;
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== 1142375486 ======================================================
```
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute >> #e); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v = #e0;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute >>                                            #e); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v = #e0;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute >>                                          #e);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute >> #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute >> #e);
        ShiftRight                               : #v.#attribute >> #e;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)







=== -820305847 ======================================================
```
{.. #e0[#e] >>= #e1; ...}
```

ContextStatementBlock                    : ..{ ..   #e0[#e] >>= #e1; ... } ...
  ShiftRightAssignment                     : #e0[#e] >>= #e1;
    ArrayReference                           : #e0[#e];
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e1 (program Expression)




=== -2068878721 ======================================================
```
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e;
                #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] >> #e1); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] >> #e1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] >> #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] >> #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] >> #e1);
        ShiftRight                               : #v0[#v1] >> #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)







=== 1341192128 ======================================================
```
{.. #lhs >>= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs >>= #e; ... } ...
  ShiftRightAssignment                     : #lhs >>= #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== -43058232 ======================================================
```
{.. #lhs = (#typeof(#lhs))(#lhs >> (#e)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#typeof(#lhs)) (#lhs >> (#e)); ... } ...
  CopyAssignment                           : #lhs = (#typeof(#lhs)) (#lhs >> (#e));
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs)) (#lhs >> (#e));
      TypeOf                                   : #typeof( #lhs (program LeftHandSide));
        ProgramSV                                : #lhs (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs >> (#e));
        ShiftRight                               : #lhs >> (#e);
          ProgramSV                                : #lhs (program LeftHandSide)

          ParenthesizedExpression                  : (#e);
            ProgramSV                                : #e (program Expression)








=== -1022001707 ======================================================
```
{.. #e0.#attribute >>>= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #e0.#attribute >>>= #e; ... } ...
  UnsignedShiftRightAssignment             : #e0.#attribute >>>= #e;
    SchematicFieldReference                  : #e0.#attribute;
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== 1761682646 ======================================================
```
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute >>> #e); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v = #e0;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute >>>                                            #e); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v = #e0;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute >>>                                          #e);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute >>> #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute >>> #e);
        UnsignedShiftRight                       : #v.#attribute >>> #e;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)







=== 426651609 ======================================================
```
{.. #e0[#e] >>>= #e1; ...}
```

ContextStatementBlock                    : ..{ ..   #e0[#e] >>>= #e1; ... } ...
  UnsignedShiftRightAssignment             : #e0[#e] >>>= #e1;
    ArrayReference                           : #e0[#e];
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e1 (program Expression)




=== 276779903 ======================================================
```
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e;
                #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] >>> #e1); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] >>> #e1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] >>> #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] >>> #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] >>> #e1);
        UnsignedShiftRight                       : #v0[#v1] >>> #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)







=== 1167909968 ======================================================
```
{.. #lhs >>>= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs >>>= #e; ... } ...
  UnsignedShiftRightAssignment             : #lhs >>>= #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== -1997682318 ======================================================
```
{.. #lhs = (#typeof(#lhs))(#lhs >>> (#e)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#typeof(#lhs)) (#lhs >>> (#e)); ... } ...
  CopyAssignment                           : #lhs = (#typeof(#lhs)) (#lhs >>> (#e));
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs)) (#lhs >>> (#e));
      TypeOf                                   : #typeof( #lhs (program LeftHandSide));
        ProgramSV                                : #lhs (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs >>> (#e));
        UnsignedShiftRight                       : #lhs >>> (#e);
          ProgramSV                                : #lhs (program LeftHandSide)

          ParenthesizedExpression                  : (#e);
            ProgramSV                                : #e (program Expression)








=== 1074735869 ======================================================
```
{.. #e0.#attribute &= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #e0.#attribute &= #e; ... } ...
  BinaryAndAssignment                      : #e0.#attribute &= #e;
    SchematicFieldReference                  : #e0.#attribute;
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== -501557826 ======================================================
```
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute & #e); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v = #e0;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute &                                            #e); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v = #e0;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute &                                          #e);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute & #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute & #e);
        BinaryAnd                                : #v.#attribute & #e;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)







=== -1741758223 ======================================================
```
{.. #e0[#e] &= #e1; ...}
```

ContextStatementBlock                    : ..{ ..   #e0[#e] &= #e1; ... } ...
  BinaryAndAssignment                      : #e0[#e] &= #e1;
    ArrayReference                           : #e0[#e];
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e1 (program Expression)




=== -1778847081 ======================================================
```
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e;
                #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] & #e1); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] & #e1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] & #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] & #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] & #e1);
        BinaryAnd                                : #v0[#v1] & #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)







=== -1801194440 ======================================================
```
{.. #lhs &= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs &= #e; ... } ...
  BinaryAndAssignment                      : #lhs &= #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== -1389720934 ======================================================
```
{.. #lhs = (#typeof(#lhs))(#lhs & (#e)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#typeof(#lhs)) (#lhs & (#e)); ... } ...
  CopyAssignment                           : #lhs = (#typeof(#lhs)) (#lhs & (#e));
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs)) (#lhs & (#e));
      TypeOf                                   : #typeof( #lhs (program LeftHandSide));
        ProgramSV                                : #lhs (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs & (#e));
        BinaryAnd                                : #lhs & (#e);
          ProgramSV                                : #lhs (program LeftHandSide)

          ParenthesizedExpression                  : (#e);
            ProgramSV                                : #e (program Expression)








=== 1155741651 ======================================================
```
{.. #e0.#attribute |= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #e0.#attribute |= #e; ... } ...
  BinaryOrAssignment                       : #e0.#attribute |= #e;
    SchematicFieldReference                  : #e0.#attribute;
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== -420552044 ======================================================
```
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute | #e); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v = #e0;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute |                                            #e); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v = #e0;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute |                                          #e);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute | #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute | #e);
        BinaryOr                                 : #v.#attribute | #e;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)







=== 769421019 ======================================================
```
{.. #e0[#e] |= #e1; ...}
```

ContextStatementBlock                    : ..{ ..   #e0[#e] |= #e1; ... } ...
  BinaryOrAssignment                       : #e0[#e] |= #e1;
    ArrayReference                           : #e0[#e];
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e1 (program Expression)




=== 732332161 ======================================================
```
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e;
                #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] | #e1); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] | #e1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] | #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] | #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] | #e1);
        BinaryOr                                 : #v0[#v1] | #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)







=== -1720188658 ======================================================
```
{.. #lhs |= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs |= #e; ... } ...
  BinaryOrAssignment                       : #lhs |= #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== -852575760 ======================================================
```
{.. #lhs = (#typeof(#lhs))(#lhs | (#e)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#typeof(#lhs)) (#lhs | (#e)); ... } ...
  CopyAssignment                           : #lhs = (#typeof(#lhs)) (#lhs | (#e));
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs)) (#lhs | (#e));
      TypeOf                                   : #typeof( #lhs (program LeftHandSide));
        ProgramSV                                : #lhs (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs | (#e));
        BinaryOr                                 : #lhs | (#e);
          ProgramSV                                : #lhs (program LeftHandSide)

          ParenthesizedExpression                  : (#e);
            ProgramSV                                : #e (program Expression)








=== -770292427 ======================================================
```
{.. #e0.#attribute ^= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #e0.#attribute ^= #e; ... } ...
  BinaryXOrAssignment                      : #e0.#attribute ^= #e;
    SchematicFieldReference                  : #e0.#attribute;
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== 1948381174 ======================================================
```
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute ^ #e); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v = #e0;   #v.#attribute = (#typeof(#attribute)) (#v.#attribute ^                                            #e); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v = #e0;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v.#attribute = (#typeof(#attribute)) (#v.#attribute ^                                          #e);
    SchematicFieldReference                  : #v.#attribute;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v.#attribute ^ #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v.#attribute ^ #e);
        BinaryXOr                                : #v.#attribute ^ #e;
          SchematicFieldReference                  : #v.#attribute;
            ProgramSV                                : #v (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)







=== 1191906745 ======================================================
```
{.. #e0[#e] ^= #e1; ...}
```

ContextStatementBlock                    : ..{ ..   #e0[#e] ^= #e1; ... } ...
  BinaryXOrAssignment                      : #e0[#e] ^= #e1;
    ArrayReference                           : #e0[#e];
      ProgramSV                                : #e0 (program Expression)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e1 (program Expression)




=== 1154817887 ======================================================
```
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e;
                #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] ^ #e1); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] ^ #e1); ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] ^ #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] ^ #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] ^ #e1);
        BinaryXOr                                : #v0[#v1] ^ #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)







=== 648744560 ======================================================
```
{.. #lhs ^= #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs ^= #e; ... } ...
  BinaryXOrAssignment                      : #lhs ^= #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== -640420142 ======================================================
```
{.. #lhs = (#typeof(#lhs))(#lhs ^ (#e)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#typeof(#lhs)) (#lhs ^ (#e)); ... } ...
  CopyAssignment                           : #lhs = (#typeof(#lhs)) (#lhs ^ (#e));
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs)) (#lhs ^ (#e));
      TypeOf                                   : #typeof( #lhs (program LeftHandSide));
        ProgramSV                                : #lhs (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs ^ (#e));
        BinaryXOr                                : #lhs ^ (#e);
          ProgramSV                                : #lhs (program LeftHandSide)

          ParenthesizedExpression                  : (#e);
            ProgramSV                                : #e (program Expression)








=== 2042482318 ======================================================
```
{.. #lhs0=#e0[#e]=#e1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0[#e] = #e1; ... } ...
  CopyAssignment                           : #lhs0 = #e0[#e] = #e1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    CopyAssignment                           : #e0[#e] = #e1;
      ArrayReference                           : #e0[#e];
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #e1 (program Expression)





=== 137395040 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #typeof(#e) #v1=#e;
                #v0[#v1]=#e1;
                #lhs0=#v0[#v1];  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = #e1;   #lhs0 = #v0[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = #e1;
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    ProgramSV                                : #e1 (program Expression)


  CopyAssignment                           : #lhs0 = #v0[#v1];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -1478972524 ======================================================
```
{.. #lhs0=#e0.#attribute=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0.#attribute = #e; ... } ...
  CopyAssignment                           : #lhs0 = #e0.#attribute = #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    CopyAssignment                           : #e0.#attribute = #e;
      SchematicFieldReference                  : #e0.#attribute;
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)


      ProgramSV                                : #e (program Expression)





=== 1956984396 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #v0.#attribute=#e;
                #lhs0=#v0.#attribute;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #v0.#attribute = #e;   #lhs0 = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v0.#attribute = #e;
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)


  CopyAssignment                           : #lhs0 = #v0.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== 1997035164 ======================================================
```
{.. #lhs0=#lhs1=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1 = #e; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1 = #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    CopyAssignment                           : #lhs1 = #e;
      ProgramSV                                : #lhs1 (program LeftHandSide)

      ProgramSV                                : #e (program Expression)





=== 441131684 ======================================================
```
{.. #lhs1=#e; #lhs0=#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = #e;   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = #e;
    ProgramSV                                : #lhs1 (program LeftHandSide)

    ProgramSV                                : #e (program Expression)


  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== 2095051048 ======================================================
```
{.. #lhs0=#e0[#e]*=#e1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0[#e] *= #e1; ... } ...
  CopyAssignment                           : #lhs0 = #e0[#e] *= #e1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    TimesAssignment                          : #e0[#e] *= #e1;
      ArrayReference                           : #e0[#e];
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #e1 (program Expression)





=== 1191139986 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #typeof(#e) #v1=#e;
                #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] * #e1);
                #lhs0=#v0[#v1];  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] * #e1);   #lhs0 = #v0[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] * #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] * #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] * #e1);
        Times                                    : #v0[#v1] * #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)





  CopyAssignment                           : #lhs0 = #v0[#v1];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 1405244808 ======================================================
```
{.. #lhs0=#e0.#attribute*=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0.#attribute *= #e; ... } ...
  CopyAssignment                           : #lhs0 = #e0.#attribute *= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    TimesAssignment                          : #e0.#attribute *= #e;
      SchematicFieldReference                  : #e0.#attribute;
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)


      ProgramSV                                : #e (program Expression)





=== 1761411994 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #v0.#attribute = (#typeof(#attribute))(#v0.#attribute * #e);
                #lhs0=#v0.#attribute;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute *                                             #e);   #lhs0 = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute *                                           #e);
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v0.#attribute * #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v0.#attribute * #e);
        Times                                    : #v0.#attribute * #e;
          SchematicFieldReference                  : #v0.#attribute;
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #v0.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== 1787300736 ======================================================
```
{.. #lhs0=#lhs1*=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1 *= #e; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1 *= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    TimesAssignment                          : #lhs1 *= #e;
      ProgramSV                                : #lhs1 (program LeftHandSide)

      ProgramSV                                : #e (program Expression)





=== -460339079 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 * #e); #lhs0=#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 * #e);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 * #e);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 * #e);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 * #e);
        Times                                    : #lhs1 * #e;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== 1700228845 ======================================================
```
{.. #lhs0=#e0[#e]/=#e1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0[#e] /= #e1; ... } ...
  CopyAssignment                           : #lhs0 = #e0[#e] /= #e1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    DivideAssignment                         : #e0[#e] /= #e1;
      ArrayReference                           : #e0[#e];
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #e1 (program Expression)





=== 1277372183 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #typeof(#e) #v1=#e;
                #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] / #e1);
                #lhs0=#v0[#v1];  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] / #e1);   #lhs0 = #v0[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] / #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] / #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] / #e1);
        Divide                                   : #v0[#v1] / #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)





  CopyAssignment                           : #lhs0 = #v0[#v1];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 422677283 ======================================================
```
{.. #lhs0=#e0.#attribute/=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0.#attribute /= #e; ... } ...
  CopyAssignment                           : #lhs0 = #e0.#attribute /= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    DivideAssignment                         : #e0.#attribute /= #e;
      SchematicFieldReference                  : #e0.#attribute;
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)


      ProgramSV                                : #e (program Expression)





=== 558711349 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #v0.#attribute = (#typeof(#attribute))(#v0.#attribute / #e);
                #lhs0=#v0.#attribute;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute /                                             #e);   #lhs0 = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute /                                           #e);
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v0.#attribute / #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v0.#attribute / #e);
        Divide                                   : #v0.#attribute / #e;
          SchematicFieldReference                  : #v0.#attribute;
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #v0.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== 804733211 ======================================================
```
{.. #lhs0=#lhs1/=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1 /= #e; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1 /= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    DivideAssignment                         : #lhs1 /= #e;
      ProgramSV                                : #lhs1 (program LeftHandSide)

      ProgramSV                                : #e (program Expression)





=== -795372844 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 / #e); #lhs0=#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 / #e);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 / #e);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 / #e);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 / #e);
        Divide                                   : #lhs1 / #e;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== -1805094045 ======================================================
```
{.. #lhs0=#e0[#e]%=#e1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0[#e] %= #e1; ... } ...
  CopyAssignment                           : #lhs0 = #e0[#e] %= #e1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ModuloAssignment                         : #e0[#e] %= #e1;
      ArrayReference                           : #e0[#e];
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #e1 (program Expression)





=== 1104907789 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #typeof(#e) #v1=#e;
                #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] % #e1);
                #lhs0=#v0[#v1];  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] % #e1);   #lhs0 = #v0[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] % #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] % #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] % #e1);
        Modulo                                   : #v0[#v1] % #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)





  CopyAssignment                           : #lhs0 = #v0[#v1];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -1907154963 ======================================================
```
{.. #lhs0=#e0.#attribute%=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0.#attribute %= #e; ... } ...
  CopyAssignment                           : #lhs0 = #e0.#attribute %= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ModuloAssignment                         : #e0.#attribute %= #e;
      SchematicFieldReference                  : #e0.#attribute;
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)


      ProgramSV                                : #e (program Expression)





=== -1330854657 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #v0.#attribute = (#typeof(#attribute))(#v0.#attribute % #e);
                #lhs0=#v0.#attribute;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute %                                             #e);   #lhs0 = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute %                                           #e);
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v0.#attribute % #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v0.#attribute % #e);
        Modulo                                   : #v0.#attribute % #e;
          SchematicFieldReference                  : #v0.#attribute;
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #v0.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== -1525099035 ======================================================
```
{.. #lhs0=#lhs1%=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1 %= #e; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1 %= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ModuloAssignment                         : #lhs1 %= #e;
      ProgramSV                                : #lhs1 (program LeftHandSide)

      ProgramSV                                : #e (program Expression)





=== -125305314 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 % #e); #lhs0=#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 % #e);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 % #e);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 % #e);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 % #e);
        Modulo                                   : #lhs1 % #e;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== 298099689 ======================================================
```
{.. #lhs0=#e0[#e]+=#e1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0[#e] += #e1; ... } ...
  CopyAssignment                           : #lhs0 = #e0[#e] += #e1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PlusAssignment                           : #e0[#e] += #e1;
      ArrayReference                           : #e0[#e];
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #e1 (program Expression)





=== -509600493 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #typeof(#e) #v1=#e;
                #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] + #e1);
                #lhs0=#v0[#v1];  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] + #e1);   #lhs0 = #v0[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] + #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] + #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] + #e1);
        Plus                                     : #v0[#v1] + #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)





  CopyAssignment                           : #lhs0 = #v0[#v1];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 1208731303 ======================================================
```
{.. #lhs0=#e0.#attribute+=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0.#attribute += #e; ... } ...
  CopyAssignment                           : #lhs0 = #e0.#attribute += #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PlusAssignment                           : #e0.#attribute += #e;
      SchematicFieldReference                  : #e0.#attribute;
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)


      ProgramSV                                : #e (program Expression)





=== 1520871865 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #v0.#attribute = (#typeof(#attribute))(#v0.#attribute + #e);
                #lhs0=#v0.#attribute;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute +                                             #e);   #lhs0 = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute +                                           #e);
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v0.#attribute + #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v0.#attribute + #e);
        Plus                                     : #v0.#attribute + #e;
          SchematicFieldReference                  : #v0.#attribute;
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #v0.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== 1590787231 ======================================================
```
{.. #lhs0=#lhs1+=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1 += #e; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1 += #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    PlusAssignment                           : #lhs1 += #e;
      ProgramSV                                : #lhs1 (program LeftHandSide)

      ProgramSV                                : #e (program Expression)





=== -527345832 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 + #e); #lhs0=#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 + #e);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 + #e);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 + #e);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 + #e);
        Plus                                     : #lhs1 + #e;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== 999164267 ======================================================
```
{.. #lhs0=#e0[#e]-=#e1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0[#e] -= #e1; ... } ...
  CopyAssignment                           : #lhs0 = #e0[#e] -= #e1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    MinusAssignment                          : #e0[#e] -= #e1;
      ArrayReference                           : #e0[#e];
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #e1 (program Expression)





=== 383885845 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #typeof(#e) #v1=#e;
                #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] - #e1);
                #lhs0=#v0[#v1];  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] - #e1);   #lhs0 = #v0[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] - #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] - #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] - #e1);
        Minus                                    : #v0[#v1] - #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)





  CopyAssignment                           : #lhs0 = #v0[#v1];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 815704293 ======================================================
```
{.. #lhs0=#e0.#attribute-=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0.#attribute -= #e; ... } ...
  CopyAssignment                           : #lhs0 = #e0.#attribute -= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    MinusAssignment                          : #e0.#attribute -= #e;
      SchematicFieldReference                  : #e0.#attribute;
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)


      ProgramSV                                : #e (program Expression)





=== 1039791607 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #v0.#attribute = (#typeof(#attribute))(#v0.#attribute - #e);
                #lhs0=#v0.#attribute;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute -                                             #e);   #lhs0 = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute -                                           #e);
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v0.#attribute - #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v0.#attribute - #e);
        Minus                                    : #v0.#attribute - #e;
          SchematicFieldReference                  : #v0.#attribute;
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #v0.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== 1197760221 ======================================================
```
{.. #lhs0=#lhs1-=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1 -= #e; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1 -= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    MinusAssignment                          : #lhs1 -= #e;
      ProgramSV                                : #lhs1 (program LeftHandSide)

      ProgramSV                                : #e (program Expression)





=== -661359338 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 - #e); #lhs0=#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 - #e);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 - #e);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 - #e);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 - #e);
        Minus                                    : #lhs1 - #e;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== -527150066 ======================================================
```
{.. #lhs0=#e0[#e]<<=#e1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0[#e] <<= #e1; ... } ...
  CopyAssignment                           : #lhs0 = #e0[#e] <<= #e1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ShiftLeftAssignment                      : #e0[#e] <<= #e1;
      ArrayReference                           : #e0[#e];
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #e1 (program Expression)





=== -1629619650 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #typeof(#e) #v1=#e;
                #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] << #e1);
                #lhs0=#v0[#v1];  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] << #e1);   #lhs0 = #v0[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] << #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] << #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] << #e1);
        ShiftLeft                                : #v0[#v1] << #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)





  CopyAssignment                           : #lhs0 = #v0[#v1];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -900960300 ======================================================
```
{.. #lhs0=#e0.#attribute<<=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0.#attribute <<= #e; ... } ...
  CopyAssignment                           : #lhs0 = #e0.#attribute <<= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ShiftLeftAssignment                      : #e0.#attribute <<= #e;
      SchematicFieldReference                  : #e0.#attribute;
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)


      ProgramSV                                : #e (program Expression)





=== -129329170 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #v0.#attribute = (#typeof(#attribute))(#v0.#attribute << #e);
                #lhs0=#v0.#attribute;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute <<                                             #e);   #lhs0 = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute <<                                           #e);
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v0.#attribute << #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v0.#attribute << #e);
        ShiftLeft                                : #v0.#attribute << #e;
          SchematicFieldReference                  : #v0.#attribute;
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #v0.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== -1942128420 ======================================================
```
{.. #lhs0=#lhs1<<=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1 <<= #e; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1 <<= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ShiftLeftAssignment                      : #lhs1 <<= #e;
      ProgramSV                                : #lhs1 (program LeftHandSide)

      ProgramSV                                : #e (program Expression)





=== 1557801733 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 << #e); #lhs0=#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 << #e);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 << #e);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 << #e);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 << #e);
        ShiftLeft                                : #lhs1 << #e;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== 432079950 ======================================================
```
{.. #lhs0=#e0[#e]>>=#e1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0[#e] >>= #e1; ... } ...
  CopyAssignment                           : #lhs0 = #e0[#e] >>= #e1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ShiftRightAssignment                     : #e0[#e] >>= #e1;
      ArrayReference                           : #e0[#e];
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #e1 (program Expression)





=== 1192139390 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #typeof(#e) #v1=#e;
                #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] >> #e1);
                #lhs0=#v0[#v1];  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] >> #e1);   #lhs0 = #v0[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] >> #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] >> #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] >> #e1);
        ShiftRight                               : #v0[#v1] >> #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)





  CopyAssignment                           : #lhs0 = #v0[#v1];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -592922732 ======================================================
```
{.. #lhs0=#e0.#attribute>>=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0.#attribute >>= #e; ... } ...
  CopyAssignment                           : #lhs0 = #e0.#attribute >>= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ShiftRightAssignment                     : #e0.#attribute >>= #e;
      SchematicFieldReference                  : #e0.#attribute;
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)


      ProgramSV                                : #e (program Expression)





=== 1655971758 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #v0.#attribute = (#typeof(#attribute))(#v0.#attribute >> #e);
                #lhs0=#v0.#attribute;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute >>                                             #e);   #lhs0 = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute >>                                           #e);
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v0.#attribute >> #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v0.#attribute >> #e);
        ShiftRight                               : #v0.#attribute >> #e;
          SchematicFieldReference                  : #v0.#attribute;
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #v0.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== -1634090852 ======================================================
```
{.. #lhs0=#lhs1>>=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1 >>= #e; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1 >>= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ShiftRightAssignment                     : #lhs1 >>= #e;
      ProgramSV                                : #lhs1 (program LeftHandSide)

      ProgramSV                                : #e (program Expression)





=== 1564336837 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 >> #e); #lhs0=#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 >> #e);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 >> #e);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 >> #e);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 >> #e);
        ShiftRight                               : #lhs1 >> #e;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== 2132896380 ======================================================
```
{.. #lhs0=#e0[#e]>>>=#e1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0[#e] >>>= #e1; ... } ...
  CopyAssignment                           : #lhs0 = #e0[#e] >>>= #e1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    UnsignedShiftRightAssignment             : #e0[#e] >>>= #e1;
      ArrayReference                           : #e0[#e];
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #e1 (program Expression)





=== -879736922 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #typeof(#e) #v1=#e;
                #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] >>> #e1);
                #lhs0=#v0[#v1];  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] >>> #e1);   #lhs0 = #v0[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] >>> #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] >>> #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] >>> #e1);
        UnsignedShiftRight                       : #v0[#v1] >>> #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)





  CopyAssignment                           : #lhs0 = #v0[#v1];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -827285516 ======================================================
```
{.. #lhs0=#e0.#attribute>>>=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0.#attribute >>>= #e; ... } ...
  CopyAssignment                           : #lhs0 = #e0.#attribute >>>= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    UnsignedShiftRightAssignment             : #e0.#attribute >>>= #e;
      SchematicFieldReference                  : #e0.#attribute;
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)


      ProgramSV                                : #e (program Expression)





=== 1493316358 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #v0.#attribute = (#typeof(#attribute))(#v0.#attribute >>> #e);
                #lhs0=#v0.#attribute;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute >>>                                             #e);   #lhs0 = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute >>>                                           #e);
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v0.#attribute >>> #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v0.#attribute >>> #e);
        UnsignedShiftRight                       : #v0.#attribute >>> #e;
          SchematicFieldReference                  : #v0.#attribute;
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #v0.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== 1256241132 ======================================================
```
{.. #lhs0=#lhs1>>>=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1 >>>= #e; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1 >>>= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    UnsignedShiftRightAssignment             : #lhs1 >>>= #e;
      ProgramSV                                : #lhs1 (program LeftHandSide)

      ProgramSV                                : #e (program Expression)





=== -1500705307 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 >>> #e); #lhs0=#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 >>> #e);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 >>> #e);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 >>> #e);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 >>> #e);
        UnsignedShiftRight                       : #lhs1 >>> #e;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== 692921892 ======================================================
```
{.. #lhs0=#e0[#e]&=#e1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0[#e] &= #e1; ... } ...
  CopyAssignment                           : #lhs0 = #e0[#e] &= #e1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    BinaryAndAssignment                      : #e0[#e] &= #e1;
      ArrayReference                           : #e0[#e];
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #e1 (program Expression)





=== -595832690 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #typeof(#e) #v1=#e;
                #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] & #e1);
                #lhs0=#v0[#v1];  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] & #e1);   #lhs0 = #v0[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] & #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] & #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] & #e1);
        BinaryAnd                                : #v0[#v1] & #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)





  CopyAssignment                           : #lhs0 = #v0[#v1];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -2103668468 ======================================================
```
{.. #lhs0=#e0.#attribute&=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0.#attribute &= #e; ... } ...
  CopyAssignment                           : #lhs0 = #e0.#attribute &= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    BinaryAndAssignment                      : #e0.#attribute &= #e;
      SchematicFieldReference                  : #e0.#attribute;
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)


      ProgramSV                                : #e (program Expression)





=== -1571394786 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #v0.#attribute = (#typeof(#attribute))(#v0.#attribute & #e);
                #lhs0=#v0.#attribute;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute &                                             #e);   #lhs0 = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute &                                           #e);
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v0.#attribute & #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v0.#attribute & #e);
        BinaryAnd                                : #v0.#attribute & #e;
          SchematicFieldReference                  : #v0.#attribute;
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #v0.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== -1721612540 ======================================================
```
{.. #lhs0=#lhs1&=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1 &= #e; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1 &= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    BinaryAndAssignment                      : #lhs1 &= #e;
      ProgramSV                                : #lhs1 (program LeftHandSide)

      ProgramSV                                : #e (program Expression)





=== -192312067 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 & #e); #lhs0=#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 & #e);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 & #e);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 & #e);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 & #e);
        BinaryAnd                                : #lhs1 & #e;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== 773927674 ======================================================
```
{.. #lhs0=#e0[#e]|=#e1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0[#e] |= #e1; ... } ...
  CopyAssignment                           : #lhs0 = #e0[#e] |= #e1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    BinaryOrAssignment                       : #e0[#e] |= #e1;
      ArrayReference                           : #e0[#e];
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #e1 (program Expression)





=== -830625820 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #typeof(#e) #v1=#e;
                #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] | #e1);
                #lhs0=#v0[#v1];  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] | #e1);   #lhs0 = #v0[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] | #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] | #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] | #e1);
        BinaryOr                                 : #v0[#v1] | #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)





  CopyAssignment                           : #lhs0 = #v0[#v1];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -1823960714 ======================================================
```
{.. #lhs0=#e0.#attribute|=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0.#attribute |= #e; ... } ...
  CopyAssignment                           : #lhs0 = #e0.#attribute |= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    BinaryOrAssignment                       : #e0.#attribute |= #e;
      SchematicFieldReference                  : #e0.#attribute;
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)


      ProgramSV                                : #e (program Expression)





=== -783009400 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #v0.#attribute = (#typeof(#attribute))(#v0.#attribute | #e);
                #lhs0=#v0.#attribute;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute |                                             #e);   #lhs0 = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute |                                           #e);
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v0.#attribute | #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v0.#attribute | #e);
        BinaryOr                                 : #v0.#attribute | #e;
          SchematicFieldReference                  : #v0.#attribute;
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #v0.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== -1441904786 ======================================================
```
{.. #lhs0=#lhs1|=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1 |= #e; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1 |= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    BinaryOrAssignment                       : #lhs1 |= #e;
      ProgramSV                                : #lhs1 (program LeftHandSide)

      ProgramSV                                : #e (program Expression)





=== -1659925529 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 | #e); #lhs0=#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 | #e);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 | #e);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 | #e);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 | #e);
        BinaryOr                                 : #lhs1 | #e;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== -1152106404 ======================================================
```
{.. #lhs0=#e0[#e]^=#e1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0[#e] ^= #e1; ... } ...
  CopyAssignment                           : #lhs0 = #e0[#e] ^= #e1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    BinaryXOrAssignment                      : #e0[#e] ^= #e1;
      ArrayReference                           : #e0[#e];
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #e1 (program Expression)





=== -1348019002 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #typeof(#e) #v1=#e;
                #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] ^ #e1);
                #lhs0=#v0[#v1];  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #typeof(#e) #v1 = #e;   #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] ^ #e1);   #lhs0 = #v0[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  LocalVariableDeclaration                 : #typeof(#e) #v1 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v1 = #e;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] ^ #e1);
    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)


    TypeCast                                 : (#typeof(#e0[#e])) (#v0[#v1] ^ #e1);
      TypeOf                                   : #typeof( #e0[#e];);
        ArrayReference                           : #e0[#e];
          ProgramSV                                : #e0 (program Expression)

          ProgramSV                                : #e (program Expression)



      ParenthesizedExpression                  : (#v0[#v1] ^ #e1);
        BinaryXOr                                : #v0[#v1] ^ #e1;
          ArrayReference                           : #v0[#v1];
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #v1 (program Variable)


          ProgramSV                                : #e1 (program Expression)





  CopyAssignment                           : #lhs0 = #v0[#v1];
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ArrayReference                           : #v0[#v1];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -223522860 ======================================================
```
{.. #lhs0=#e0.#attribute^=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #e0.#attribute ^= #e; ... } ...
  CopyAssignment                           : #lhs0 = #e0.#attribute ^= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    BinaryXOrAssignment                      : #e0.#attribute ^= #e;
      SchematicFieldReference                  : #e0.#attribute;
        ProgramSV                                : #e0 (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)


      ProgramSV                                : #e (program Expression)





=== 2138227174 ======================================================
```
{.. #typeof(#e0) #v0=#e0;
                #v0.#attribute = (#typeof(#attribute))(#v0.#attribute ^ #e);
                #lhs0=#v0.#attribute;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e0) #v0 = #e0;   #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute ^                                             #e);   #lhs0 = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#e0) #v0 = #e0;
    TypeOf                                   : #typeof( #e0 (program Expression));
      ProgramSV                                : #e0 (program Expression)


    VariableSpecification                    : #v0 = #e0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e0 (program Expression)



  CopyAssignment                           : #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute ^                                           #e);
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    TypeCast                                 : (#typeof(#attribute)) (#v0.#attribute ^ #e);
      TypeOf                                   : #typeof( #attribute (program LeftHandSide));
        ProgramSV                                : #attribute (program LeftHandSide)


      ParenthesizedExpression                  : (#v0.#attribute ^ #e);
        BinaryXOr                                : #v0.#attribute ^ #e;
          SchematicFieldReference                  : #v0.#attribute;
            ProgramSV                                : #v0 (program Variable)

            ProgramSV                                : #attribute (program LeftHandSide)


          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #v0.#attribute;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== 158533068 ======================================================
```
{.. #lhs0=#lhs1^=#e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs0 = #lhs1 ^= #e; ... } ...
  CopyAssignment                           : #lhs0 = #lhs1 ^= #e;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    BinaryXOrAssignment                      : #lhs1 ^= #e;
      ProgramSV                                : #lhs1 (program LeftHandSide)

      ProgramSV                                : #e (program Expression)





=== 350277061 ======================================================
```
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 ^ #e); #lhs0=#lhs1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs1 = (#typeof(#lhs1)) (#lhs1 ^ #e);   #lhs0 = #lhs1; ... } ...
  CopyAssignment                           : #lhs1 = (#typeof(#lhs1)) (#lhs1 ^ #e);
    ProgramSV                                : #lhs1 (program LeftHandSide)

    TypeCast                                 : (#typeof(#lhs1)) (#lhs1 ^ #e);
      TypeOf                                   : #typeof( #lhs1 (program LeftHandSide));
        ProgramSV                                : #lhs1 (program LeftHandSide)


      ParenthesizedExpression                  : (#lhs1 ^ #e);
        BinaryXOr                                : #lhs1 ^ #e;
          ProgramSV                                : #lhs1 (program LeftHandSide)

          ProgramSV                                : #e (program Expression)





  CopyAssignment                           : #lhs0 = #lhs1;
    ProgramSV                                : #lhs0 (program LeftHandSide)

    ProgramSV                                : #lhs1 (program LeftHandSide)




=== -1077642510 ======================================================
```
{{ #slist }}
```

StatementBlock                           : {   {     #slist   } }
  StatementBlock                           : {   #slist }
    ProgramSV                                : #slist (program Statement)




=== -1655308240 ======================================================
```
{ #slist }
```

StatementBlock                           : {   #slist }
  ProgramSV                                : #slist (program Statement)



=== 817656568 ======================================================
```
{.. { { #slist } } ...}
```

ContextStatementBlock                    : ..{ ..   {     {       #slist     }   } ... } ...
  StatementBlock                           : {   {     #slist   } }
    StatementBlock                           : {   #slist }
      ProgramSV                                : #slist (program Statement)





=== 1879073562 ======================================================
```
{.. { #slist } ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist   } ... } ...
  StatementBlock                           : {   #slist }
    ProgramSV                                : #slist (program Statement)




=== 1980898206 ======================================================
```
{.. { while ( #e ) #s } ...}
```

ContextStatementBlock                    : ..{ ..   {     while (#e) #s   } ... } ...
  StatementBlock                           : {   while (#e) #s }
    While                                    : while (#e) #s
      Guard                                    : #e (program Expression)
        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #s (program Statement)





=== 1881205654 ======================================================
```
{.. while ( #e ) #s ...}
```

ContextStatementBlock                    : ..{ ..   while (#e) #s ... } ...
  While                                    : while (#e) #s
    Guard                                    : #e (program Expression)
      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #s (program Statement)




=== 347307329 ======================================================
```
{.. { for(#loopInit; #guard; #forupdates) #s } ...}
```

ContextStatementBlock                    : ..{ ..   {     for (#loopInit; #guard; #forupdates) #s   } ... } ...
  StatementBlock                           : {   for (#loopInit; #guard; #forupdates) #s }
    For                                      : for (#loopInit; #guard; #forupdates) #s
      ProgramSV                                : #loopInit (program LoopInit)

      ProgramSV                                : #guard (program Guard)

      ProgramSV                                : #forupdates (program ForUpdates)

      ProgramSV                                : #s (program Statement)





=== 2137952803 ======================================================
```
{.. for(#loopInit; #guard; #forupdates) #s ...}
```

ContextStatementBlock                    : ..{ ..   for (#loopInit; #guard; #forupdates) #s ... } ...
  For                                      : for (#loopInit; #guard; #forupdates) #s
    ProgramSV                                : #loopInit (program LoopInit)

    ProgramSV                                : #guard (program Guard)

    ProgramSV                                : #forupdates (program ForUpdates)

    ProgramSV                                : #s (program Statement)




=== 1336196796 ======================================================
```
{.. { for(; #guard; #forupdates) #s } ...}
```

ContextStatementBlock                    : ..{ ..   {     for (; #guard; #forupdates) #s   } ... } ...
  StatementBlock                           : {   for (; #guard; #forupdates) #s }
    For                                      : for (; #guard; #forupdates) #s
      ProgramSV                                : #guard (program Guard)

      ProgramSV                                : #forupdates (program ForUpdates)

      ProgramSV                                : #s (program Statement)





=== 1563745012 ======================================================
```
{.. for(; #guard; #forupdates) #s ...}
```

ContextStatementBlock                    : ..{ ..   for (; #guard; #forupdates) #s ... } ...
  For                                      : for (; #guard; #forupdates) #s
    ProgramSV                                : #guard (program Guard)

    ProgramSV                                : #forupdates (program ForUpdates)

    ProgramSV                                : #s (program Statement)




=== -10830107 ======================================================
```
{.. { for(#loopInit; #guard;) #s } ...}
```

ContextStatementBlock                    : ..{ ..   {     for (#loopInit; #guard; ) #s   } ... } ...
  StatementBlock                           : {   for (#loopInit; #guard; ) #s }
    For                                      : for (#loopInit; #guard; ) #s
      ProgramSV                                : #loopInit (program LoopInit)

      ProgramSV                                : #guard (program Guard)

      ProgramSV                                : #s (program Statement)





=== -349742009 ======================================================
```
{.. for(#loopInit; #guard;) #s ...}
```

ContextStatementBlock                    : ..{ ..   for (#loopInit; #guard; ) #s ... } ...
  For                                      : for (#loopInit; #guard; ) #s
    ProgramSV                                : #loopInit (program LoopInit)

    ProgramSV                                : #guard (program Guard)

    ProgramSV                                : #s (program Statement)




=== -421650208 ======================================================
```
{.. { for(; #guard;) #s } ...}
```

ContextStatementBlock                    : ..{ ..   {     for (; #guard; ) #s   } ... } ...
  StatementBlock                           : {   for (; #guard; ) #s }
    For                                      : for (; #guard; ) #s
      ProgramSV                                : #guard (program Guard)

      ProgramSV                                : #s (program Statement)





=== 637507224 ======================================================
```
{.. for(; #guard;) #s ...}
```

ContextStatementBlock                    : ..{ ..   for (; #guard; ) #s ... } ...
  For                                      : for (; #guard; ) #s
    ProgramSV                                : #guard (program Guard)

    ProgramSV                                : #s (program Statement)




=== 337012906 ======================================================
```
{.. { do #s while (#e); } ...}
```

ContextStatementBlock                    : ..{ ..   {     do #s     while (#e);   } ... } ...
  StatementBlock                           : {   do #s   while (#e); }
    Do                                       : do #s while (#e);
      ProgramSV                                : #s (program Statement)

      Guard                                    : #e (program Expression)
        ProgramSV                                : #e (program Expression)






=== 995838178 ======================================================
```
{.. do #s while (#e); ...}
```

ContextStatementBlock                    : ..{ ..   do #s   while (#e); ... } ...
  Do                                       : do #s while (#e);
    ProgramSV                                : #s (program Statement)

    Guard                                    : #e (program Expression)
      ProgramSV                                : #e (program Expression)





=== -776938787 ======================================================
```
{.. { { #slist } { #slist1 } } ...}
```

ContextStatementBlock                    : ..{ ..   {     {       #slist     }     {       #slist1     }   } ... } ...
  StatementBlock                           : {   {     #slist   }   {     #slist1   } }
    StatementBlock                           : {   #slist }
      ProgramSV                                : #slist (program Statement)


    StatementBlock                           : {   #slist1 }
      ProgramSV                                : #slist1 (program Statement)





=== -791473985 ======================================================
```
{.. { #slist } { #slist1 } ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist   }   {     #slist1   } ... } ...
  StatementBlock                           : {   #slist }
    ProgramSV                                : #slist (program Statement)


  StatementBlock                           : {   #slist1 }
    ProgramSV                                : #slist1 (program Statement)




=== -363785347 ======================================================
```
{.. #lhs = (#e); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (#e); ... } ...
  CopyAssignment                           : #lhs = (#e);
    ProgramSV                                : #lhs (program LeftHandSide)

    ParenthesizedExpression                  : (#e);
      ProgramSV                                : #e (program Expression)





=== -1808341568 ======================================================
```
{.. #lhs = #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e; ... } ...
  CopyAssignment                           : #lhs = #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== -532782906 ======================================================
```
{.. (#e.#attribute) = #e0; ...}
```

ContextStatementBlock                    : ..{ ..   (#e.#attribute) = #e0; ... } ...
  CopyAssignment                           : (#e.#attribute) = #e0;
    ParenthesizedExpression                  : (#e.#attribute);
      SchematicFieldReference                  : #e.#attribute;
        ProgramSV                                : #e (program Expression)

        ProgramSV                                : #attribute (program LeftHandSide)



    ProgramSV                                : #e0 (program Expression)




=== -733154209 ======================================================
```
{.. #e.#attribute = #e0; ...}
```

ContextStatementBlock                    : ..{ ..   #e.#attribute = #e0; ... } ...
  CopyAssignment                           : #e.#attribute = #e0;
    SchematicFieldReference                  : #e.#attribute;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e0 (program Expression)




=== -2085904185 ======================================================
```
{.. (#lhs) = #e; ...}
```

ContextStatementBlock                    : ..{ ..   (#lhs) = #e; ... } ...
  CopyAssignment                           : (#lhs) = #e;
    ParenthesizedExpression                  : (#lhs);
      ProgramSV                                : #lhs (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== -1808341568 ======================================================
```
{.. #lhs = #e; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e; ... } ...
  CopyAssignment                           : #lhs = #e;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #e (program Expression)




=== -1696977644 ======================================================
```
{.. #lhs=#nse * #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse * #se; ... } ...
  CopyAssignment                           : #lhs = #nse * #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    Times                                    : #nse * #se;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -985469296 ======================================================
```
{.. #typeof(#nse) #v=#nse; #lhs=#v * #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = #v * #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v * #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    Times                                    : #v * #se;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== -1883836255 ======================================================
```
{.. #lhs=#e * #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e * #nse; ... } ...
  CopyAssignment                           : #lhs = #e * #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    Times                                    : #e * #nse;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== 571121426 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 * #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse) #v1 = #nse;   #lhs = #v0 * #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 * #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    Times                                    : #v0 * #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -2091799847 ======================================================
```
{.. #lhs=#nse / #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse / #se; ... } ...
  CopyAssignment                           : #lhs = #nse / #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    Divide                                   : #nse / #se;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -1380291499 ======================================================
```
{.. #typeof(#nse) #v=#nse; #lhs=#v / #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = #v / #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v / #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    Divide                                   : #v / #se;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== -1238422660 ======================================================
```
{.. #lhs=#e / #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e / #nse; ... } ...
  CopyAssignment                           : #lhs = #e / #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    Divide                                   : #e / #nse;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== 176299223 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 / #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse) #v1 = #nse;   #lhs = #v0 / #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 / #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    Divide                                   : #v0 / #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -1302155441 ======================================================
```
{.. #lhs=#nse % #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse % #se; ... } ...
  CopyAssignment                           : #lhs = #nse % #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    Modulo                                   : #nse % #se;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -590647093 ======================================================
```
{.. #typeof(#nse) #v=#nse; #lhs=#v % #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = #v % #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v % #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    Modulo                                   : #v % #se;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== 1765717446 ======================================================
```
{.. #lhs=#e % #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e % #nse; ... } ...
  CopyAssignment                           : #lhs = #e % #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    Modulo                                   : #e % #nse;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== 965943629 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 % #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse) #v1 = #nse;   #lhs = #v0 % #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 % #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    Modulo                                   : #v0 % #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 801038293 ======================================================
```
{.. #lhs=#nse + #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse + #se; ... } ...
  CopyAssignment                           : #lhs = #nse + #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    Plus                                     : #nse + #se;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== 1512546641 ======================================================
```
{.. #typeof(#nse) #v=#nse; #lhs=#v + #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = #v + #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v + #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    Plus                                     : #v + #se;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== -1754753536 ======================================================
```
{.. #lhs=#e + #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e + #nse; ... } ...
  CopyAssignment                           : #lhs = #e + #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    Plus                                     : #e + #nse;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== -1225829933 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 + #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse) #v1 = #nse;   #lhs = #v0 + #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 + #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    Plus                                     : #v0 + #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 1195860496 ======================================================
```
{.. #lhs=#nse & #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse & #se; ... } ...
  CopyAssignment                           : #lhs = #nse & #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryAnd                                : #nse & #se;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== 1907368844 ======================================================
```
{.. #typeof(#nse) #v=#nse; #lhs=#v & #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = #v & #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v & #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryAnd                                : #v & #se;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== 1894800165 ======================================================
```
{.. #lhs=#e & #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e & #nse; ... } ...
  CopyAssignment                           : #lhs = #e & #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryAnd                                : #e & #nse;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== -831007730 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 & #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse) #v1 = #nse;   #lhs = #v0 & #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 & #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryAnd                                : #v0 & #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 1276866278 ======================================================
```
{.. #lhs=#nse | #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse | #se; ... } ...
  CopyAssignment                           : #lhs = #nse | #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryOr                                 : #nse | #se;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== 1988374626 ======================================================
```
{.. #typeof(#nse) #v=#nse; #lhs=#v | #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = #v | #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v | #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryOr                                 : #v | #se;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== 111012111 ======================================================
```
{.. #lhs=#e | #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e | #nse; ... } ...
  CopyAssignment                           : #lhs = #e | #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryOr                                 : #e | #nse;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== -750001948 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 | #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse) #v1 = #nse;   #lhs = #v0 | #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 | #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryOr                                 : #v0 | #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -649167800 ======================================================
```
{.. #lhs=#nse ^ #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse ^ #se; ... } ...
  CopyAssignment                           : #lhs = #nse ^ #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryXOr                                : #nse ^ #se;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== 62340548 ======================================================
```
{.. #typeof(#nse) #v=#nse; #lhs=#v ^ #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = #v ^ #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v ^ #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryXOr                                : #v ^ #se;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== 533497837 ======================================================
```
{.. #lhs=#e ^ #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e ^ #nse; ... } ...
  CopyAssignment                           : #lhs = #e ^ #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryXOr                                : #e ^ #nse;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== 1618931270 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 ^ #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse) #v1 = #nse;   #lhs = #v0 ^ #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 ^ #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryXOr                                : #v0 ^ #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 1982037291 ======================================================
```
{.. #lhs=~#nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = ~#nse; ... } ...
  CopyAssignment                           : #lhs = ~#nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryNot                                : ~#nse;
      ProgramSV                                : #nse (program NonSimpleExpression)





=== -402917553 ======================================================
```
{..  #typeof(#nse) #v1=#nse; #lhs=~#v1 ; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v1 = #nse;   #lhs = ~#v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = ~#v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryNot                                : ~#v1;
      ProgramSV                                : #v1 (program Variable)





=== 1502102871 ======================================================
```
{.. #lhs=#nse - #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse - #se; ... } ...
  CopyAssignment                           : #lhs = #nse - #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    Minus                                    : #nse - #se;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -2081356077 ======================================================
```
{.. #typeof(#nse) #v=#nse; #lhs=#v - #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = #v - #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v - #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    Minus                                    : #v - #se;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== -1496588098 ======================================================
```
{.. #lhs=#e - #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e - #nse; ... } ...
  CopyAssignment                           : #lhs = #e - #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    Minus                                    : #e - #nse;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== -524765355 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 - #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse) #v1 = #nse;   #lhs = #v0 - #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 - #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    Minus                                    : #v0 - #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 608043848 ======================================================
```
{.. #lhs=#nse >> #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse >> #se; ... } ...
  CopyAssignment                           : #lhs = #nse >> #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    ShiftRight                               : #nse >> #se;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== 1189966156 ======================================================
```
{.. #typeof(#nse) #v=#nse; #lhs=#v >> #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = #v >> #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v >> #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    ShiftRight                               : #v >> #se;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== 1141920471 ======================================================
```
{.. #lhs=#e >> #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e >> #nse; ... } ...
  CopyAssignment                           : #lhs = #e >> #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    ShiftRight                               : #e >> #nse;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== 1491803836 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 >> #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse) #v1 = #nse;   #lhs = #v0 >> #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 >> #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    ShiftRight                               : #v0 >> #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 762578984 ======================================================
```
{.. #lhs=#nse >>> #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse >>> #se; ... } ...
  CopyAssignment                           : #lhs = #nse >>> #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    UnsignedShiftRight                       : #nse >>> #se;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== 1622301348 ======================================================
```
{.. #typeof(#nse) #v=#nse; #lhs=#v >>> #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = #v >>> #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v >>> #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    UnsignedShiftRight                       : #v >>> #se;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== 2024191309 ======================================================
```
{.. #lhs=#e >>> #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e >>> #nse; ... } ...
  CopyAssignment                           : #lhs = #e >>> #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    UnsignedShiftRight                       : #e >>> #nse;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== 1681500390 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 >>> #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse) #v1 = #nse;   #lhs = #v0 >>> #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 >>> #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    UnsignedShiftRight                       : #v0 >>> #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -351186168 ======================================================
```
{.. #lhs=#nse << #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse << #se; ... } ...
  CopyAssignment                           : #lhs = #nse << #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    ShiftLeft                                : #nse << #se;
      ProgramSV                                : #nse (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== 230736140 ======================================================
```
{.. #typeof(#nse) #v=#nse; #lhs=#v << #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #lhs = #v << #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v << #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    ShiftLeft                                : #v << #se;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== 1470561047 ======================================================
```
{.. #lhs=#e << #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e << #nse; ... } ...
  CopyAssignment                           : #lhs = #e << #nse;
    ProgramSV                                : #lhs (program LeftHandSide)

    ShiftLeft                                : #e << #nse;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== 532573820 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 << #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse) #v1 = #nse;   #lhs = #v0 << #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 << #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    ShiftLeft                                : #v0 << #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -1627309312 ======================================================
```
{.. #lhs = #nse0 == #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse0 == #se; ... } ...
  CopyAssignment                           : #lhs = #nse0 == #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    Equals                                   : #nse0 == #se;
      ProgramSV                                : #nse0 (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -1015368134 ======================================================
```
{.. #typeof(#nse0) #v0 = #nse0; #lhs = #v0 == #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse0) #v0 = #nse0;   #lhs = #v0 == #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse0) #v0 = #nse0;
    TypeOf                                   : #typeof( #nse0 (program NonSimpleExpression));
      ProgramSV                                : #nse0 (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 == #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    Equals                                   : #v0 == #se;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== -1914281509 ======================================================
```
{.. #lhs = #e == #nse0; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e == #nse0; ... } ...
  CopyAssignment                           : #lhs = #e == #nse0;
    ProgramSV                                : #lhs (program LeftHandSide)

    Equals                                   : #e == #nse0;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse0 (program NonSimpleExpression)





=== 1962044910 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse0) #v1 = #nse0; #lhs = #v0 == #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse0) #v1 = #nse0;   #lhs = #v0 == #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse0) #v1 = #nse0;
    TypeOf                                   : #typeof( #nse0 (program NonSimpleExpression));
      ProgramSV                                : #nse0 (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse0;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 == #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    Equals                                   : #v0 == #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -946658148 ======================================================
```
{.. #lhs = #nse0 != #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse0 != #se; ... } ...
  CopyAssignment                           : #lhs = #nse0 != #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    NotEquals                                : #nse0 != #se;
      ProgramSV                                : #nse0 (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -334716970 ======================================================
```
{.. #typeof(#nse0) #v0 = #nse0; #lhs = #v0 != #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse0) #v0 = #nse0;   #lhs = #v0 != #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse0) #v0 = #nse0;
    TypeOf                                   : #typeof( #nse0 (program NonSimpleExpression));
      ProgramSV                                : #nse0 (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 != #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    NotEquals                                : #v0 != #se;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== -643541897 ======================================================
```
{.. #lhs = #e != #nse0; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e != #nse0; ... } ...
  CopyAssignment                           : #lhs = #e != #nse0;
    ProgramSV                                : #lhs (program LeftHandSide)

    NotEquals                                : #e != #nse0;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse0 (program NonSimpleExpression)





=== -1652271222 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse0) #v1 = #nse0; #lhs = #v0 != #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse0) #v1 = #nse0;   #lhs = #v0 != #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse0) #v1 = #nse0;
    TypeOf                                   : #typeof( #nse0 (program NonSimpleExpression));
      ProgramSV                                : #nse0 (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse0;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 != #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    NotEquals                                : #v0 != #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 884462542 ======================================================
```
{.. #lhs = #nse0 < #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse0 < #se; ... } ...
  CopyAssignment                           : #lhs = #nse0 < #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessThan                                 : #nse0 < #se;
      ProgramSV                                : #nse0 (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== 904202580 ======================================================
```
{.. #typeof(#nse0) #v0 = #nse0; #lhs = #v0 < #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse0) #v0 = #nse0;   #lhs = #v0 < #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse0) #v0 = #nse0;
    TypeOf                                   : #typeof( #nse0 (program NonSimpleExpression));
      ProgramSV                                : #nse0 (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 < #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessThan                                 : #v0 < #se;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== 1886591247 ======================================================
```
{.. #lhs = #e < #nse0; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e < #nse0; ... } ...
  CopyAssignment                           : #lhs = #e < #nse0;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessThan                                 : #e < #nse0;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse0 (program NonSimpleExpression)





=== -362391790 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse0) #v1 = #nse0; #lhs = #v0 < #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse0) #v1 = #nse0;   #lhs = #v0 < #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse0) #v1 = #nse0;
    TypeOf                                   : #typeof( #nse0 (program NonSimpleExpression));
      ProgramSV                                : #nse0 (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse0;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 < #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessThan                                 : #v0 < #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -1756392031 ======================================================
```
{.. #lhs = #nse0 <= #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse0 <= #se; ... } ...
  CopyAssignment                           : #lhs = #nse0 <= #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessOrEquals                             : #nse0 <= #se;
      ProgramSV                                : #nse0 (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -1144450853 ======================================================
```
{.. #typeof(#nse0) #v0 = #nse0; #lhs = #v0 <= #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse0) #v0 = #nse0;   #lhs = #v0 <= #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse0) #v0 = #nse0;
    TypeOf                                   : #typeof( #nse0 (program NonSimpleExpression));
      ProgramSV                                : #nse0 (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 <= #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessOrEquals                             : #v0 <= #se;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== -1408722884 ======================================================
```
{.. #lhs = #e <= #nse0; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e <= #nse0; ... } ...
  CopyAssignment                           : #lhs = #e <= #nse0;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessOrEquals                             : #e <= #nse0;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse0 (program NonSimpleExpression)





=== 1832962191 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse0) #v1 = #nse0; #lhs = #v0 <= #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse0) #v1 = #nse0;   #lhs = #v0 <= #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse0) #v1 = #nse0;
    TypeOf                                   : #typeof( #nse0 (program NonSimpleExpression));
      ProgramSV                                : #nse0 (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse0;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 <= #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessOrEquals                             : #v0 <= #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 1585527120 ======================================================
```
{.. #lhs = #nse0 > #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse0 > #se; ... } ...
  CopyAssignment                           : #lhs = #nse0 > #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterThan                              : #nse0 > #se;
      ProgramSV                                : #nse0 (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== 1605267158 ======================================================
```
{.. #typeof(#nse0) #v0 = #nse0; #lhs = #v0 > #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse0) #v0 = #nse0;   #lhs = #v0 > #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse0) #v0 = #nse0;
    TypeOf                                   : #typeof( #nse0 (program NonSimpleExpression));
      ProgramSV                                : #nse0 (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 > #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterThan                              : #v0 > #se;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== 1299785233 ======================================================
```
{.. #lhs = #e > #nse0; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e > #nse0; ... } ...
  CopyAssignment                           : #lhs = #e > #nse0;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterThan                              : #e > #nse0;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse0 (program NonSimpleExpression)





=== 338672788 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse0) #v1 = #nse0; #lhs = #v0 > #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse0) #v1 = #nse0;   #lhs = #v0 > #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse0) #v1 = #nse0;
    TypeOf                                   : #typeof( #nse0 (program NonSimpleExpression));
      ProgramSV                                : #nse0 (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse0;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 > #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterThan                              : #v0 > #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -1498226593 ======================================================
```
{.. #lhs = #nse0 >= #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nse0 >= #se; ... } ...
  CopyAssignment                           : #lhs = #nse0 >= #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterOrEquals                          : #nse0 >= #se;
      ProgramSV                                : #nse0 (program NonSimpleExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -886285415 ======================================================
```
{.. #typeof(#nse0) #v0 = #nse0; #lhs = #v0 >= #se; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse0) #v0 = #nse0;   #lhs = #v0 >= #se; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse0) #v0 = #nse0;
    TypeOf                                   : #typeof( #nse0 (program NonSimpleExpression));
      ProgramSV                                : #nse0 (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 >= #se;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterOrEquals                          : #v0 >= #se;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== 1875127162 ======================================================
```
{.. #lhs = #e >= #nse0; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #e >= #nse0; ... } ...
  CopyAssignment                           : #lhs = #e >= #nse0;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterOrEquals                          : #e >= #nse0;
      ProgramSV                                : #e (program Expression)

      ProgramSV                                : #nse0 (program NonSimpleExpression)





=== 2091127629 ======================================================
```
{.. #typeof(#e) #v0=#e; #typeof(#nse0) #v1 = #nse0; #lhs = #v0 >= #v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   #typeof(#nse0) #v1 = #nse0;   #lhs = #v0 >= #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  LocalVariableDeclaration                 : #typeof(#nse0) #v1 = #nse0;
    TypeOf                                   : #typeof( #nse0 (program NonSimpleExpression));
      ProgramSV                                : #nse0 (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse0;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 >= #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterOrEquals                          : #v0 >= #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -1951863690 ======================================================
```
{.. #lhs=!#seBool; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = !#seBool; ... } ...
  CopyAssignment                           : #lhs = !#seBool;
    ProgramSV                                : #lhs (program LeftHandSide)

    LogicalNot                               : !#seBool;
      ProgramSV                                : #seBool (program SimpleJavaBooleanExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1678082152 ======================================================
```
{.. #lhs=!#nseBool; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = !#nseBool; ... } ...
  CopyAssignment                           : #lhs = !#nseBool;
    ProgramSV                                : #lhs (program LeftHandSide)

    LogicalNot                               : !#nseBool;
      ProgramSV                                : #nseBool (program NonSimpleExpression)





=== 2118373400 ======================================================
```
{.. boolean #v=#nseBool; #lhs=!#v; ...}
```

ContextStatementBlock                    : ..{ ..   boolean #v = #nseBool;   #lhs = !#v; ... } ...
  LocalVariableDeclaration                 : boolean #v = #nseBool;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #v = #nseBool;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nseBool (program NonSimpleExpression)



  CopyAssignment                           : #lhs = !#v;
    ProgramSV                                : #lhs (program LeftHandSide)

    LogicalNot                               : !#v;
      ProgramSV                                : #v (program Variable)





=== -157969622 ======================================================
```
{.. #lhs=#exBool0 && #nseBool1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #exBool0 && #nseBool1; ... } ...
  CopyAssignment                           : #lhs = #exBool0 && #nseBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LogicalAnd                               : #exBool0 && #nseBool1;
      ProgramSV                                : #exBool0 (program JavaBooleanExpression)

      ProgramSV                                : #nseBool1 (program NonSimpleExpression)





=== -569303937 ======================================================
```
{.. if (!#exBool0) #lhs=false; else #lhs=#nseBool1; ...}
```

ContextStatementBlock                    : ..{ ..   if (!#exBool0) #lhs = false;   else #lhs = #nseBool1; ... } ...
  If                                       : if (!#exBool0) #lhs = false; else #lhs = #nseBool1;
    LogicalNot                               : !#exBool0;
      ProgramSV                                : #exBool0 (program JavaBooleanExpression)


    Then                                     :  #lhs = false;
      CopyAssignment                           : #lhs = false;
        ProgramSV                                : #lhs (program LeftHandSide)

        BooleanLiteral                           : false;



    Else                                     : else #lhs = #nseBool1;
      CopyAssignment                           : #lhs = #nseBool1;
        ProgramSV                                : #lhs (program LeftHandSide)

        ProgramSV                                : #nseBool1 (program NonSimpleExpression)






=== -1701222581 ======================================================
```
{.. #lhs=#nseBool0 && #seBool1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nseBool0 && #seBool1; ... } ...
  CopyAssignment                           : #lhs = #nseBool0 && #seBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LogicalAnd                               : #nseBool0 && #seBool1;
      ProgramSV                                : #nseBool0 (program NonSimpleExpression)

      ProgramSV                                : #seBool1 (program SimpleJavaBooleanExpression)





=== -1563927425 ======================================================
```
{.. boolean #v0 = #nseBool0; #lhs = #v0 && #seBool1; ...}
```

ContextStatementBlock                    : ..{ ..   boolean #v0 = #nseBool0;   #lhs = #v0 && #seBool1; ... } ...
  LocalVariableDeclaration                 : boolean #v0 = #nseBool0;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #v0 = #nseBool0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nseBool0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 && #seBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LogicalAnd                               : #v0 && #seBool1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #seBool1 (program SimpleJavaBooleanExpression)





=== 1378955547 ======================================================
```
{.. #lhs=#seBool0 && #seBool1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seBool0 && #seBool1; ... } ...
  CopyAssignment                           : #lhs = #seBool0 && #seBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LogicalAnd                               : #seBool0 && #seBool1;
      ProgramSV                                : #seBool0 (program SimpleJavaBooleanExpression)

      ProgramSV                                : #seBool1 (program SimpleJavaBooleanExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -610800774 ======================================================
```
{.. #lhs=#nseBool0 & #exBool1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nseBool0 & #exBool1; ... } ...
  CopyAssignment                           : #lhs = #nseBool0 & #exBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryAnd                                : #nseBool0 & #exBool1;
      ProgramSV                                : #nseBool0 (program NonSimpleExpression)

      ProgramSV                                : #exBool1 (program JavaBooleanExpression)





=== -1838913386 ======================================================
```
{.. boolean #v0 = #nseBool0;
                boolean #v1 = #exBool1; #lhs= #v0 & #v1; ...}
```

ContextStatementBlock                    : ..{ ..   boolean #v0 = #nseBool0;   boolean #v1 = #exBool1;   #lhs = #v0 & #v1; ... } ...
  LocalVariableDeclaration                 : boolean #v0 = #nseBool0;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #v0 = #nseBool0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nseBool0 (program NonSimpleExpression)



  LocalVariableDeclaration                 : boolean #v1 = #exBool1;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #v1 = #exBool1;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #exBool1 (program JavaBooleanExpression)



  CopyAssignment                           : #lhs = #v0 & #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryAnd                                : #v0 & #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== 686996651 ======================================================
```
{.. #lhs=#seBool0 & #seBool1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seBool0 & #seBool1; ... } ...
  CopyAssignment                           : #lhs = #seBool0 & #seBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryAnd                                : #seBool0 & #seBool1;
      ProgramSV                                : #seBool0 (program SimpleJavaBooleanExpression)

      ProgramSV                                : #seBool1 (program SimpleJavaBooleanExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 413670890 ======================================================
```
{.. #lhs=#exBool0 || #nseBool1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #exBool0 || #nseBool1; ... } ...
  CopyAssignment                           : #lhs = #exBool0 || #nseBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LogicalOr                                : #exBool0 || #nseBool1;
      ProgramSV                                : #exBool0 (program JavaBooleanExpression)

      ProgramSV                                : #nseBool1 (program NonSimpleExpression)





=== 13761713 ======================================================
```
{.. if (#exBool0) #lhs=true; else #lhs=#nseBool1; ...}
```

ContextStatementBlock                    : ..{ ..   if (#exBool0) #lhs = true;   else #lhs = #nseBool1; ... } ...
  If                                       : if (#exBool0) #lhs = true; else #lhs = #nseBool1;
    ProgramSV                                : #exBool0 (program JavaBooleanExpression)

    Then                                     :  #lhs = true;
      CopyAssignment                           : #lhs = true;
        ProgramSV                                : #lhs (program LeftHandSide)

        BooleanLiteral                           : true;



    Else                                     : else #lhs = #nseBool1;
      CopyAssignment                           : #lhs = #nseBool1;
        ProgramSV                                : #lhs (program LeftHandSide)

        ProgramSV                                : #nseBool1 (program NonSimpleExpression)






=== 2057995403 ======================================================
```
{.. #lhs=#nseBool0 || #seBool1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nseBool0 || #seBool1; ... } ...
  CopyAssignment                           : #lhs = #nseBool0 || #seBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LogicalOr                                : #nseBool0 || #seBool1;
      ProgramSV                                : #nseBool0 (program NonSimpleExpression)

      ProgramSV                                : #seBool1 (program SimpleJavaBooleanExpression)





=== -2099676737 ======================================================
```
{.. boolean #v0 = #nseBool0; #lhs = #v0 || #seBool1; ...}
```

ContextStatementBlock                    : ..{ ..   boolean #v0 = #nseBool0;   #lhs = #v0 || #seBool1; ... } ...
  LocalVariableDeclaration                 : boolean #v0 = #nseBool0;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #v0 = #nseBool0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nseBool0 (program NonSimpleExpression)



  CopyAssignment                           : #lhs = #v0 || #seBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LogicalOr                                : #v0 || #seBool1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #seBool1 (program SimpleJavaBooleanExpression)





=== 843206235 ======================================================
```
{.. #lhs=#seBool0 || #seBool1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seBool0 || #seBool1; ... } ...
  CopyAssignment                           : #lhs = #seBool0 || #seBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LogicalOr                                : #seBool0 || #seBool1;
      ProgramSV                                : #seBool0 (program SimpleJavaBooleanExpression)

      ProgramSV                                : #seBool1 (program SimpleJavaBooleanExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1567067036 ======================================================
```
{.. #lhs=#nseBool0 | #exBool1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nseBool0 | #exBool1; ... } ...
  CopyAssignment                           : #lhs = #nseBool0 | #exBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryOr                                 : #nseBool0 | #exBool1;
      ProgramSV                                : #nseBool0 (program NonSimpleExpression)

      ProgramSV                                : #exBool1 (program JavaBooleanExpression)





=== -36238780 ======================================================
```
{.. boolean #v0 = #nseBool0;
                boolean #v1 = #exBool1; #lhs = #v0 | #v1; ...}
```

ContextStatementBlock                    : ..{ ..   boolean #v0 = #nseBool0;   boolean #v1 = #exBool1;   #lhs = #v0 | #v1; ... } ...
  LocalVariableDeclaration                 : boolean #v0 = #nseBool0;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #v0 = #nseBool0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nseBool0 (program NonSimpleExpression)



  LocalVariableDeclaration                 : boolean #v1 = #exBool1;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #v1 = #exBool1;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #exBool1 (program JavaBooleanExpression)



  CopyAssignment                           : #lhs = #v0 | #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryOr                                 : #v0 | #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -269269611 ======================================================
```
{.. #lhs=#seBool0 | #seBool1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seBool0 | #seBool1; ... } ...
  CopyAssignment                           : #lhs = #seBool0 | #seBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryOr                                 : #seBool0 | #seBool1;
      ProgramSV                                : #seBool0 (program SimpleJavaBooleanExpression)

      ProgramSV                                : #seBool1 (program SimpleJavaBooleanExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 864056386 ======================================================
```
{.. #lhs=#nseBool0 ^ #exBool1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nseBool0 ^ #exBool1; ... } ...
  CopyAssignment                           : #lhs = #nseBool0 ^ #exBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryXOr                                : #nseBool0 ^ #exBool1;
      ProgramSV                                : #nseBool0 (program NonSimpleExpression)

      ProgramSV                                : #exBool1 (program JavaBooleanExpression)





=== -1962272858 ======================================================
```
{.. boolean #v0 = #nseBool0;
                boolean #v1 = #exBool1; #lhs = #v0 ^ #v1; ...}
```

ContextStatementBlock                    : ..{ ..   boolean #v0 = #nseBool0;   boolean #v1 = #exBool1;   #lhs = #v0 ^ #v1; ... } ...
  LocalVariableDeclaration                 : boolean #v0 = #nseBool0;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #v0 = #nseBool0;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nseBool0 (program NonSimpleExpression)



  LocalVariableDeclaration                 : boolean #v1 = #exBool1;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #v1 = #exBool1;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #exBool1 (program JavaBooleanExpression)



  CopyAssignment                           : #lhs = #v0 ^ #v1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryXOr                                : #v0 ^ #v1;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -2133113485 ======================================================
```
{.. #lhs=#seBool0 ^ #seBool1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seBool0 ^ #seBool1; ... } ...
  CopyAssignment                           : #lhs = #seBool0 ^ #seBool1;
    ProgramSV                                : #lhs (program LeftHandSide)

    BinaryXOr                                : #seBool0 ^ #seBool1;
      ProgramSV                                : #seBool0 (program SimpleJavaBooleanExpression)

      ProgramSV                                : #seBool1 (program SimpleJavaBooleanExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1073581865 ======================================================
```
{..#nv[#e]=#e0;...}
```

ContextStatementBlock                    : ..{ ..   #nv[#e] = #e0; ... } ...
  CopyAssignment                           : #nv[#e] = #e0;
    ArrayReference                           : #nv[#e];
      ProgramSV                                : #nv (program NonSimpleExpression)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e0 (program Expression)




=== 1991355993 ======================================================
```
{..#typeof(#nv) #v0=#nv;
                #v0[#e]=#e0;
                 ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nv) #v0 = #nv;   #v0[#e] = #e0; ... } ...
  LocalVariableDeclaration                 : #typeof(#nv) #v0 = #nv;
    TypeOf                                   : #typeof( #nv (program NonSimpleExpression));
      ProgramSV                                : #nv (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nv;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nv (program NonSimpleExpression)



  CopyAssignment                           : #v0[#e] = #e0;
    ArrayReference                           : #v0[#e];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #e0 (program Expression)




=== -467274626 ======================================================
```
{..#v[#nse]=#e;...}
```

ContextStatementBlock                    : ..{ ..   #v[#nse] = #e; ... } ...
  CopyAssignment                           : #v[#nse] = #e;
    ArrayReference                           : #v[#nse];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)


    ProgramSV                                : #e (program Expression)




=== -1254614372 ======================================================
```
{..#typeof(#v) #ar1 = #v;
                #typeof(#nse) #v0=#nse;
                #ar1[#v0]=#e;
                     ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#v) #ar1 = #v;   #typeof(#nse) #v0 = #nse;   #ar1[#v0] = #e; ... } ...
  LocalVariableDeclaration                 : #typeof(#v) #ar1 = #v;
    TypeOf                                   : #typeof( #v (program Variable));
      ProgramSV                                : #v (program Variable)


    VariableSpecification                    : #ar1 = #v;
      ProgramSV                                : #ar1 (program Variable)

      ProgramSV                                : #v (program Variable)



  LocalVariableDeclaration                 : #typeof(#nse) #v0 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nse;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #ar1[#v0] = #e;
    ArrayReference                           : #ar1[#v0];
      ProgramSV                                : #ar1 (program Variable)

      ProgramSV                                : #v0 (program Variable)


    ProgramSV                                : #e (program Expression)




=== 974898693 ======================================================
```
{..#v[#se]=#nse;...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #nse; ... } ...
  CopyAssignment                           : #v[#se] = #nse;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #nse (program NonSimpleExpression)




=== -2022313843 ======================================================
```
{..#typeof(#v) #v0=#v;
                #typeof(#se) #v2=#se;
                #typeof(#nse) #v1=#nse;
                #v0[#v2]=#v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#v) #v0 = #v;   #typeof(#se) #v2 = #se;   #typeof(#nse) #v1 = #nse;   #v0[#v2] = #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#v) #v0 = #v;
    TypeOf                                   : #typeof( #v (program Variable));
      ProgramSV                                : #v (program Variable)


    VariableSpecification                    : #v0 = #v;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v (program Variable)



  LocalVariableDeclaration                 : #typeof(#se) #v2 = #se;
    TypeOf                                   : #typeof( #se (program SimpleExpression));
      ProgramSV                                : #se (program SimpleExpression)


    VariableSpecification                    : #v2 = #se;
      ProgramSV                                : #v2 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #v0[#v2] = #v1;
    ArrayReference                           : #v0[#v2];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v2 (program Variable)


    ProgramSV                                : #v1 (program Variable)




=== 974898693 ======================================================
```
{..#v[#se]=#nse;...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #nse; ... } ...
  CopyAssignment                           : #v[#se] = #nse;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #nse (program NonSimpleExpression)




=== -2022313843 ======================================================
```
{..#typeof(#v) #v0=#v;
                #typeof(#se) #v2=#se;
                #typeof(#nse) #v1=#nse;
                #v0[#v2]=#v1; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#v) #v0 = #v;   #typeof(#se) #v2 = #se;   #typeof(#nse) #v1 = #nse;   #v0[#v2] = #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#v) #v0 = #v;
    TypeOf                                   : #typeof( #v (program Variable));
      ProgramSV                                : #v (program Variable)


    VariableSpecification                    : #v0 = #v;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v (program Variable)



  LocalVariableDeclaration                 : #typeof(#se) #v2 = #se;
    TypeOf                                   : #typeof( #se (program SimpleExpression));
      ProgramSV                                : #se (program SimpleExpression)


    VariableSpecification                    : #v2 = #se;
      ProgramSV                                : #v2 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #v0[#v2] = #v1;
    ArrayReference                           : #v0[#v2];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v2 (program Variable)


    ProgramSV                                : #v1 (program Variable)




=== -1113019890 ======================================================
```
{..#v=#nv[#e];...}
```

ContextStatementBlock                    : ..{ ..   #v = #nv[#e]; ... } ...
  CopyAssignment                           : #v = #nv[#e];
    ProgramSV                                : #v (program Variable)

    ArrayReference                           : #nv[#e];
      ProgramSV                                : #nv (program NonSimpleExpression)

      ProgramSV                                : #e (program Expression)





=== 1716731256 ======================================================
```
{..#typeof(#nv) #v0=#nv;
                #v=#v0[#e];
                    ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nv) #v0 = #nv;   #v = #v0[#e]; ... } ...
  LocalVariableDeclaration                 : #typeof(#nv) #v0 = #nv;
    TypeOf                                   : #typeof( #nv (program NonSimpleExpression));
      ProgramSV                                : #nv (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nv;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nv (program NonSimpleExpression)



  CopyAssignment                           : #v = #v0[#e];
    ProgramSV                                : #v (program Variable)

    ArrayReference                           : #v0[#e];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)





=== 1914481079 ======================================================
```
{..#v=#v0[#nse];...}
```

ContextStatementBlock                    : ..{ ..   #v = #v0[#nse]; ... } ...
  CopyAssignment                           : #v = #v0[#nse];
    ProgramSV                                : #v (program Variable)

    ArrayReference                           : #v0[#nse];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)





=== 648653711 ======================================================
```
{..#typeof(#v0) #ar1 = #v0;
                #typeof(#nse) #v1=#nse;
                #v=#ar1[#v1];
                    ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#v0) #ar1 = #v0;   #typeof(#nse) #v1 = #nse;   #v = #ar1[#v1]; ... } ...
  LocalVariableDeclaration                 : #typeof(#v0) #ar1 = #v0;
    TypeOf                                   : #typeof( #v0 (program Variable));
      ProgramSV                                : #v0 (program Variable)


    VariableSpecification                    : #ar1 = #v0;
      ProgramSV                                : #ar1 (program Variable)

      ProgramSV                                : #v0 (program Variable)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #v = #ar1[#v1];
    ProgramSV                                : #v (program Variable)

    ArrayReference                           : #ar1[#v1];
      ProgramSV                                : #ar1 (program Variable)

      ProgramSV                                : #v1 (program Variable)





=== -2031305109 ======================================================
```
{..#v=#nv.#length; ...}
```

ContextStatementBlock                    : ..{ ..   #v = #nv.#length; ... } ...
  CopyAssignment                           : #v = #nv.#length;
    ProgramSV                                : #v (program Variable)

    SchematicFieldReference                  : #nv.#length;
      ProgramSV                                : #nv (program NonSimpleExpression)

      ProgramSV                                : #length (program ArrayLength)





=== 847297023 ======================================================
```
{..#typeof(#nv) #v0=#nv; #v=#v0.#length; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nv) #v0 = #nv;   #v = #v0.#length; ... } ...
  LocalVariableDeclaration                 : #typeof(#nv) #v0 = #nv;
    TypeOf                                   : #typeof( #nv (program NonSimpleExpression));
      ProgramSV                                : #nv (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nv;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nv (program NonSimpleExpression)



  CopyAssignment                           : #v = #v0.#length;
    ProgramSV                                : #v (program Variable)

    SchematicFieldReference                  : #v0.#length;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #length (program ArrayLength)





=== 1217533954 ======================================================
```
{..#nv.#attribute=#e;...}
```

ContextStatementBlock                    : ..{ ..   #nv.#attribute = #e; ... } ...
  CopyAssignment                           : #nv.#attribute = #e;
    SchematicFieldReference                  : #nv.#attribute;
      ProgramSV                                : #nv (program NonSimpleExpression)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== 1468018674 ======================================================
```
{..#typeof(#nv) #v0=#nv; #v0.#attribute=#e;...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nv) #v0 = #nv;   #v0.#attribute = #e; ... } ...
  LocalVariableDeclaration                 : #typeof(#nv) #v0 = #nv;
    TypeOf                                   : #typeof( #nv (program NonSimpleExpression));
      ProgramSV                                : #nv (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nv;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nv (program NonSimpleExpression)



  CopyAssignment                           : #v0.#attribute = #e;
    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)


    ProgramSV                                : #e (program Expression)




=== -679696043 ======================================================
```
{.. #v=#nv.#attribute; ...}
```

ContextStatementBlock                    : ..{ ..   #v = #nv.#attribute; ... } ...
  CopyAssignment                           : #v = #nv.#attribute;
    ProgramSV                                : #v (program Variable)

    SchematicFieldReference                  : #nv.#attribute;
      ProgramSV                                : #nv (program NonSimpleExpression)

      ProgramSV                                : #attribute (program LeftHandSide)





=== -1195689165 ======================================================
```
{..#typeof(#nv) #v0=#nv; #v=#v0.#attribute;...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nv) #v0 = #nv;   #v = #v0.#attribute; ... } ...
  LocalVariableDeclaration                 : #typeof(#nv) #v0 = #nv;
    TypeOf                                   : #typeof( #nv (program NonSimpleExpression));
      ProgramSV                                : #nv (program NonSimpleExpression)


    VariableSpecification                    : #v0 = #nv;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #nv (program NonSimpleExpression)



  CopyAssignment                           : #v = #v0.#attribute;
    ProgramSV                                : #v (program Variable)

    SchematicFieldReference                  : #v0.#attribute;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #attribute (program LeftHandSide)





=== -1972515910 ======================================================
```
{.. #v.#a=#nse; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#a = #nse; ... } ...
  CopyAssignment                           : #v.#a = #nse;
    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)


    ProgramSV                                : #nse (program NonSimpleExpression)




=== 1292860114 ======================================================
```
{..
                #typeof(#nse) #v1=#nse;
                #v.#a=#v1;...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v1 = #nse;   #v.#a = #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #v.#a = #v1;
    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)


    ProgramSV                                : #v1 (program Variable)




=== -1972515910 ======================================================
```
{.. #v.#a=#nse; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#a = #nse; ... } ...
  CopyAssignment                           : #v.#a = #nse;
    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)


    ProgramSV                                : #nse (program NonSimpleExpression)




=== -618588590 ======================================================
```
{.. #typeof(#v) #v0=#v;
                #typeof(#nse) #v1=#nse;
                 #v0.#a=#v1;...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#v) #v0 = #v;   #typeof(#nse) #v1 = #nse;   #v0.#a = #v1; ... } ...
  LocalVariableDeclaration                 : #typeof(#v) #v0 = #v;
    TypeOf                                   : #typeof( #v (program Variable));
      ProgramSV                                : #v (program Variable)


    VariableSpecification                    : #v0 = #v;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #v (program Variable)



  LocalVariableDeclaration                 : #typeof(#nse) #v1 = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v1 = #nse;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #v0.#a = #v1;
    SchematicFieldReference                  : #v0.#a;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #a (program Variable)


    ProgramSV                                : #v1 (program Variable)




=== -455043871 ======================================================
```
{.. #v[#se]=#se0; ...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #se0; ... } ...
  CopyAssignment                           : #v[#se] = #se0;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1630120614 ======================================================
```
{.. assert false : "Access permission check-point (write)."; ...}
```

ContextStatementBlock                    : ..{ ..   assert false :   "Access permission check-point (write)."; ... } ...
  Assert                                   : assert false : "Access permission check-point (write).";
    BooleanLiteral                           : false;

    StringLiteral                            : "Access permission check-point (write).";




=== -2085472415 ======================================================
```
{.. throw new java.lang.NullPointerException(); ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.NullPointerException(); ... } ...
  Throw                                    : throw new java.lang.NullPointerException();
    New                                      : new java.lang.NullPointerException();
      SchemaTypeReference                      : java.lang.NullPointerException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : NullPointerException






=== -1035606890 ======================================================
```
{.. throw new java.lang.ArrayIndexOutOfBoundsException(); ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArrayIndexOutOfBoundsException(); ... } ...
  Throw                                    : throw new java.lang.ArrayIndexOutOfBoundsException();
    New                                      : new java.lang.ArrayIndexOutOfBoundsException();
      SchemaTypeReference                      : java.lang.ArrayIndexOutOfBoundsException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArrayIndexOutOfBoundsException






=== 1939700041 ======================================================
```
{.. throw new java.lang.ArrayStoreException(); ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArrayStoreException(); ... } ...
  Throw                                    : throw new java.lang.ArrayStoreException();
    New                                      : new java.lang.ArrayStoreException();
      SchemaTypeReference                      : java.lang.ArrayStoreException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArrayStoreException






=== -455043871 ======================================================
```
{.. #v[#se]=#se0; ...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #se0; ... } ...
  CopyAssignment                           : #v[#se] = #se0;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -2085472415 ======================================================
```
{.. throw new java.lang.NullPointerException(); ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.NullPointerException(); ... } ...
  Throw                                    : throw new java.lang.NullPointerException();
    New                                      : new java.lang.NullPointerException();
      SchemaTypeReference                      : java.lang.NullPointerException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : NullPointerException






=== -1035606890 ======================================================
```
{.. throw new java.lang.ArrayIndexOutOfBoundsException(); ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArrayIndexOutOfBoundsException(); ... } ...
  Throw                                    : throw new java.lang.ArrayIndexOutOfBoundsException();
    New                                      : new java.lang.ArrayIndexOutOfBoundsException();
      SchemaTypeReference                      : java.lang.ArrayIndexOutOfBoundsException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArrayIndexOutOfBoundsException






=== 1939700041 ======================================================
```
{.. throw new java.lang.ArrayStoreException(); ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArrayStoreException(); ... } ...
  Throw                                    : throw new java.lang.ArrayStoreException();
    New                                      : new java.lang.ArrayStoreException();
      SchemaTypeReference                      : java.lang.ArrayStoreException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArrayStoreException






=== -455043871 ======================================================
```
{.. #v[#se]=#se0; ...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #se0; ... } ...
  CopyAssignment                           : #v[#se] = #se0;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -455043871 ======================================================
```
{.. #v[#se]=#se0; ...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #se0; ... } ...
  CopyAssignment                           : #v[#se] = #se0;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -455043871 ======================================================
```
{.. #v[#se]=#se0; ...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #se0; ... } ...
  CopyAssignment                           : #v[#se] = #se0;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -455043871 ======================================================
```
{.. #v[#se]=#se0; ...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #se0; ... } ...
  CopyAssignment                           : #v[#se] = #se0;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 41521127 ======================================================
```
{..#v[#se]=#se0;...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #se0; ... } ...
  CopyAssignment                           : #v[#se] = #se0;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1630120614 ======================================================
```
{.. assert false : "Access permission check-point (write)."; ...}
```

ContextStatementBlock                    : ..{ ..   assert false :   "Access permission check-point (write)."; ... } ...
  Assert                                   : assert false : "Access permission check-point (write).";
    BooleanLiteral                           : false;

    StringLiteral                            : "Access permission check-point (write).";




=== 1648921013 ======================================================
```
{..
                    throw new java.lang.NullPointerException();
                    ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.NullPointerException(); ... } ...
  Throw                                    : throw new java.lang.NullPointerException();
    New                                      : new java.lang.NullPointerException();
      SchemaTypeReference                      : java.lang.NullPointerException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : NullPointerException






=== -1035606890 ======================================================
```
{.. throw new java.lang.ArrayIndexOutOfBoundsException(); ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArrayIndexOutOfBoundsException(); ... } ...
  Throw                                    : throw new java.lang.ArrayIndexOutOfBoundsException();
    New                                      : new java.lang.ArrayIndexOutOfBoundsException();
      SchemaTypeReference                      : java.lang.ArrayIndexOutOfBoundsException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArrayIndexOutOfBoundsException






=== 41521127 ======================================================
```
{..#v[#se]=#se0;...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #se0; ... } ...
  CopyAssignment                           : #v[#se] = #se0;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1648921013 ======================================================
```
{..
                    throw new java.lang.NullPointerException();
                    ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.NullPointerException(); ... } ...
  Throw                                    : throw new java.lang.NullPointerException();
    New                                      : new java.lang.NullPointerException();
      SchemaTypeReference                      : java.lang.NullPointerException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : NullPointerException






=== -1035606890 ======================================================
```
{.. throw new java.lang.ArrayIndexOutOfBoundsException(); ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArrayIndexOutOfBoundsException(); ... } ...
  Throw                                    : throw new java.lang.ArrayIndexOutOfBoundsException();
    New                                      : new java.lang.ArrayIndexOutOfBoundsException();
      SchemaTypeReference                      : java.lang.ArrayIndexOutOfBoundsException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArrayIndexOutOfBoundsException






=== 41521127 ======================================================
```
{..#v[#se]=#se0;...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #se0; ... } ...
  CopyAssignment                           : #v[#se] = #se0;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 41521127 ======================================================
```
{..#v[#se]=#se0;...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #se0; ... } ...
  CopyAssignment                           : #v[#se] = #se0;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 41521127 ======================================================
```
{..#v[#se]=#se0;...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #se0; ... } ...
  CopyAssignment                           : #v[#se] = #se0;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 41521127 ======================================================
```
{..#v[#se]=#se0;...}
```

ContextStatementBlock                    : ..{ ..   #v[#se] = #se0; ... } ...
  CopyAssignment                           : #v[#se] = #se0;
    ArrayReference                           : #v[#se];
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #se (program SimpleExpression)


    ProgramSV                                : #se0 (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1633503643 ======================================================
```
{.. #v = #v0[#se]; ...}
```

ContextStatementBlock                    : ..{ ..   #v = #v0[#se]; ... } ...
  CopyAssignment                           : #v = #v0[#se];
    ProgramSV                                : #v (program Variable)

    ArrayReference                           : #v0[#se];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -960045593 ======================================================
```
{.. assert false : "Access permission check-point (read)."; ...}
```

ContextStatementBlock                    : ..{ ..   assert false :   "Access permission check-point (read)."; ... } ...
  Assert                                   : assert false : "Access permission check-point (read).";
    BooleanLiteral                           : false;

    StringLiteral                            : "Access permission check-point (read).";




=== -486658379 ======================================================
```
{..
                    throw new java.lang.NullPointerException();
                        ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.NullPointerException(); ... } ...
  Throw                                    : throw new java.lang.NullPointerException();
    New                                      : new java.lang.NullPointerException();
      SchemaTypeReference                      : java.lang.NullPointerException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : NullPointerException






=== 1905151466 ======================================================
```
{..
                    throw new java.lang.ArrayIndexOutOfBoundsException();
                    ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArrayIndexOutOfBoundsException(); ... } ...
  Throw                                    : throw new java.lang.ArrayIndexOutOfBoundsException();
    New                                      : new java.lang.ArrayIndexOutOfBoundsException();
      SchemaTypeReference                      : java.lang.ArrayIndexOutOfBoundsException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArrayIndexOutOfBoundsException






=== -1633503643 ======================================================
```
{.. #v = #v0[#se]; ...}
```

ContextStatementBlock                    : ..{ ..   #v = #v0[#se]; ... } ...
  CopyAssignment                           : #v = #v0[#se];
    ProgramSV                                : #v (program Variable)

    ArrayReference                           : #v0[#se];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1633503643 ======================================================
```
{.. #v = #v0[#se]; ...}
```

ContextStatementBlock                    : ..{ ..   #v = #v0[#se]; ... } ...
  CopyAssignment                           : #v = #v0[#se];
    ProgramSV                                : #v (program Variable)

    ArrayReference                           : #v0[#se];
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1394793410 ======================================================
```
{.. #v0 = #v.#a; ...}
```

ContextStatementBlock                    : ..{ ..   #v0 = #v.#a; ... } ...
  CopyAssignment                           : #v0 = #v.#a;
    ProgramSV                                : #v0 (program Variable)

    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -960045593 ======================================================
```
{.. assert false : "Access permission check-point (read)."; ...}
```

ContextStatementBlock                    : ..{ ..   assert false :   "Access permission check-point (read)."; ... } ...
  Assert                                   : assert false : "Access permission check-point (read).";
    BooleanLiteral                           : false;

    StringLiteral                            : "Access permission check-point (read).";




=== 1355038695 ======================================================
```
{..throw new java.lang.NullPointerException();...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.NullPointerException(); ... } ...
  Throw                                    : throw new java.lang.NullPointerException();
    New                                      : new java.lang.NullPointerException();
      SchemaTypeReference                      : java.lang.NullPointerException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : NullPointerException






=== 1394793410 ======================================================
```
{.. #v0 = #v.#a; ...}
```

ContextStatementBlock                    : ..{ ..   #v0 = #v.#a; ... } ...
  CopyAssignment                           : #v0 = #v.#a;
    ProgramSV                                : #v0 (program Variable)

    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -960045593 ======================================================
```
{.. assert false : "Access permission check-point (read)."; ...}
```

ContextStatementBlock                    : ..{ ..   assert false :   "Access permission check-point (read)."; ... } ...
  Assert                                   : assert false : "Access permission check-point (read).";
    BooleanLiteral                           : false;

    StringLiteral                            : "Access permission check-point (read).";




=== 2066952077 ======================================================
```
{.. #v0 = #v.#length; ...}
```

ContextStatementBlock                    : ..{ ..   #v0 = #v.#length; ... } ...
  CopyAssignment                           : #v0 = #v.#length;
    ProgramSV                                : #v0 (program Variable)

    SchematicFieldReference                  : #v.#length;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #length (program ArrayLength)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1355038695 ======================================================
```
{..throw new java.lang.NullPointerException();...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.NullPointerException(); ... } ...
  Throw                                    : throw new java.lang.NullPointerException();
    New                                      : new java.lang.NullPointerException();
      SchemaTypeReference                      : java.lang.NullPointerException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : NullPointerException






=== 2066952077 ======================================================
```
{.. #v0 = #v.#length; ...}
```

ContextStatementBlock                    : ..{ ..   #v0 = #v.#length; ... } ...
  CopyAssignment                           : #v0 = #v.#length;
    ProgramSV                                : #v0 (program Variable)

    SchematicFieldReference                  : #v.#length;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #length (program ArrayLength)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1394793410 ======================================================
```
{.. #v0 = #v.#a; ...}
```

ContextStatementBlock                    : ..{ ..   #v0 = #v.#a; ... } ...
  CopyAssignment                           : #v0 = #v.#a;
    ProgramSV                                : #v0 (program Variable)

    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1394793410 ======================================================
```
{.. #v0 = #v.#a; ...}
```

ContextStatementBlock                    : ..{ ..   #v0 = #v.#a; ... } ...
  CopyAssignment                           : #v0 = #v.#a;
    ProgramSV                                : #v0 (program Variable)

    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 2066952077 ======================================================
```
{.. #v0 = #v.#length; ...}
```

ContextStatementBlock                    : ..{ ..   #v0 = #v.#length; ... } ...
  CopyAssignment                           : #v0 = #v.#length;
    ProgramSV                                : #v0 (program Variable)

    SchematicFieldReference                  : #v.#length;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #length (program ArrayLength)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1394793410 ======================================================
```
{.. #v0 = #v.#a; ...}
```

ContextStatementBlock                    : ..{ ..   #v0 = #v.#a; ... } ...
  CopyAssignment                           : #v0 = #v.#a;
    ProgramSV                                : #v0 (program Variable)

    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1394793410 ======================================================
```
{.. #v0 = #v.#a; ...}
```

ContextStatementBlock                    : ..{ ..   #v0 = #v.#a; ... } ...
  CopyAssignment                           : #v0 = #v.#a;
    ProgramSV                                : #v0 (program Variable)

    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 2066952077 ======================================================
```
{.. #v0 = #v.#length; ...}
```

ContextStatementBlock                    : ..{ ..   #v0 = #v.#length; ... } ...
  CopyAssignment                           : #v0 = #v.#length;
    ProgramSV                                : #v0 (program Variable)

    SchematicFieldReference                  : #v.#length;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #length (program ArrayLength)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -152415040 ======================================================
```
{.. #v.#a=#se; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#a = #se; ... } ...
  CopyAssignment                           : #v.#a = #se;
    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)


    ProgramSV                                : #se (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1630120614 ======================================================
```
{.. assert false : "Access permission check-point (write)."; ...}
```

ContextStatementBlock                    : ..{ ..   assert false :   "Access permission check-point (write)."; ... } ...
  Assert                                   : assert false : "Access permission check-point (write).";
    BooleanLiteral                           : false;

    StringLiteral                            : "Access permission check-point (write).";




=== 1355038695 ======================================================
```
{..throw new java.lang.NullPointerException();...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.NullPointerException(); ... } ...
  Throw                                    : throw new java.lang.NullPointerException();
    New                                      : new java.lang.NullPointerException();
      SchemaTypeReference                      : java.lang.NullPointerException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : NullPointerException






=== -152415040 ======================================================
```
{.. #v.#a=#se; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#a = #se; ... } ...
  CopyAssignment                           : #v.#a = #se;
    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)


    ProgramSV                                : #se (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1630120614 ======================================================
```
{.. assert false : "Access permission check-point (write)."; ...}
```

ContextStatementBlock                    : ..{ ..   assert false :   "Access permission check-point (write)."; ... } ...
  Assert                                   : assert false : "Access permission check-point (write).";
    BooleanLiteral                           : false;

    StringLiteral                            : "Access permission check-point (write).";




=== -152415040 ======================================================
```
{.. #v.#a=#se; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#a = #se; ... } ...
  CopyAssignment                           : #v.#a = #se;
    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)


    ProgramSV                                : #se (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -152415040 ======================================================
```
{.. #v.#a=#se; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#a = #se; ... } ...
  CopyAssignment                           : #v.#a = #se;
    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)


    ProgramSV                                : #se (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -152415040 ======================================================
```
{.. #v.#a=#se; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#a = #se; ... } ...
  CopyAssignment                           : #v.#a = #se;
    SchematicFieldReference                  : #v.#a;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #a (program Variable)


    ProgramSV                                : #se (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 3701618 ======================================================
```
{#s}
```

StatementBlock                           : {   #s }
  ProgramSV                                : #s (program Statement)



=== 3701618 ======================================================
```
{#s}
```

StatementBlock                           : {   #s }
  ProgramSV                                : #s (program Statement)



=== 3701618 ======================================================
```
{#s}
```

StatementBlock                           : {   #s }
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== 286636442 ======================================================
```
{.. #s ...}
```

ContextStatementBlock                    : ..{ ..   #s ... } ...
  ProgramSV                                : #s (program Statement)



=== -1416012394 ======================================================
```
{.. @(#sv) = #se; ...}
```

ContextStatementBlock                    : ..{ ..   @(#sv) = #se; ... } ...
  CopyAssignment                           : @(#sv) = #se;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #se (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1339090352 ======================================================
```
{.. assert false : "Access permission check-point (static write)."; ...}
```

ContextStatementBlock                    : ..{ ..   assert false :   "Access permission check-point (static write)."; ... } ...
  Assert                                   : assert false : "Access permission check-point (static write).";
    BooleanLiteral                           : false;

    StringLiteral                            : "Access permission check-point (static write).";




=== 858555639 ======================================================
```
{.. @(#v.#sv) = #se; ...}
```

ContextStatementBlock                    : ..{ ..   @(#v.#sv) = #se; ... } ...
  CopyAssignment                           : @(#v.#sv) = #se;
    PassiveExpression                        : @(#v.#sv);
      SchematicFieldReference                  : #v.#sv;
        ProgramSV                                : #v (program Variable)

        ProgramSV                                : #sv (program StaticVariable)



    ProgramSV                                : #se (program SimpleExpression)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1339090352 ======================================================
```
{.. assert false : "Access permission check-point (static write)."; ...}
```

ContextStatementBlock                    : ..{ ..   assert false :   "Access permission check-point (static write)."; ... } ...
  Assert                                   : assert false : "Access permission check-point (static write).";
    BooleanLiteral                           : false;

    StringLiteral                            : "Access permission check-point (static write).";




=== 1668988874 ======================================================
```
{.. #v0 = @(#sv); ...}
```

ContextStatementBlock                    : ..{ ..   #v0 = @(#sv); ... } ...
  CopyAssignment                           : #v0 = @(#sv);
    ProgramSV                                : #v0 (program Variable)

    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -2077812323 ======================================================
```
{.. assert false : "Access permission check-point (static read)."; ...}
```

ContextStatementBlock                    : ..{ ..   assert false :   "Access permission check-point (static read)."; ... } ...
  Assert                                   : assert false : "Access permission check-point (static read).";
    BooleanLiteral                           : false;

    StringLiteral                            : "Access permission check-point (static read).";




=== 1220845033 ======================================================
```
{.. #loc = @(#v.#sv); ...}
```

ContextStatementBlock                    : ..{ ..   #loc = @(#v.#sv); ... } ...
  CopyAssignment                           : #loc = @(#v.#sv);
    ProgramSV                                : #loc (program Variable)

    PassiveExpression                        : @(#v.#sv);
      SchematicFieldReference                  : #v.#sv;
        ProgramSV                                : #v (program Variable)

        ProgramSV                                : #sv (program StaticVariable)






=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -2077812323 ======================================================
```
{.. assert false : "Access permission check-point (static read)."; ...}
```

ContextStatementBlock                    : ..{ ..   assert false :   "Access permission check-point (static read)."; ... } ...
  Assert                                   : assert false : "Access permission check-point (static read).";
    BooleanLiteral                           : false;

    StringLiteral                            : "Access permission check-point (static read).";




=== 1530179003 ======================================================
```
{.. #se.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #se.#mn(#elist); ... } ...
  MethodReference                          : #se.#mn(#elist);
    ProgramSV                                : #se (program SimpleExpression)

    ProgramSV                                : #mn (program MethodName)

    ProgramSV                                : #elist (program Expression)




=== 431991772 ======================================================
```
{..
                     #method-call(#v0, #se.#mn(#elist));
                    ...}
```

ContextStatementBlock                    : ..{ ..   method-call(#se.#mn(#elist)) ... } ...
  MethodCall                               : method-call( #se.#mn(#elist););
    MethodReference                          : #se.#mn(#elist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 530275030 ======================================================
```
{.. #lhs = #se.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #se.#mn(#elist); ... } ...
  CopyAssignment                           : #lhs = #se.#mn(#elist);
    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #se.#mn(#elist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 1743496870 ======================================================
```
{..
                    #typeof(#lhs) #v0;
                          #method-call(#v0, #se.#mn(#elist));
                        #lhs = #v0;
                      ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#lhs) #v0;   method-call(#se.#mn(#elist))   #lhs = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  MethodCall                               : method-call( #se.#mn(#elist););
    MethodReference                          : #se.#mn(#elist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== -2073708511 ======================================================
```
{.. #t.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #t.#mn(#elist); ... } ...
  MethodReference                          : #t.#mn(#elist);
    ProgramSV                                : #t (program Type)

    ProgramSV                                : #mn (program MethodName)

    ProgramSV                                : #elist (program Expression)




=== 1895885391 ======================================================
```
{..  #method-call(#t.#mn(#elist)); ...}
```

ContextStatementBlock                    : ..{ ..   method-call(#t.#mn(#elist)) ... } ...
  MethodCall                               : method-call( #t.#mn(#elist););
    MethodReference                          : #t.#mn(#elist);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 2050456486 ======================================================
```
{.. #lhs = #t.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #t.#mn(#elist); ... } ...
  CopyAssignment                           : #lhs = #t.#mn(#elist);
    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #t.#mn(#elist);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== -189395088 ======================================================
```
{..  #typeof(#lhs) #v0;
                #method-call(#v0, #t.#mn(#elist));
                #lhs = #v0; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#lhs) #v0;   method-call(#t.#mn(#elist))   #lhs = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  MethodCall                               : method-call( #t.#mn(#elist););
    MethodReference                          : #t.#mn(#elist);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== -1412444147 ======================================================
```
{.#ex.. #lhs=#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #mn(#elist); ... } ...
  ProgramSV                                : #ex (program ExecutionContext)

  CopyAssignment                           : #lhs = #mn(#elist);
    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #mn(#elist);
      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 1980530793 ======================================================
```
{.. #typeof(#lhs) #v0;
                   #method-call(#ex, #v0, #mn(#elist));
                   #lhs = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#lhs) #v0;   method-call(#mn(#elist))   #lhs = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  MethodCall                               : method-call( #mn(#elist););
    MethodReference                          : #mn(#elist);
      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== 1618436916 ======================================================
```
{.. #mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #mn(#elist); ... } ...
  MethodReference                          : #mn(#elist);
    ProgramSV                                : #mn (program MethodName)

    ProgramSV                                : #elist (program Expression)




=== -2056380982 ======================================================
```
{..
                #method-call(#mn(#elist)); ...}
```

ContextStatementBlock                    : ..{ ..   method-call(#mn(#elist)) ... } ...
  MethodCall                               : method-call( #mn(#elist););
    MethodReference                          : #mn(#elist);
      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 1530179003 ======================================================
```
{.. #se.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #se.#mn(#elist); ... } ...
  MethodReference                          : #se.#mn(#elist);
    ProgramSV                                : #se (program SimpleExpression)

    ProgramSV                                : #mn (program MethodName)

    ProgramSV                                : #elist (program Expression)




=== 2010717901 ======================================================
```
{..
                    #static-initialisation(#se.#mn(#elist));
                    #method-call(#v0, #se.#mn(#elist));
                    ...}
```

ContextStatementBlock                    : ..{ ..   static-initialisation(#se.#mn(#elist))   method-call(#se.#mn(#elist)) ... } ...
  StaticInitialisation                     : static-initialisation( #se.#mn(#elist););
    MethodReference                          : #se.#mn(#elist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  MethodCall                               : method-call( #se.#mn(#elist););
    MethodReference                          : #se.#mn(#elist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 530275030 ======================================================
```
{.. #lhs = #se.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #se.#mn(#elist); ... } ...
  CopyAssignment                           : #lhs = #se.#mn(#elist);
    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #se.#mn(#elist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 1661362867 ======================================================
```
{..
                    #static-initialisation(#se.#mn(#elist));
                    #typeof(#lhs) #v0;
                          #method-call(#v0, #se.#mn(#elist));
                        #lhs = #v0;
                      ...}
```

ContextStatementBlock                    : ..{ ..   static-initialisation(#se.#mn(#elist))   #typeof(#lhs) #v0;   method-call(#se.#mn(#elist))   #lhs = #v0; ... } ...
  StaticInitialisation                     : static-initialisation( #se.#mn(#elist););
    MethodReference                          : #se.#mn(#elist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  MethodCall                               : method-call( #se.#mn(#elist););
    MethodReference                          : #se.#mn(#elist);
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== -2073708511 ======================================================
```
{.. #t.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #t.#mn(#elist); ... } ...
  MethodReference                          : #t.#mn(#elist);
    ProgramSV                                : #t (program Type)

    ProgramSV                                : #mn (program MethodName)

    ProgramSV                                : #elist (program Expression)




=== -1822735878 ======================================================
```
{..  #static-initialisation(#t.#mn(#elist));
                #method-call(#t.#mn(#elist)); ...}
```

ContextStatementBlock                    : ..{ ..   static-initialisation(#t.#mn(#elist))   method-call(#t.#mn(#elist)) ... } ...
  StaticInitialisation                     : static-initialisation( #t.#mn(#elist););
    MethodReference                          : #t.#mn(#elist);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  MethodCall                               : method-call( #t.#mn(#elist););
    MethodReference                          : #t.#mn(#elist);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 2050456486 ======================================================
```
{.. #lhs = #t.#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #t.#mn(#elist); ... } ...
  CopyAssignment                           : #lhs = #t.#mn(#elist);
    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #t.#mn(#elist);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 1098860699 ======================================================
```
{..  #static-initialisation(#t.#mn(#elist));
                #typeof(#lhs) #v0;
                    #method-call(#v0, #t.#mn(#elist));
                    #lhs = #v0; ...}
```

ContextStatementBlock                    : ..{ ..   static-initialisation(#t.#mn(#elist))   #typeof(#lhs) #v0;   method-call(#t.#mn(#elist))   #lhs = #v0; ... } ...
  StaticInitialisation                     : static-initialisation( #t.#mn(#elist););
    MethodReference                          : #t.#mn(#elist);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  MethodCall                               : method-call( #t.#mn(#elist););
    MethodReference                          : #t.#mn(#elist);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== -1412444147 ======================================================
```
{.#ex.. #lhs=#mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #mn(#elist); ... } ...
  ProgramSV                                : #ex (program ExecutionContext)

  CopyAssignment                           : #lhs = #mn(#elist);
    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #mn(#elist);
      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== -645127119 ======================================================
```
{.. #static-initialisation(#mn(#elist));
                #typeof(#lhs) #v0;
                            #method-call(#ex, #v0, #mn(#elist));
                            #lhs = #v0;
                         ...}
```

ContextStatementBlock                    : ..{ ..   static-initialisation(#mn(#elist))   #typeof(#lhs) #v0;   method-call(#mn(#elist))   #lhs = #v0; ... } ...
  StaticInitialisation                     : static-initialisation( #mn(#elist););
    MethodReference                          : #mn(#elist);
      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  MethodCall                               : method-call( #mn(#elist););
    MethodReference                          : #mn(#elist);
      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== 1035191004 ======================================================
```
{.#ex.. #mn(#elist); ...}
```

ContextStatementBlock                    : ..{ ..   #mn(#elist); ... } ...
  ProgramSV                                : #ex (program ExecutionContext)

  MethodReference                          : #mn(#elist);
    ProgramSV                                : #mn (program MethodName)

    ProgramSV                                : #elist (program Expression)




=== -162756502 ======================================================
```
{..
                #static-initialisation(#mn(#elist));
                #method-call(#ex, #mn(#elist)); ...}
```

ContextStatementBlock                    : ..{ ..   static-initialisation(#mn(#elist))   method-call(#mn(#elist)) ... } ...
  StaticInitialisation                     : static-initialisation( #mn(#elist););
    MethodReference                          : #mn(#elist);
      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  MethodCall                               : method-call( #mn(#elist););
    MethodReference                          : #mn(#elist);
      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== -1843871907 ======================================================
```
{.#ex.. @(#mn(#elist)); ...}
```

ContextStatementBlock                    : ..{ ..   @(#mn(#elist)); ... } ...
  ProgramSV                                : #ex (program ExecutionContext)

  PassiveExpression                        : @(#mn(#elist));
    MethodReference                          : #mn(#elist);
      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== -78951610 ======================================================
```
{.. #method-call(#ex, #mn(#elist)); ...}
```

ContextStatementBlock                    : ..{ ..   method-call(#mn(#elist)) ... } ...
  MethodCall                               : method-call( #mn(#elist););
    MethodReference                          : #mn(#elist);
      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 1031554664 ======================================================
```
{.. @(#t.#mn(#elist)); ...}
```

ContextStatementBlock                    : ..{ ..   @(#t.#mn(#elist)); ... } ...
  PassiveExpression                        : @(#t.#mn(#elist));
    MethodReference                          : #t.#mn(#elist);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 2128105241 ======================================================
```
{.. #method-call(#t.#mn(#elist)); ...}
```

ContextStatementBlock                    : ..{ ..   method-call(#t.#mn(#elist)) ... } ...
  MethodCall                               : method-call( #t.#mn(#elist););
    MethodReference                          : #t.#mn(#elist);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)





=== 612096140 ======================================================
```
{.#ex.. #lhs=@(#mn(#elist)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = @(#mn(#elist)); ... } ...
  ProgramSV                                : #ex (program ExecutionContext)

  CopyAssignment                           : #lhs = @(#mn(#elist));
    ProgramSV                                : #lhs (program LeftHandSide)

    PassiveExpression                        : @(#mn(#elist));
      MethodReference                          : #mn(#elist);
        ProgramSV                                : #mn (program MethodName)

        ProgramSV                                : #elist (program Expression)






=== -1369161943 ======================================================
```
{.. #typeof(#lhs) #v0;
                     #method-call(#ex, #v0, #mn(#elist));
                     #lhs = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#lhs) #v0;   method-call(#mn(#elist))   #lhs = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  MethodCall                               : method-call( #mn(#elist););
    MethodReference                          : #mn(#elist);
      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== -2098456381 ======================================================
```
{.. #lhs = @(#t.#mn(#elist)); ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = @(#t.#mn(#elist)); ... } ...
  CopyAssignment                           : #lhs = @(#t.#mn(#elist));
    ProgramSV                                : #lhs (program LeftHandSide)

    PassiveExpression                        : @(#t.#mn(#elist));
      MethodReference                          : #t.#mn(#elist);
        ProgramSV                                : #t (program Type)

        ProgramSV                                : #mn (program MethodName)

        ProgramSV                                : #elist (program Expression)






=== 533931806 ======================================================
```
{..  #typeof(#lhs) #v0;
                           #method-call(#v0, #t.#mn(#elist));
                          #lhs = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#lhs) #v0;   method-call(#t.#mn(#elist))   #lhs = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  MethodCall                               : method-call( #t.#mn(#elist););
    MethodReference                          : #t.#mn(#elist);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #mn (program MethodName)

      ProgramSV                                : #elist (program Expression)



  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== 1083250954 ======================================================
```
{.. while(#e) #s ...}
```

ContextStatementBlock                    : ..{ ..   while (#e) #s ... } ...
  While                                    : while (#e) #s
    Guard                                    : #e (program Expression)
      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #s (program Statement)




=== -112145026 ======================================================
```
{.. #unwind-loop (#innerLabel, #outerLabel,
                while(#e) #s); ...}
```

ContextStatementBlock                    : ..{ ..   #unwind-loop(while (#e) #s) ... } ...
  UnwindLoop                               : #unwind-loop( while (#e) #s);
    While                                    : while (#e) #s
      Guard                                    : #e (program Expression)
        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #s (program Statement)





=== 995838178 ======================================================
```
{.. do #s while (#e); ...}
```

ContextStatementBlock                    : ..{ ..   do #s   while (#e); ... } ...
  Do                                       : do #s while (#e);
    ProgramSV                                : #s (program Statement)

    Guard                                    : #e (program Expression)
      ProgramSV                                : #e (program Expression)





=== 642700642 ======================================================
```
{.. #unwind-loop (#innerLabel, #outerLabel, do #s while(#e);); ...}
```

ContextStatementBlock                    : ..{ ..   #unwind-loop(do #s   while (#e);) ... } ...
  UnwindLoop                               : #unwind-loop( do #s while (#e););
    Do                                       : do #s while (#e);
      ProgramSV                                : #s (program Statement)

      Guard                                    : #e (program Expression)
        ProgramSV                                : #e (program Expression)






=== -136984352 ======================================================
```
{.. #forloop ...}
```

ContextStatementBlock                    : ..{ ..   #forloop ... } ...
  ProgramSV                                : #forloop (program ForLoop)



=== -879092718 ======================================================
```
{.. #for-to-while(#innerLabel, #outerLabel, #forloop) ...}
```

ContextStatementBlock                    : ..{ ..   #for-to-while(#forloop) ... } ...
  ForToWhile                               : #for-to-while( #forloop (program ForLoop));
    ProgramSV                                : #forloop (program ForLoop)




=== 486606324 ======================================================
```
{.#pm@#t(#a).. for (int #v=#se;#v<this.#length; #v++) this[#v] = #lit; ...}
```

ContextStatementBlock                    : ..{ ..   for (int #v = #se; #v < this.#length; #v++)     this[#v] = #lit; ... } ...
  ExecutionContext                         : Context: #t (program Type)##pm (program ProgramMethod) Instance: #a (program Variable)
    ProgramSV                                : #t (program Type)

    ProgramSV                                : #pm (program ProgramMethod)

    ProgramSV                                : #a (program Variable)


  For                                      : for (int #v = #se; #v < this.#length; #v++)   this[#v] = #lit;
    LoopInit                                 : int #v = #se
      LocalVariableDeclaration                 : int #v = #se;
        SchemaTypeReference                      : int;
          ProgramElementName                       : int


        VariableSpecification                    : #v = #se;
          ProgramSV                                : #v (program Variable)

          ProgramSV                                : #se (program SimpleExpression)




    Guard                                    : #v < this.#length;
      LessThan                                 : #v < this.#length;
        ProgramSV                                : #v (program Variable)

        SchematicFieldReference                  : this.#length;
          ThisReference                            : this;

          ProgramSV                                : #length (program ArrayLength)




    ForUpdates                               : #v++;
      PostIncrement                            : #v++;
        ProgramSV                                : #v (program Variable)



    CopyAssignment                           : this[#v] = #lit;
      ArrayReference                           : this[#v];
        ThisReference                            : this;

        ProgramSV                                : #v (program Variable)


      ProgramSV                                : #lit (program NonStringLiteral)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 437947928 ======================================================
```
{.. #sv = #e; ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #e; ... } ...
  CopyAssignment                           : #sv = #e;
    ProgramSV                                : #sv (program StaticVariable)

    ProgramSV                                : #e (program Expression)




=== 677227399 ======================================================
```
{..
                    #typeof(#e) #v0 = #e;
                #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1087839223 ======================================================
```
{.. #v.#sv = #e; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#sv = #e; ... } ...
  CopyAssignment                           : #v.#sv = #e;
    SchematicFieldReference                  : #v.#sv;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #e (program Expression)




=== 677227399 ======================================================
```
{..
                    #typeof(#e) #v0 = #e;
                #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -677160516 ======================================================
```
{.. #sv = #arr[#idx]; ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #arr[#idx]; ... } ...
  CopyAssignment                           : #sv = #arr[#idx];
    ProgramSV                                : #sv (program StaticVariable)

    ArrayReference                           : #arr[#idx];
      ProgramSV                                : #arr (program Expression)

      ProgramSV                                : #idx (program Expression)





=== 1920665061 ======================================================
```
{..
                    #typeof(#sv) #v0 = #arr[#idx];
                #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #arr[#idx];   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #arr[#idx];
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #arr[#idx];
      ProgramSV                                : #v0 (program Variable)

      ArrayReference                           : #arr[#idx];
        ProgramSV                                : #arr (program Expression)

        ProgramSV                                : #idx (program Expression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -604426579 ======================================================
```
{.. #v.#sv = #arr[#idx]; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#sv = #arr[#idx]; ... } ...
  CopyAssignment                           : #v.#sv = #arr[#idx];
    SchematicFieldReference                  : #v.#sv;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #sv (program StaticVariable)


    ArrayReference                           : #arr[#idx];
      ProgramSV                                : #arr (program Expression)

      ProgramSV                                : #idx (program Expression)





=== 1920665061 ======================================================
```
{..
                    #typeof(#sv) #v0 = #arr[#idx];
                #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #arr[#idx];   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #arr[#idx];
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #arr[#idx];
      ProgramSV                                : #v0 (program Variable)

      ArrayReference                           : #arr[#idx];
        ProgramSV                                : #arr (program Expression)

        ProgramSV                                : #idx (program Expression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -404997596 ======================================================
```
{.. #sv = #v1.#a; ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #v1.#a; ... } ...
  CopyAssignment                           : #sv = #v1.#a;
    ProgramSV                                : #sv (program StaticVariable)

    SchematicFieldReference                  : #v1.#a;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #a (program Variable)





=== 1007068287 ======================================================
```
{..
                    #typeof(#a) #v0 = #v1.#a;
                #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#a) #v0 = #v1.#a;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#a) #v0 = #v1.#a;
    TypeOf                                   : #typeof( #a (program Variable));
      ProgramSV                                : #a (program Variable)


    VariableSpecification                    : #v0 = #v1.#a;
      ProgramSV                                : #v0 (program Variable)

      SchematicFieldReference                  : #v1.#a;
        ProgramSV                                : #v1 (program Variable)

        ProgramSV                                : #a (program Variable)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== 284962709 ======================================================
```
{.. #v.#sv = #v1.#a; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#sv = #v1.#a; ... } ...
  CopyAssignment                           : #v.#sv = #v1.#a;
    SchematicFieldReference                  : #v.#sv;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #sv (program StaticVariable)


    SchematicFieldReference                  : #v1.#a;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #a (program Variable)





=== 1007068287 ======================================================
```
{..
                    #typeof(#a) #v0 = #v1.#a;
                #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#a) #v0 = #v1.#a;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#a) #v0 = #v1.#a;
    TypeOf                                   : #typeof( #a (program Variable));
      ProgramSV                                : #a (program Variable)


    VariableSpecification                    : #v0 = #v1.#a;
      ProgramSV                                : #v0 (program Variable)

      SchematicFieldReference                  : #v1.#a;
        ProgramSV                                : #v1 (program Variable)

        ProgramSV                                : #a (program Variable)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -11307760 ======================================================
```
{.. #lhs = #sv; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #sv; ... } ...
  CopyAssignment                           : #lhs = #sv;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #sv (program StaticVariable)




=== 499891838 ======================================================
```
{..
                     #static-initialisation(#sv);
                     #lhs = @(#sv);
                ...}
```

ContextStatementBlock                    : ..{ ..   static-initialisation(#sv)   #lhs = @(#sv); ... } ...
  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : #lhs = @(#sv);
    ProgramSV                                : #lhs (program LeftHandSide)

    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)





=== 1487423337 ======================================================
```
{.. #lhs = #v.#sv; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #v.#sv; ... } ...
  CopyAssignment                           : #lhs = #v.#sv;
    ProgramSV                                : #lhs (program LeftHandSide)

    SchematicFieldReference                  : #v.#sv;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #sv (program StaticVariable)





=== 374142256 ======================================================
```
{..
                  #static-initialisation(#sv);
                  #lhs = @(#sv);
                ...}
```

ContextStatementBlock                    : ..{ ..   static-initialisation(#sv)   #lhs = @(#sv); ... } ...
  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : #lhs = @(#sv);
    ProgramSV                                : #lhs (program LeftHandSide)

    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)





=== 437947928 ======================================================
```
{.. #sv = #e; ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #e; ... } ...
  CopyAssignment                           : #sv = #e;
    ProgramSV                                : #sv (program StaticVariable)

    ProgramSV                                : #e (program Expression)




=== 682047734 ======================================================
```
{..
                    #typeof(#e) #v0 = #e;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1087839223 ======================================================
```
{.. #v.#sv = #e; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#sv = #e; ... } ...
  CopyAssignment                           : #v.#sv = #e;
    SchematicFieldReference                  : #v.#sv;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #e (program Expression)




=== 682047734 ======================================================
```
{..
                    #typeof(#e) #v0 = #e;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#e) #v0 = #e;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#e) #v0 = #e;
    TypeOf                                   : #typeof( #e (program Expression));
      ProgramSV                                : #e (program Expression)


    VariableSpecification                    : #v0 = #e;
      ProgramSV                                : #v0 (program Variable)

      ProgramSV                                : #e (program Expression)



  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -677160516 ======================================================
```
{.. #sv = #arr[#idx]; ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #arr[#idx]; ... } ...
  CopyAssignment                           : #sv = #arr[#idx];
    ProgramSV                                : #sv (program StaticVariable)

    ArrayReference                           : #arr[#idx];
      ProgramSV                                : #arr (program Expression)

      ProgramSV                                : #idx (program Expression)





=== -158571048 ======================================================
```
{..
                    #typeof(#sv) #v0 = #arr[#idx];
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #arr[#idx];   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #arr[#idx];
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #arr[#idx];
      ProgramSV                                : #v0 (program Variable)

      ArrayReference                           : #arr[#idx];
        ProgramSV                                : #arr (program Expression)

        ProgramSV                                : #idx (program Expression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -604426579 ======================================================
```
{.. #v.#sv = #arr[#idx]; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#sv = #arr[#idx]; ... } ...
  CopyAssignment                           : #v.#sv = #arr[#idx];
    SchematicFieldReference                  : #v.#sv;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #sv (program StaticVariable)


    ArrayReference                           : #arr[#idx];
      ProgramSV                                : #arr (program Expression)

      ProgramSV                                : #idx (program Expression)





=== -158571048 ======================================================
```
{..
                    #typeof(#sv) #v0 = #arr[#idx];
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #arr[#idx];   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #arr[#idx];
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #arr[#idx];
      ProgramSV                                : #v0 (program Variable)

      ArrayReference                           : #arr[#idx];
        ProgramSV                                : #arr (program Expression)

        ProgramSV                                : #idx (program Expression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -404997596 ======================================================
```
{.. #sv = #v1.#a; ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #v1.#a; ... } ...
  CopyAssignment                           : #sv = #v1.#a;
    ProgramSV                                : #sv (program StaticVariable)

    SchematicFieldReference                  : #v1.#a;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #a (program Variable)





=== 471280894 ======================================================
```
{..
                    #typeof(#a) #v0 = #v1.#a;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#a) #v0 = #v1.#a;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#a) #v0 = #v1.#a;
    TypeOf                                   : #typeof( #a (program Variable));
      ProgramSV                                : #a (program Variable)


    VariableSpecification                    : #v0 = #v1.#a;
      ProgramSV                                : #v0 (program Variable)

      SchematicFieldReference                  : #v1.#a;
        ProgramSV                                : #v1 (program Variable)

        ProgramSV                                : #a (program Variable)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== 284962709 ======================================================
```
{.. #v.#sv = #v1.#a; ...}
```

ContextStatementBlock                    : ..{ ..   #v.#sv = #v1.#a; ... } ...
  CopyAssignment                           : #v.#sv = #v1.#a;
    SchematicFieldReference                  : #v.#sv;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #sv (program StaticVariable)


    SchematicFieldReference                  : #v1.#a;
      ProgramSV                                : #v1 (program Variable)

      ProgramSV                                : #a (program Variable)





=== 471280894 ======================================================
```
{..
                    #typeof(#a) #v0 = #v1.#a;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#a) #v0 = #v1.#a;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#a) #v0 = #v1.#a;
    TypeOf                                   : #typeof( #a (program Variable));
      ProgramSV                                : #a (program Variable)


    VariableSpecification                    : #v0 = #v1.#a;
      ProgramSV                                : #v0 (program Variable)

      SchematicFieldReference                  : #v1.#a;
        ProgramSV                                : #v1 (program Variable)

        ProgramSV                                : #a (program Variable)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -11307760 ======================================================
```
{.. #lhs = #sv; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #sv; ... } ...
  CopyAssignment                           : #lhs = #sv;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #sv (program StaticVariable)




=== 117366855 ======================================================
```
{..
                     #lhs = @(#sv);
                ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = @(#sv); ... } ...
  CopyAssignment                           : #lhs = @(#sv);
    ProgramSV                                : #lhs (program LeftHandSide)

    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)





=== 1487423337 ======================================================
```
{.. #lhs = #v.#sv; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #v.#sv; ... } ...
  CopyAssignment                           : #lhs = #v.#sv;
    ProgramSV                                : #lhs (program LeftHandSide)

    SchematicFieldReference                  : #v.#sv;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #sv (program StaticVariable)





=== 117366855 ======================================================
```
{..
                     #lhs = @(#sv);
                ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = @(#sv); ... } ...
  CopyAssignment                           : #lhs = @(#sv);
    ProgramSV                                : #lhs (program LeftHandSide)

    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)





=== -1769852337 ======================================================
```
{..
                    #sv = #left * #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left * #right; ... } ...
  CopyAssignment                           : #sv = #left * #right;
    ProgramSV                                : #sv (program StaticVariable)

    Times                                    : #left * #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== -1316412326 ======================================================
```
{..
                       #typeof(#sv) #v0 = #left * #right;
                       #static-initialisation(#sv);
                       @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left * #right;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left * #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left * #right;
      ProgramSV                                : #v0 (program Variable)

      Times                                    : #left * #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1713271702 ======================================================
```
{..
                    #sv = #left / #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left / #right; ... } ...
  CopyAssignment                           : #sv = #left / #right;
    ProgramSV                                : #sv (program StaticVariable)

    Divide                                   : #left / #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== -1780597429 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left / #right;
                    #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left / #right;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left / #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left / #right;
      ProgramSV                                : #v0 (program Variable)

      Divide                                   : #left / #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1826432972 ======================================================
```
{..
                    #sv = #left % #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left % #right; ... } ...
  CopyAssignment                           : #sv = #left % #right;
    ProgramSV                                : #sv (program StaticVariable)

    Modulo                                   : #left % #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== -1826387647 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left % #right;
                    #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left % #right;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left % #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left % #right;
      ProgramSV                                : #v0 (program Variable)

      Modulo                                   : #left % #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1735903956 ======================================================
```
{..
                    #sv = #left - #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left - #right; ... } ...
  CopyAssignment                           : #sv = #left - #right;
    ProgramSV                                : #sv (program StaticVariable)

    Minus                                    : #left - #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 787224905 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left - #right;
                    #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left - #right;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left - #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left - #right;
      ProgramSV                                : #v0 (program Variable)

      Minus                                    : #left - #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1758536210 ======================================================
```
{..
                    #sv = #left + #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left + #right; ... } ...
  CopyAssignment                           : #sv = #left + #right;
    ProgramSV                                : #sv (program StaticVariable)

    Plus                                     : #left + #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== -939920057 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left + #right;
                    #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left + #right;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left + #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left + #right;
      ProgramSV                                : #v0 (program Variable)

      Plus                                     : #left + #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== 1646975605 ======================================================
```
{..
                     #sv = #left & #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left & #right; ... } ...
  CopyAssignment                           : #sv = #left & #right;
    ProgramSV                                : #sv (program StaticVariable)

    BinaryAnd                                : #left & #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 1032363734 ======================================================
```
{..
                     #typeof(#sv) #v0 = #left & #right;
                     #static-initialisation(#sv);
                     @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left & #right;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left & #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left & #right;
      ProgramSV                                : #v0 (program Variable)

      BinaryAnd                                : #left & #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -767019975 ======================================================
```
{..
                     #sv=#left | #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left | #right; ... } ...
  CopyAssignment                           : #sv = #left | #right;
    ProgramSV                                : #sv (program StaticVariable)

    BinaryOr                                 : #left | #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== -1922896468 ======================================================
```
{..
                     #typeof(#sv) #v0 = #left | #right;
                     #static-initialisation(#sv);
                     @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left | #right;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left | #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left | #right;
      ProgramSV                                : #v0 (program Variable)

      BinaryOr                                 : #left | #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== 954695797 ======================================================
```
{..
                    #sv=#left ^ #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left ^ #right; ... } ...
  CopyAssignment                           : #sv = #left ^ #right;
    ProgramSV                                : #sv (program StaticVariable)

    BinaryXOr                                : #left ^ #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== -1994880134 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left ^ #right;
                    #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left ^ #right;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left ^ #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left ^ #right;
      ProgramSV                                : #v0 (program Variable)

      BinaryXOr                                : #left ^ #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== 1891457307 ======================================================
```
{..
                    #sv=#left >> #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left >> #right; ... } ...
  CopyAssignment                           : #sv = #left >> #right;
    ProgramSV                                : #sv (program StaticVariable)

    ShiftRight                               : #left >> #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== -1975487096 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left >> #right;
                    #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left >> #right;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left >> #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left >> #right;
      ProgramSV                                : #v0 (program Variable)

      ShiftRight                               : #left >> #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== 274492857 ======================================================
```
{..
                    #sv=#left << #right; ...}
                
```

ContextStatementBlock                    : ..{ ..   #sv = #left << #right; ... } ...
  CopyAssignment                           : #sv = #left << #right;
    ProgramSV                                : #sv (program StaticVariable)

    ShiftLeft                                : #left << #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== -678526008 ======================================================
```
{..
                   #typeof(#sv) #v0 = #left << #right;
                   #static-initialisation(#sv);
                   @(#sv) = #v0;
                ...} 
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left << #right;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left << #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left << #right;
      ProgramSV                                : #v0 (program Variable)

      ShiftLeft                                : #left << #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -793010859 ======================================================
```
{..
                    #sv=#left >>> #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left >>> #right; ... } ...
  CopyAssignment                           : #sv = #left >>> #right;
    ProgramSV                                : #sv (program StaticVariable)

    UnsignedShiftRight                       : #left >>> #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 1865572902 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left >>> #right; ...}
                    #static-initialisation(#sv);
                    @(#sv) = #v0;
                
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left >>> #right; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left >>> #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left >>> #right;
      ProgramSV                                : #v0 (program Variable)

      UnsignedShiftRight                       : #left >>> #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)






=== 837935977 ======================================================
```
{..
                    #sv = - #left;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = -#left; ... } ...
  CopyAssignment                           : #sv = -#left;
    ProgramSV                                : #sv (program StaticVariable)

    Negative                                 : -#left;
      ProgramSV                                : #left (program AnyNumberTypeExpression)





=== -1477160620 ======================================================
```
{..
                    #typeof(#sv) #v0 = - #left;
                    #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = -#left;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = -#left;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = -#left;
      ProgramSV                                : #v0 (program Variable)

      Negative                                 : -#left;
        ProgramSV                                : #left (program AnyNumberTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== 1144598586 ======================================================
```
{..
                    #sv = ~ #left;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = ~#left; ... } ...
  CopyAssignment                           : #sv = ~#left;
    ProgramSV                                : #sv (program StaticVariable)

    BinaryNot                                : ~#left;
      ProgramSV                                : #left (program AnyNumberTypeExpression)





=== 432902371 ======================================================
```
{..
                    #typeof(#sv) #v0 = ~ #left;
                    #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = ~#left;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = ~#left;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = ~#left;
      ProgramSV                                : #v0 (program Variable)

      BinaryNot                                : ~#left;
        ProgramSV                                : #left (program AnyNumberTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1735804121 ======================================================
```
{..
                    #sv = (byte) #seShortIntLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = (byte) #seShortIntLong; ... } ...
  CopyAssignment                           : #sv = (byte) #seShortIntLong;
    ProgramSV                                : #sv (program StaticVariable)

    TypeCast                                 : (byte) #seShortIntLong;
      SchemaTypeReference                      : byte;
        ProgramElementName                       : byte


      ProgramSV                                : #seShortIntLong (program JavaShortIntLongExpression)





=== -1251790994 ======================================================
```
{..
                    #typeof(#sv) #v0 = (byte) #seShortIntLong;
                    #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = (byte) #seShortIntLong;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = (byte) #seShortIntLong;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = (byte) #seShortIntLong;
      ProgramSV                                : #v0 (program Variable)

      TypeCast                                 : (byte) #seShortIntLong;
        SchemaTypeReference                      : byte;
          ProgramElementName                       : byte


        ProgramSV                                : #seShortIntLong (program JavaShortIntLongExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -653889205 ======================================================
```
{..
                    #sv = (short) #seIntLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = (short) #seIntLong; ... } ...
  CopyAssignment                           : #sv = (short) #seIntLong;
    ProgramSV                                : #sv (program StaticVariable)

    TypeCast                                 : (short) #seIntLong;
      SchemaTypeReference                      : short;
        ProgramElementName                       : short


      ProgramSV                                : #seIntLong (program JavaIntLongExpression)





=== 1778304350 ======================================================
```
{..
                     #typeof(#sv) #v0 = (short) #seIntLong;
                     #static-initialisation(#sv);
                     @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = (short) #seIntLong;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = (short) #seIntLong;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = (short) #seIntLong;
      ProgramSV                                : #v0 (program Variable)

      TypeCast                                 : (short) #seIntLong;
        SchemaTypeReference                      : short;
          ProgramElementName                       : short


        ProgramSV                                : #seIntLong (program JavaIntLongExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -245323675 ======================================================
```
{..
                    #sv = (int) #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = (int) #seLong; ... } ...
  CopyAssignment                           : #sv = (int) #seLong;
    ProgramSV                                : #sv (program StaticVariable)

    TypeCast                                 : (int) #seLong;
      SchemaTypeReference                      : int;
        ProgramElementName                       : int


      ProgramSV                                : #seLong (program JavaLongExpression)





=== 1384352728 ======================================================
```
{..
                    #typeof(#sv) #v0 = (int) #seLong;
                    #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = (int) #seLong;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = (int) #seLong;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = (int) #seLong;
      ProgramSV                                : #v0 (program Variable)

      TypeCast                                 : (int) #seLong;
        SchemaTypeReference                      : int;
          ProgramElementName                       : int


        ProgramSV                                : #seLong (program JavaLongExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1739230655 ======================================================
```
{..
                    #sv = (char) #seByteShortIntLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = (char) #seByteShortIntLong; ... } ...
  CopyAssignment                           : #sv = (char) #seByteShortIntLong;
    ProgramSV                                : #sv (program StaticVariable)

    TypeCast                                 : (char) #seByteShortIntLong;
      SchemaTypeReference                      : char;
        ProgramElementName                       : char


      ProgramSV                                : #seByteShortIntLong (program AnyJavaTypeExpression)





=== 302630932 ======================================================
```
{..
                    #typeof(#sv) #v0 = (char) #seByteShortIntLong;
                    #static-initialisation(#sv);
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = (char) #seByteShortIntLong;   static-initialisation(#sv)   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = (char) #seByteShortIntLong;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = (char) #seByteShortIntLong;
      ProgramSV                                : #v0 (program Variable)

      TypeCast                                 : (char) #seByteShortIntLong;
        SchemaTypeReference                      : char;
          ProgramElementName                       : char


        ProgramSV                                : #seByteShortIntLong (program AnyJavaTypeExpression)




  StaticInitialisation                     : static-initialisation( #sv (program StaticVariable));
    ProgramSV                                : #sv (program StaticVariable)


  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1769852337 ======================================================
```
{..
                    #sv = #left * #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left * #right; ... } ...
  CopyAssignment                           : #sv = #left * #right;
    ProgramSV                                : #sv (program StaticVariable)

    Times                                    : #left * #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 1066794097 ======================================================
```
{..
                       #typeof(#sv) #v0 = #left * #right;
                       @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left * #right;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left * #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left * #right;
      ProgramSV                                : #v0 (program Variable)

      Times                                    : #left * #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1713271702 ======================================================
```
{..
                    #sv = #left / #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left / #right; ... } ...
  CopyAssignment                           : #sv = #left / #right;
    ProgramSV                                : #sv (program StaticVariable)

    Divide                                   : #left / #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 907657266 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left / #right;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left / #right;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left / #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left / #right;
      ProgramSV                                : #v0 (program Variable)

      Divide                                   : #left / #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1826432972 ======================================================
```
{..
                    #sv = #left % #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left % #right; ... } ...
  CopyAssignment                           : #sv = #left % #right;
    ProgramSV                                : #sv (program StaticVariable)

    Modulo                                   : #left % #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 1179621756 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left % #right;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left % #right;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left % #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left % #right;
      ProgramSV                                : #v0 (program Variable)

      Modulo                                   : #left % #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1735903956 ======================================================
```
{..
                    #sv = #left - #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left - #right; ... } ...
  CopyAssignment                           : #sv = #left - #right;
    ProgramSV                                : #sv (program StaticVariable)

    Minus                                    : #left - #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 962050164 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left - #right;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left - #right;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left - #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left - #right;
      ProgramSV                                : #v0 (program Variable)

      Minus                                    : #left - #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1758536210 ======================================================
```
{..
                    #sv = #left + #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left + #right; ... } ...
  CopyAssignment                           : #sv = #left + #right;
    ProgramSV                                : #sv (program StaticVariable)

    Plus                                     : #left + #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 1016443062 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left + #right;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left + #right;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left + #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left + #right;
      ProgramSV                                : #v0 (program Variable)

      Plus                                     : #left + #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== 1646975605 ======================================================
```
{..
                     #sv = #left & #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left & #right; ... } ...
  CopyAssignment                           : #sv = #left & #right;
    ProgramSV                                : #sv (program StaticVariable)

    BinaryAnd                                : #left & #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 853356589 ======================================================
```
{..
                     #typeof(#sv) #v0 = #left & #right;
                     @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left & #right;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left & #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left & #right;
      ProgramSV                                : #v0 (program Variable)

      BinaryAnd                                : #left & #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -767019975 ======================================================
```
{..
                     #sv=#left | #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left | #right; ... } ...
  CopyAssignment                           : #sv = #left | #right;
    ProgramSV                                : #sv (program StaticVariable)

    BinaryOr                                 : #left | #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 1362067587 ======================================================
```
{..
                     #typeof(#sv) #v0 = #left | #right;
                     @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left | #right;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left | #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left | #right;
      ProgramSV                                : #v0 (program Variable)

      BinaryOr                                 : #left | #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== 954695797 ======================================================
```
{..
                    #sv=#left ^ #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left ^ #right; ... } ...
  CopyAssignment                           : #sv = #left ^ #right;
    ProgramSV                                : #sv (program StaticVariable)

    BinaryXOr                                : #left ^ #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 1776907811 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left ^ #right;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left ^ #right;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left ^ #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left ^ #right;
      ProgramSV                                : #v0 (program Variable)

      BinaryXOr                                : #left ^ #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== 1891457307 ======================================================
```
{..
                    #sv=#left >> #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left >> #right; ... } ...
  CopyAssignment                           : #sv = #left >> #right;
    ProgramSV                                : #sv (program StaticVariable)

    ShiftRight                               : #left >> #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 830799445 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left >> #right;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left >> #right;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left >> #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left >> #right;
      ProgramSV                                : #v0 (program Variable)

      ShiftRight                               : #left >> #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== 274492857 ======================================================
```
{..
                    #sv=#left << #right; ...}
                
```

ContextStatementBlock                    : ..{ ..   #sv = #left << #right; ... } ...
  CopyAssignment                           : #sv = #left << #right;
    ProgramSV                                : #sv (program StaticVariable)

    ShiftLeft                                : #left << #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== 303322641 ======================================================
```
{..
                   #typeof(#sv) #v0 = #left << #right;
                   @(#sv) = #v0;
                ...} 
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left << #right;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left << #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left << #right;
      ProgramSV                                : #v0 (program Variable)

      ShiftLeft                                : #left << #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -793010859 ======================================================
```
{..
                    #sv=#left >>> #right;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = #left >>> #right; ... } ...
  CopyAssignment                           : #sv = #left >>> #right;
    ProgramSV                                : #sv (program StaticVariable)

    UnsignedShiftRight                       : #left >>> #right;
      ProgramSV                                : #left (program AnyNumberTypeExpression)

      ProgramSV                                : #right (program AnyNumberTypeExpression)





=== -675352071 ======================================================
```
{..
                    #typeof(#sv) #v0 = #left >>> #right; ...}
                    @(#sv) = #v0;
                
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = #left >>> #right; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = #left >>> #right;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = #left >>> #right;
      ProgramSV                                : #v0 (program Variable)

      UnsignedShiftRight                       : #left >>> #right;
        ProgramSV                                : #left (program AnyNumberTypeExpression)

        ProgramSV                                : #right (program AnyNumberTypeExpression)






=== 837935977 ======================================================
```
{..
                    #sv = - #left;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = -#left; ... } ...
  CopyAssignment                           : #sv = -#left;
    ProgramSV                                : #sv (program StaticVariable)

    Negative                                 : -#left;
      ProgramSV                                : #left (program AnyNumberTypeExpression)





=== -932433655 ======================================================
```
{..
                    #typeof(#sv) #v0 = - #left;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = -#left;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = -#left;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = -#left;
      ProgramSV                                : #v0 (program Variable)

      Negative                                 : -#left;
        ProgramSV                                : #left (program AnyNumberTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== 1144598586 ======================================================
```
{..
                    #sv = ~ #left;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = ~#left; ... } ...
  CopyAssignment                           : #sv = ~#left;
    ProgramSV                                : #sv (program StaticVariable)

    BinaryNot                                : ~#left;
      ProgramSV                                : #left (program AnyNumberTypeExpression)





=== -657127014 ======================================================
```
{..
                    #typeof(#sv) #v0 = ~ #left;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = ~#left;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = ~#left;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = ~#left;
      ProgramSV                                : #v0 (program Variable)

      BinaryNot                                : ~#left;
        ProgramSV                                : #left (program AnyNumberTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1735804121 ======================================================
```
{..
                    #sv = (byte) #seShortIntLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = (byte) #seShortIntLong; ... } ...
  CopyAssignment                           : #sv = (byte) #seShortIntLong;
    ProgramSV                                : #sv (program StaticVariable)

    TypeCast                                 : (byte) #seShortIntLong;
      SchemaTypeReference                      : byte;
        ProgramElementName                       : byte


      ProgramSV                                : #seShortIntLong (program JavaShortIntLongExpression)





=== -1944171601 ======================================================
```
{..
                    #typeof(#sv) #v0 = (byte) #seShortIntLong;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = (byte) #seShortIntLong;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = (byte) #seShortIntLong;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = (byte) #seShortIntLong;
      ProgramSV                                : #v0 (program Variable)

      TypeCast                                 : (byte) #seShortIntLong;
        SchemaTypeReference                      : byte;
          ProgramElementName                       : byte


        ProgramSV                                : #seShortIntLong (program JavaShortIntLongExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -653889205 ======================================================
```
{..
                    #sv = (short) #seIntLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = (short) #seIntLong; ... } ...
  CopyAssignment                           : #sv = (short) #seIntLong;
    ProgramSV                                : #sv (program StaticVariable)

    TypeCast                                 : (short) #seIntLong;
      SchemaTypeReference                      : short;
        ProgramElementName                       : short


      ProgramSV                                : #seIntLong (program JavaIntLongExpression)





=== 674334901 ======================================================
```
{..
                     #typeof(#sv) #v0 = (short) #seIntLong;
                     @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = (short) #seIntLong;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = (short) #seIntLong;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = (short) #seIntLong;
      ProgramSV                                : #v0 (program Variable)

      TypeCast                                 : (short) #seIntLong;
        SchemaTypeReference                      : short;
          ProgramElementName                       : short


        ProgramSV                                : #seIntLong (program JavaIntLongExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -245323675 ======================================================
```
{..
                    #sv = (int) #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = (int) #seLong; ... } ...
  CopyAssignment                           : #sv = (int) #seLong;
    ProgramSV                                : #sv (program StaticVariable)

    TypeCast                                 : (int) #seLong;
      SchemaTypeReference                      : int;
        ProgramElementName                       : int


      ProgramSV                                : #seLong (program JavaLongExpression)





=== 358481413 ======================================================
```
{..
                    #typeof(#sv) #v0 = (int) #seLong;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = (int) #seLong;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = (int) #seLong;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = (int) #seLong;
      ProgramSV                                : #v0 (program Variable)

      TypeCast                                 : (int) #seLong;
        SchemaTypeReference                      : int;
          ProgramElementName                       : int


        ProgramSV                                : #seLong (program JavaLongExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1739230655 ======================================================
```
{..
                    #sv = (char) #seByteShortIntLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #sv = (char) #seByteShortIntLong; ... } ...
  CopyAssignment                           : #sv = (char) #seByteShortIntLong;
    ProgramSV                                : #sv (program StaticVariable)

    TypeCast                                 : (char) #seByteShortIntLong;
      SchemaTypeReference                      : char;
        ProgramElementName                       : char


      ProgramSV                                : #seByteShortIntLong (program AnyJavaTypeExpression)





=== -1517526455 ======================================================
```
{..
                    #typeof(#sv) #v0 = (char) #seByteShortIntLong;
                    @(#sv) = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#sv) #v0 = (char) #seByteShortIntLong;   @(#sv) = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#sv) #v0 = (char) #seByteShortIntLong;
    TypeOf                                   : #typeof( #sv (program StaticVariable));
      ProgramSV                                : #sv (program StaticVariable)


    VariableSpecification                    : #v0 = (char) #seByteShortIntLong;
      ProgramSV                                : #v0 (program Variable)

      TypeCast                                 : (char) #seByteShortIntLong;
        SchemaTypeReference                      : char;
          ProgramElementName                       : char


        ProgramSV                                : #seByteShortIntLong (program AnyJavaTypeExpression)




  CopyAssignment                           : @(#sv) = #v0;
    PassiveExpression                        : @(#sv);
      ProgramSV                                : #sv (program StaticVariable)


    ProgramSV                                : #v0 (program Variable)




=== -1371747068 ======================================================
```
{.. #nsn ...}
```

ContextStatementBlock                    : ..{ ..   #nsn ... } ...
  ProgramSV                                : #nsn (program NonSimpleInstanceCreation)



=== 1098365999 ======================================================
```
{.. #evaluate-arguments(#nsn); ...}
```

ContextStatementBlock                    : ..{ ..   #evaluate-arguments(#nsn) ... } ...
  EvaluateArgs                             : #evaluate-arguments( #nsn (program NonSimpleInstanceCreation));
    ProgramSV                                : #nsn (program NonSimpleInstanceCreation)




=== 596105850 ======================================================
```
{.. #lhs = #nsn;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #nsn; ... } ...
  CopyAssignment                           : #lhs = #nsn;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #nsn (program NonSimpleInstanceCreation)




=== -1324507216 ======================================================
```
{.. #evaluate-arguments(#lhs = #nsn); ...}
```

ContextStatementBlock                    : ..{ ..   #evaluate-arguments(#lhs = #nsn) ... } ...
  EvaluateArgs                             : #evaluate-arguments( #lhs = #nsn;);
    CopyAssignment                           : #lhs = #nsn;
      ProgramSV                                : #lhs (program LeftHandSide)

      ProgramSV                                : #nsn (program NonSimpleInstanceCreation)





=== 143490687 ======================================================
```
{.. #n ...}
```

ContextStatementBlock                    : ..{ ..   #n ... } ...
  ProgramSV                                : #n (program SimpleInstanceCreation)



=== -175898902 ======================================================
```
{.. #typeof(#v0) #v0 = #create-object(#n);
                #constructor-call(#v0, #n);
                        #post-work(#v0); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#v0) #v0 = create-object(#n);   constructor-call(#n)   post-work(#v0) ... } ...
  LocalVariableDeclaration                 : #typeof(#v0) #v0 = create-object(#n);
    TypeOf                                   : #typeof( #v0 (program Variable));
      ProgramSV                                : #v0 (program Variable)


    VariableSpecification                    : #v0 = create-object(#n);
      ProgramSV                                : #v0 (program Variable)

      CreateObject                             : create-object( #n (program SimpleInstanceCreation));
        ProgramSV                                : #n (program SimpleInstanceCreation)




  ConstructorCall                          : constructor-call( #n (program SimpleInstanceCreation));
    ProgramSV                                : #n (program SimpleInstanceCreation)


  PostWork                                 : post-work( #v0 (program Variable));
    ProgramSV                                : #v0 (program Variable)




=== -1731521547 ======================================================
```
{.. #lhs = #n;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #n; ... } ...
  CopyAssignment                           : #lhs = #n;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #n (program SimpleInstanceCreation)




=== 1056611409 ======================================================
```
{.. #typeof(#v0) #v0 = #create-object(#n);
                    #constructor-call(#v0, #n);
                            #post-work(#v0);
                #lhs = #v0;
                ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#v0) #v0 = create-object(#n);   constructor-call(#n)   post-work(#v0)   #lhs = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#v0) #v0 = create-object(#n);
    TypeOf                                   : #typeof( #v0 (program Variable));
      ProgramSV                                : #v0 (program Variable)


    VariableSpecification                    : #v0 = create-object(#n);
      ProgramSV                                : #v0 (program Variable)

      CreateObject                             : create-object( #n (program SimpleInstanceCreation));
        ProgramSV                                : #n (program SimpleInstanceCreation)




  ConstructorCall                          : constructor-call( #n (program SimpleInstanceCreation));
    ProgramSV                                : #n (program SimpleInstanceCreation)


  PostWork                                 : post-work( #v0 (program Variable));
    ProgramSV                                : #v0 (program Variable)


  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== -1182397565 ======================================================
```
{.#pm@#t2().. #lhs = #t.#allocate()@#t; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #t.#allocate()@#t; ... } ...
  ExecutionContext                         : Context: #t2 (program Type)##pm (program ProgramMethod) Instance: null
    ProgramSV                                : #t2 (program Type)

    ProgramSV                                : #pm (program ProgramMethod)


  MethodBodyStatement                      : #lhs = #t.#allocate()@#t;
    ProgramSV                                : #t (program Type)

    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #t.#allocate();
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #allocate (program MethodName[name=<allocate>])





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -950883179 ======================================================
```
{.#pm@#t2().. #lhs = #t.#allocate(#len)@#t; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #t.#allocate(#len)@#t; ... } ...
  ExecutionContext                         : Context: #t2 (program Type)##pm (program ProgramMethod) Instance: null
    ProgramSV                                : #t2 (program Type)

    ProgramSV                                : #pm (program ProgramMethod)


  MethodBodyStatement                      : #lhs = #t.#allocate(#len)@#t;
    ProgramSV                                : #t (program Type)

    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #t.#allocate(#len);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #allocate (program MethodName[name=<allocate>])

      ProgramSV                                : #len (program SimpleExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1182397565 ======================================================
```
{.#pm@#t2().. #lhs = #t.#allocate()@#t; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #t.#allocate()@#t; ... } ...
  ExecutionContext                         : Context: #t2 (program Type)##pm (program ProgramMethod) Instance: null
    ProgramSV                                : #t2 (program Type)

    ProgramSV                                : #pm (program ProgramMethod)


  MethodBodyStatement                      : #lhs = #t.#allocate()@#t;
    ProgramSV                                : #t (program Type)

    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #t.#allocate();
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #allocate (program MethodName[name=<allocate>])





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -950883179 ======================================================
```
{.#pm@#t2().. #lhs = #t.#allocate(#len)@#t; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #t.#allocate(#len)@#t; ... } ...
  ExecutionContext                         : Context: #t2 (program Type)##pm (program ProgramMethod) Instance: null
    ProgramSV                                : #t2 (program Type)

    ProgramSV                                : #pm (program ProgramMethod)


  MethodBodyStatement                      : #lhs = #t.#allocate(#len)@#t;
    ProgramSV                                : #t (program Type)

    ProgramSV                                : #lhs (program LeftHandSide)

    MethodReference                          : #t.#allocate(#len);
      ProgramSV                                : #t (program Type)

      ProgramSV                                : #allocate (program MethodName[name=<allocate>])

      ProgramSV                                : #len (program SimpleExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1846696907 ======================================================
```
{.. #scr ...}
```

ContextStatementBlock                    : ..{ ..   #scr ... } ...
  ProgramSV                                : #scr (program SpecialConstructorReference)



=== 244155385 ======================================================
```
{.. #special-constructor-call(#scr); ...}
```

ContextStatementBlock                    : ..{ ..   special-constructor-call(#scr) ... } ...
  SpecialConstructorCall                   : special-constructor-call( #scr (program SpecialConstructorReference));
    ProgramSV                                : #scr (program SpecialConstructorReference)




=== -1593132960 ======================================================
```
{.. #lhs = #na; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #na; ... } ...
  CopyAssignment                           : #lhs = #na;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #na (program ArrayCreation)




=== -94466404 ======================================================
```
{..
                #typeof(#na) #v0;
                #init-array-creation(#v0, #na);
                        #lhs = #v0; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#na) #v0;   init-array-creation(#na)   #lhs = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#na) #v0;
    TypeOf                                   : #typeof( #na (program ArrayCreation));
      ProgramSV                                : #na (program ArrayCreation)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  InitArrayCreation                        : init-array-creation( #na (program ArrayCreation));
    ProgramSV                                : #na (program ArrayCreation)


  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== -1418408618 ======================================================
```
{.. #lhs = #arrayinitializer; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #arrayinitializer; ... } ...
  CopyAssignment                           : #lhs = #arrayinitializer;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #arrayinitializer (program ArrayInitializer)




=== 24442722 ======================================================
```
{..
                #typeof(#lhs) #v0;
                #init-array-creation(#v0, #arrayinitializer);
                        #lhs = #v0; ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#lhs) #v0;   init-array-creation(#arrayinitializer)   #lhs = #v0; ... } ...
  LocalVariableDeclaration                 : #typeof(#lhs) #v0;
    TypeOf                                   : #typeof( #lhs (program LeftHandSide));
      ProgramSV                                : #lhs (program LeftHandSide)


    VariableSpecification                    : #v0;
      ProgramSV                                : #v0 (program Variable)



  InitArrayCreation                        : init-array-creation( #arrayinitializer (program ArrayInitializer));
    ProgramSV                                : #arrayinitializer (program ArrayInitializer)


  CopyAssignment                           : #lhs = #v0;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #v0 (program Variable)




=== -848466685 ======================================================
```
{ .. for (#ty #id : #e) #stm ... }
```

ContextStatementBlock                    : ..{ ..   for (#ty #id : #e) #stm ... } ...
  EnhancedFor                              : for (#ty #id : #e) #stm
    LoopInit                                 : #ty #id
      LocalVariableDeclaration                 : #ty #id;
        ProgramSV                                : #ty (program Type)

        VariableSpecification                    : #id;
          ProgramSV                                : #id (program Variable)




    Guard                                    : #e (program Expression)
      ProgramSV                                : #e (program Expression)


    ProgramSV                                : #stm (program Statement)




=== 465774709 ======================================================
```
{ .. #enhancedfor-elim(for (#ty #id : #e) #stm); ... }
```

ContextStatementBlock                    : ..{ ..   enhancedfor-elim(for (#ty #id : #e) #stm) ... } ...
  EnhancedForElimination                   : enhancedfor-elim( for (#ty #id : #e) #stm);
    EnhancedFor                              : for (#ty #id : #e) #stm
      LoopInit                                 : #ty #id
        LocalVariableDeclaration                 : #ty #id;
          ProgramSV                                : #ty (program Type)

          VariableSpecification                    : #id;
            ProgramSV                                : #id (program Variable)




      Guard                                    : #e (program Expression)
        ProgramSV                                : #e (program Expression)


      ProgramSV                                : #stm (program Statement)





=== -771245250 ======================================================
```
{..
                    #loc = #seCharByteShortInt0 * #seCharByteShortInt1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt0 * #seCharByteShortInt1; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt0 * #seCharByteShortInt1;
    ProgramSV                                : #loc (program Variable)

    Times                                    : #seCharByteShortInt0 * #seCharByteShortInt1;
      ProgramSV                                : #seCharByteShortInt0 (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seCharByteShortInt1 (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -276273650 ======================================================
```
{..
                    #loc=#seCharByteShortInt * #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt * #seLong; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt * #seLong;
    ProgramSV                                : #loc (program Variable)

    Times                                    : #seCharByteShortInt * #seLong;
      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1569979056 ======================================================
```
{..
                       #loc=#seLong * #seCharByteShortInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong * #seCharByteShortInt; ... } ...
  CopyAssignment                           : #loc = #seLong * #seCharByteShortInt;
    ProgramSV                                : #loc (program Variable)

    Times                                    : #seLong * #seCharByteShortInt;
      ProgramSV                                : #seLong (program JavaLongExpression)

      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -953521980 ======================================================
```
{..
                    #loc=#seLong0 * #seLong1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong0 * #seLong1; ... } ...
  CopyAssignment                           : #loc = #seLong0 * #seLong1;
    ProgramSV                                : #loc (program Variable)

    Times                                    : #seLong0 * #seLong1;
      ProgramSV                                : #seLong0 (program JavaLongExpression)

      ProgramSV                                : #seLong1 (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -931428417 ======================================================
```
{..
                    #loc=#seCharByteShortInt0 / #seCharByteShortInt1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt0 / #seCharByteShortInt1; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt0 / #seCharByteShortInt1;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seCharByteShortInt0 / #seCharByteShortInt1;
      ProgramSV                                : #seCharByteShortInt0 (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seCharByteShortInt1 (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1819031102 ======================================================
```
{..
                    #loc=#se / #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #se / #seLong; ... } ...
  CopyAssignment                           : #loc = #se / #seLong;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #se / #seLong;
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1319824787 ======================================================
```
{..
                    #loc=#seLong / #seCharByteShortInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong / #seCharByteShortInt; ... } ...
  CopyAssignment                           : #loc = #seLong / #seCharByteShortInt;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seLong / #seCharByteShortInt;
      ProgramSV                                : #seLong (program JavaLongExpression)

      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1987612951 ======================================================
```
{..
                    #loc=#se0 % #se1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #se0 % #se1; ... } ...
  CopyAssignment                           : #loc = #se0 % #se1;
    ProgramSV                                : #loc (program Variable)

    Modulo                                   : #se0 % #se1;
      ProgramSV                                : #se0 (program SimpleExpression)

      ProgramSV                                : #se1 (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -931428417 ======================================================
```
{..
                    #loc=#seCharByteShortInt0 / #seCharByteShortInt1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt0 / #seCharByteShortInt1; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt0 / #seCharByteShortInt1;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seCharByteShortInt0 / #seCharByteShortInt1;
      ProgramSV                                : #seCharByteShortInt0 (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seCharByteShortInt1 (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1819031102 ======================================================
```
{..
                    #loc=#se / #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #se / #seLong; ... } ...
  CopyAssignment                           : #loc = #se / #seLong;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #se / #seLong;
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1319824787 ======================================================
```
{..
                    #loc=#seLong / #seCharByteShortInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong / #seCharByteShortInt; ... } ...
  CopyAssignment                           : #loc = #seLong / #seCharByteShortInt;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seLong / #seCharByteShortInt;
      ProgramSV                                : #seLong (program JavaLongExpression)

      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1987612951 ======================================================
```
{..
                    #loc=#se0 % #se1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #se0 % #se1; ... } ...
  CopyAssignment                           : #loc = #se0 % #se1;
    ProgramSV                                : #loc (program Variable)

    Modulo                                   : #se0 % #se1;
      ProgramSV                                : #se0 (program SimpleExpression)

      ProgramSV                                : #se1 (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -931428417 ======================================================
```
{..
                    #loc=#seCharByteShortInt0 / #seCharByteShortInt1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt0 / #seCharByteShortInt1; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt0 / #seCharByteShortInt1;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seCharByteShortInt0 / #seCharByteShortInt1;
      ProgramSV                                : #seCharByteShortInt0 (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seCharByteShortInt1 (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -2018902745 ======================================================
```
{..
                            throw new java.lang.ArithmeticException();
                        ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArithmeticException(); ... } ...
  Throw                                    : throw new java.lang.ArithmeticException();
    New                                      : new java.lang.ArithmeticException();
      SchemaTypeReference                      : java.lang.ArithmeticException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArithmeticException






=== -1819031102 ======================================================
```
{..
                    #loc=#se / #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #se / #seLong; ... } ...
  CopyAssignment                           : #loc = #se / #seLong;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #se / #seLong;
      ProgramSV                                : #se (program SimpleExpression)

      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -2018902745 ======================================================
```
{..
                            throw new java.lang.ArithmeticException();
                        ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArithmeticException(); ... } ...
  Throw                                    : throw new java.lang.ArithmeticException();
    New                                      : new java.lang.ArithmeticException();
      SchemaTypeReference                      : java.lang.ArithmeticException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArithmeticException






=== 1319824787 ======================================================
```
{..
                    #loc=#seLong / #seCharByteShortInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong / #seCharByteShortInt; ... } ...
  CopyAssignment                           : #loc = #seLong / #seCharByteShortInt;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seLong / #seCharByteShortInt;
      ProgramSV                                : #seLong (program JavaLongExpression)

      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 279348647 ======================================================
```
{..
                        throw new java.lang.ArithmeticException();
                        ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArithmeticException(); ... } ...
  Throw                                    : throw new java.lang.ArithmeticException();
    New                                      : new java.lang.ArithmeticException();
      SchemaTypeReference                      : java.lang.ArithmeticException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArithmeticException






=== -1987612951 ======================================================
```
{..
                    #loc=#se0 % #se1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #se0 % #se1; ... } ...
  CopyAssignment                           : #loc = #se0 % #se1;
    ProgramSV                                : #loc (program Variable)

    Modulo                                   : #se0 % #se1;
      ProgramSV                                : #se0 (program SimpleExpression)

      ProgramSV                                : #se1 (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1181888635 ======================================================
```
{..
                           throw new java.lang.ArithmeticException();
                        ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArithmeticException(); ... } ...
  Throw                                    : throw new java.lang.ArithmeticException();
    New                                      : new java.lang.ArithmeticException();
      SchemaTypeReference                      : java.lang.ArithmeticException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArithmeticException






=== 449640283 ======================================================
```
{..
                    #loc = #seCharByteShortInt0 - #seCharByteShortInt1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt0 - #seCharByteShortInt1; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt0 - #seCharByteShortInt1;
    ProgramSV                                : #loc (program Variable)

    Minus                                    : #seCharByteShortInt0 - #seCharByteShortInt1;
      ProgramSV                                : #seCharByteShortInt0 (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seCharByteShortInt1 (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 776126161 ======================================================
```
{..
                    #loc=#seCharByteShortInt - #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt - #seLong; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt - #seLong;
    ProgramSV                                : #loc (program Variable)

    Minus                                    : #seCharByteShortInt - #seLong;
      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -2077749231 ======================================================
```
{..
                    #loc=#seLong - #seCharByteShortInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong - #seCharByteShortInt; ... } ...
  CopyAssignment                           : #loc = #seLong - #seCharByteShortInt;
    ProgramSV                                : #loc (program Variable)

    Minus                                    : #seLong - #seCharByteShortInt;
      ProgramSV                                : #seLong (program JavaLongExpression)

      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1298554371 ======================================================
```
{..
                     #loc=#seLong0 - #seLong1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong0 - #seLong1; ... } ...
  CopyAssignment                           : #loc = #seLong0 - #seLong1;
    ProgramSV                                : #loc (program Variable)

    Minus                                    : #seLong0 - #seLong1;
      ProgramSV                                : #seLong0 (program JavaLongExpression)

      ProgramSV                                : #seLong1 (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1127620029 ======================================================
```
{..
                    #loc=#seCharByteShortInt0 + #seCharByteShortInt1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt0 + #seCharByteShortInt1; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt0 + #seCharByteShortInt1;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seCharByteShortInt0 + #seCharByteShortInt1;
      ProgramSV                                : #seCharByteShortInt0 (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seCharByteShortInt1 (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 74526287 ======================================================
```
{..
                    #loc=#seCharByteShortInt + #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt + #seLong; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt + #seLong;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seCharByteShortInt + #seLong;
      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1180355953 ======================================================
```
{..
                    #loc=#seLong + #seCharByteShortInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong + #seCharByteShortInt; ... } ...
  CopyAssignment                           : #loc = #seLong + #seCharByteShortInt;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seLong + #seCharByteShortInt;
      ProgramSV                                : #seLong (program JavaLongExpression)

      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1331341475 ======================================================
```
{..
                    #loc=#seLong0 + #seLong1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong0 + #seLong1; ... } ...
  CopyAssignment                           : #loc = #seLong0 + #seLong1;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seLong0 + #seLong1;
      ProgramSV                                : #seLong0 (program JavaLongExpression)

      ProgramSV                                : #seLong1 (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -245841142 ======================================================
```
{..
                     #loc=#seCharByteShortInt0 & #seCharByteShortInt1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt0 & #seCharByteShortInt1; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt0 & #seCharByteShortInt1;
    ProgramSV                                : #loc (program Variable)

    BinaryAnd                                : #seCharByteShortInt0 & #seCharByteShortInt1;
      ProgramSV                                : #seCharByteShortInt0 (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seCharByteShortInt1 (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1099651116 ======================================================
```
{..
                     #loc=#seCharByteShortInt & #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt & #seLong; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt & #seLong;
    ProgramSV                                : #loc (program Variable)

    BinaryAnd                                : #seCharByteShortInt & #seLong;
      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -452715540 ======================================================
```
{..
                     #loc=#seLong & #seCharByteShortInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong & #seCharByteShortInt; ... } ...
  CopyAssignment                           : #loc = #seLong & #seCharByteShortInt;
    ProgramSV                                : #loc (program Variable)

    BinaryAnd                                : #seLong & #seCharByteShortInt;
      ProgramSV                                : #seLong (program JavaLongExpression)

      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1810587926 ======================================================
```
{..
                     #loc=#seLong0 & #seLong1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong0 & #seLong1; ... } ...
  CopyAssignment                           : #loc = #seLong0 & #seLong1;
    ProgramSV                                : #loc (program Variable)

    BinaryAnd                                : #seLong0 & #seLong1;
      ProgramSV                                : #seLong0 (program JavaLongExpression)

      ProgramSV                                : #seLong1 (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1824794868 ======================================================
```
{..
                     #loc=#seCharByteShortInt0 | #seCharByteShortInt1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt0 | #seCharByteShortInt1; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt0 | #seCharByteShortInt1;
    ProgramSV                                : #loc (program Variable)

    BinaryOr                                 : #seCharByteShortInt0 | #seCharByteShortInt1;
      ProgramSV                                : #seCharByteShortInt0 (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seCharByteShortInt1 (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1203674626 ======================================================
```
{..
                     #loc=#seCharByteShortInt | #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt | #seLong; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt | #seLong;
    ProgramSV                                : #loc (program Variable)

    BinaryOr                                 : #seCharByteShortInt | #seLong;
      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -385920830 ======================================================
```
{..
                     #loc=#seLong | #seCharByteShortInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong | #seCharByteShortInt; ... } ...
  CopyAssignment                           : #loc = #seLong | #seCharByteShortInt;
    ProgramSV                                : #loc (program Variable)

    BinaryOr                                 : #seLong | #seCharByteShortInt;
      ProgramSV                                : #seLong (program JavaLongExpression)

      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1414140884 ======================================================
```
{..
                     #loc=#seLong0 | #seLong1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong0 | #seLong1; ... } ...
  CopyAssignment                           : #loc = #seLong0 | #seLong1;
    ProgramSV                                : #loc (program Variable)

    BinaryOr                                 : #seLong0 | #seLong1;
      ProgramSV                                : #seLong0 (program JavaLongExpression)

      ProgramSV                                : #seLong1 (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1847402448 ======================================================
```
{..
                    #loc=#seCharByteShortInt0 ^ #seCharByteShortInt1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt0 ^ #seCharByteShortInt1; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt0 ^ #seCharByteShortInt1;
    ProgramSV                                : #loc (program Variable)

    BinaryXOr                                : #seCharByteShortInt0 ^ #seCharByteShortInt1;
      ProgramSV                                : #seCharByteShortInt0 (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seCharByteShortInt1 (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 785453890 ======================================================
```
{..
                    #loc=#seCharByteShortInt ^ #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt ^ #seLong; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt ^ #seLong;
    ProgramSV                                : #loc (program Variable)

    BinaryXOr                                : #seCharByteShortInt ^ #seLong;
      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1705919234 ======================================================
```
{..
                    #loc=#seLong ^ #seCharByteShortInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong ^ #seCharByteShortInt; ... } ...
  CopyAssignment                           : #loc = #seLong ^ #seCharByteShortInt;
    ProgramSV                                : #loc (program Variable)

    BinaryXOr                                : #seLong ^ #seCharByteShortInt;
      ProgramSV                                : #seLong (program JavaLongExpression)

      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1895260688 ======================================================
```
{..
                    #loc=#seLong0 ^ #seLong1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong0 ^ #seLong1; ... } ...
  CopyAssignment                           : #loc = #seLong0 ^ #seLong1;
    ProgramSV                                : #loc (program Variable)

    BinaryXOr                                : #seLong0 ^ #seLong1;
      ProgramSV                                : #seLong0 (program JavaLongExpression)

      ProgramSV                                : #seLong1 (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1014027462 ======================================================
```
{..
                   #loc=#seCharByteShortInt0 >> #se;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt0 >> #se; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt0 >> #se;
    ProgramSV                                : #loc (program Variable)

    ShiftRight                               : #seCharByteShortInt0 >> #se;
      ProgramSV                                : #seCharByteShortInt0 (program JavaCharByteShortIntExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1665262883 ======================================================
```
{..
                    #loc=#seLong0 >> #se;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong0 >> #se; ... } ...
  CopyAssignment                           : #loc = #seLong0 >> #se;
    ProgramSV                                : #loc (program Variable)

    ShiftRight                               : #seLong0 >> #se;
      ProgramSV                                : #seLong0 (program JavaLongExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 782863260 ======================================================
```
{..
                    #loc=#seCharByteShortInt0 << #se; ...}
                
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt0 << #se; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt0 << #se;
    ProgramSV                                : #loc (program Variable)

    ShiftLeft                                : #seCharByteShortInt0 << #se;
      ProgramSV                                : #seCharByteShortInt0 (program JavaCharByteShortIntExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 251507939 ======================================================
```
{..
                    #loc=#seLong0 << #se;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong0 << #se; ... } ...
  CopyAssignment                           : #loc = #seLong0 << #se;
    ProgramSV                                : #loc (program Variable)

    ShiftLeft                                : #seLong0 << #se;
      ProgramSV                                : #seLong0 (program JavaLongExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -447829368 ======================================================
```
{..
                    #loc=#seCharByteShortInt0 >>> #se; ...}
                
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt0 >>> #se; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt0 >>> #se;
    ProgramSV                                : #loc (program Variable)

    UnsignedShiftRight                       : #seCharByteShortInt0 >>> #se;
      ProgramSV                                : #seCharByteShortInt0 (program JavaCharByteShortIntExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 96333377 ======================================================
```
{..
                    #loc=#seLong0 >>> #se;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong0 >>> #se; ... } ...
  CopyAssignment                           : #loc = #seLong0 >>> #se;
    ProgramSV                                : #loc (program Variable)

    UnsignedShiftRight                       : #seLong0 >>> #se;
      ProgramSV                                : #seLong0 (program JavaLongExpression)

      ProgramSV                                : #se (program SimpleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -314216262 ======================================================
```
{..
                    #loc = - #seCharByteShortInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = -#seCharByteShortInt; ... } ...
  CopyAssignment                           : #loc = -#seCharByteShortInt;
    ProgramSV                                : #loc (program Variable)

    Negative                                 : -#seCharByteShortInt;
      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1417218043 ======================================================
```
{..
                    #loc = - #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = -#seLong; ... } ...
  CopyAssignment                           : #loc = -#seLong;
    ProgramSV                                : #loc (program Variable)

    Negative                                 : -#seLong;
      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -2020271881 ======================================================
```
{.. #loc = ~ #seCharByteShortInt; ...}
```

ContextStatementBlock                    : ..{ ..   #loc = ~#seCharByteShortInt; ... } ...
  CopyAssignment                           : #loc = ~#seCharByteShortInt;
    ProgramSV                                : #loc (program Variable)

    BinaryNot                                : ~#seCharByteShortInt;
      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1114301402 ======================================================
```
{.. #loc = ~ #se; ...}
```

ContextStatementBlock                    : ..{ ..   #loc = ~#se; ... } ...
  CopyAssignment                           : #loc = ~#se;
    ProgramSV                                : #loc (program Variable)

    BinaryNot                                : ~#se;
      ProgramSV                                : #se (program SimpleExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1132149899 ======================================================
```
{..
                    #loc = (byte) #seShort;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (byte) #seShort; ... } ...
  CopyAssignment                           : #loc = (byte) #seShort;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (byte) #seShort;
      SchemaTypeReference                      : byte;
        ProgramElementName                       : byte


      ProgramSV                                : #seShort (program JavaShortExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1525141864 ======================================================
```
{..
                    #loc = (byte) #seInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (byte) #seInt; ... } ...
  CopyAssignment                           : #loc = (byte) #seInt;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (byte) #seInt;
      SchemaTypeReference                      : byte;
        ProgramElementName                       : byte


      ProgramSV                                : #seInt (program JavaIntExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 234482975 ======================================================
```
{..
                    #loc = (byte) #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (byte) #seLong; ... } ...
  CopyAssignment                           : #loc = (byte) #seLong;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (byte) #seLong;
      SchemaTypeReference                      : byte;
        ProgramElementName                       : byte


      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1495792056 ======================================================
```
{..
                   #loc = (short) #seInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (short) #seInt; ... } ...
  CopyAssignment                           : #loc = (short) #seInt;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (short) #seInt;
      SchemaTypeReference                      : short;
        ProgramElementName                       : short


      ProgramSV                                : #seInt (program JavaIntExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -724677523 ======================================================
```
{..
                    #loc = (short) #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (short) #seLong; ... } ...
  CopyAssignment                           : #loc = (short) #seLong;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (short) #seLong;
      SchemaTypeReference                      : short;
        ProgramElementName                       : short


      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 555142150 ======================================================
```
{.. #loc = (int) #seLong; ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (int) #seLong; ... } ...
  CopyAssignment                           : #loc = (int) #seLong;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (int) #seLong;
      SchemaTypeReference                      : int;
        ProgramElementName                       : int


      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1681054365 ======================================================
```
{..
                    #loc = (char) #seByte;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (char) #seByte; ... } ...
  CopyAssignment                           : #loc = (char) #seByte;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (char) #seByte;
      SchemaTypeReference                      : char;
        ProgramElementName                       : char


      ProgramSV                                : #seByte (program JavaByteExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 922238403 ======================================================
```
{..
                    #loc = (char) #seShort;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (char) #seShort; ... } ...
  CopyAssignment                           : #loc = (char) #seShort;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (char) #seShort;
      SchemaTypeReference                      : char;
        ProgramElementName                       : char


      ProgramSV                                : #seShort (program JavaShortExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 821135158 ======================================================
```
{..
                    #loc = (char) #seInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (char) #seInt; ... } ...
  CopyAssignment                           : #loc = (char) #seInt;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (char) #seInt;
      SchemaTypeReference                      : char;
        ProgramElementName                       : char


      ProgramSV                                : #seInt (program JavaIntExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -114888431 ======================================================
```
{..
                    #loc = (char) #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (char) #seLong; ... } ...
  CopyAssignment                           : #loc = (char) #seLong;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (char) #seLong;
      SchemaTypeReference                      : char;
        ProgramElementName                       : char


      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -923989217 ======================================================
```
{.. #lhs = #seFloat0 == #seFloat1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seFloat0 == #seFloat1; ... } ...
  CopyAssignment                           : #lhs = #seFloat0 == #seFloat1;
    ProgramSV                                : #lhs (program LeftHandSide)

    Equals                                   : #seFloat0 == #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1224232891 ======================================================
```
{.. #lhs = #seFloat0 != #seFloat1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seFloat0 != #seFloat1; ... } ...
  CopyAssignment                           : #lhs = #seFloat0 != #seFloat1;
    ProgramSV                                : #lhs (program LeftHandSide)

    NotEquals                                : #seFloat0 != #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 83488089 ======================================================
```
{.. #lhs = #seFloat0 < #seFloat1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seFloat0 < #seFloat1; ... } ...
  CopyAssignment                           : #lhs = #seFloat0 < #seFloat1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessThan                                 : #seFloat0 < #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 73083136 ======================================================
```
{.. #lhs = #seFloat0 <= #seFloat1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seFloat0 <= #seFloat1; ... } ...
  CopyAssignment                           : #lhs = #seFloat0 <= #seFloat1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessOrEquals                             : #seFloat0 <= #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1504859813 ======================================================
```
{.. #lhs = #seFloat0 > #seFloat1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seFloat0 > #seFloat1; ... } ...
  CopyAssignment                           : #lhs = #seFloat0 > #seFloat1;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterThan                              : #seFloat0 > #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1921061570 ======================================================
```
{.. #lhs = #seFloat0 >= #seFloat1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seFloat0 >= #seFloat1; ... } ...
  CopyAssignment                           : #lhs = #seFloat0 >= #seFloat1;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterOrEquals                          : #seFloat0 >= #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 380909651 ======================================================
```
{.. #lhs = #seDouble0 == #seDouble1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seDouble0 == #seDouble1; ... } ...
  CopyAssignment                           : #lhs = #seDouble0 == #seDouble1;
    ProgramSV                                : #lhs (program LeftHandSide)

    Equals                                   : #seDouble0 == #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1743681737 ======================================================
```
{.. #lhs = #seDouble0 != #seDouble1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seDouble0 != #seDouble1; ... } ...
  CopyAssignment                           : #lhs = #seDouble0 != #seDouble1;
    ProgramSV                                : #lhs (program LeftHandSide)

    NotEquals                                : #seDouble0 != #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 539384783 ======================================================
```
{.. #lhs = #seDouble0 < #seDouble1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seDouble0 < #seDouble1; ... } ...
  CopyAssignment                           : #lhs = #seDouble0 < #seDouble1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessThan                                 : #seDouble0 < #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1225381522 ======================================================
```
{.. #lhs = #seDouble0 <= #seDouble1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seDouble0 <= #seDouble1; ... } ...
  CopyAssignment                           : #lhs = #seDouble0 <= #seDouble1;
    ProgramSV                                : #lhs (program LeftHandSide)

    LessOrEquals                             : #seDouble0 <= #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1454759923 ======================================================
```
{.. #lhs = #seDouble0 > #seDouble1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seDouble0 > #seDouble1; ... } ...
  CopyAssignment                           : #lhs = #seDouble0 > #seDouble1;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterThan                              : #seDouble0 > #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -463562220 ======================================================
```
{.. #lhs = #seDouble0 >= #seDouble1; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seDouble0 >= #seDouble1; ... } ...
  CopyAssignment                           : #lhs = #seDouble0 >= #seDouble1;
    ProgramSV                                : #lhs (program LeftHandSide)

    GreaterOrEquals                          : #seDouble0 >= #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 851839791 ======================================================
```
{..
                    #loc = - #seFloat;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = -#seFloat; ... } ...
  CopyAssignment                           : #loc = -#seFloat;
    ProgramSV                                : #loc (program Variable)

    Negative                                 : -#seFloat;
      ProgramSV                                : #seFloat (program JavaFloatExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1968814298 ======================================================
```
{..
                    #loc = - #seDouble;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = -#seDouble; ... } ...
  CopyAssignment                           : #loc = -#seDouble;
    ProgramSV                                : #loc (program Variable)

    Negative                                 : -#seDouble;
      ProgramSV                                : #seDouble (program JavaDoubleExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1340254389 ======================================================
```
{..
                    #loc=#seFloat0 + #seFloat1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seFloat0 + #seFloat1; ... } ...
  CopyAssignment                           : #loc = #seFloat0 + #seFloat1;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seFloat0 + #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 377573671 ======================================================
```
{..
                    #loc = #seFloat0 - #seFloat1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seFloat0 - #seFloat1; ... } ...
  CopyAssignment                           : #loc = #seFloat0 - #seFloat1;
    ProgramSV                                : #loc (program Variable)

    Minus                                    : #seFloat0 - #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1661330140 ======================================================
```
{..
                    #loc = #seFloat0 * #seFloat1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seFloat0 * #seFloat1; ... } ...
  CopyAssignment                           : #loc = #seFloat0 * #seFloat1;
    ProgramSV                                : #loc (program Variable)

    Times                                    : #seFloat0 * #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 305187113 ======================================================
```
{..
                    #loc = #seFloat0 / #seFloat1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seFloat0 / #seFloat1; ... } ...
  CopyAssignment                           : #loc = #seFloat0 / #seFloat1;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seFloat0 / #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1039216003 ======================================================
```
{..
                    #loc=#seDouble0 + #seDouble1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seDouble0 + #seDouble1; ... } ...
  CopyAssignment                           : #loc = #seDouble0 + #seDouble1;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seDouble0 + #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1204562203 ======================================================
```
{..
                    #loc = #seDouble0 - #seDouble1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seDouble0 - #seDouble1; ... } ...
  CopyAssignment                           : #loc = #seDouble0 - #seDouble1;
    ProgramSV                                : #loc (program Variable)

    Minus                                    : #seDouble0 - #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1871913794 ======================================================
```
{..
                    #loc = #seDouble0 * #seDouble1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seDouble0 * #seDouble1; ... } ...
  CopyAssignment                           : #loc = #seDouble0 * #seDouble1;
    ProgramSV                                : #loc (program Variable)

    Times                                    : #seDouble0 * #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1039421095 ======================================================
```
{..
                    #loc = #seDouble0 / #seDouble1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seDouble0 / #seDouble1; ... } ...
  CopyAssignment                           : #loc = #seDouble0 / #seDouble1;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seDouble0 / #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1340254389 ======================================================
```
{..
                    #loc=#seFloat0 + #seFloat1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seFloat0 + #seFloat1; ... } ...
  CopyAssignment                           : #loc = #seFloat0 + #seFloat1;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seFloat0 + #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1039216003 ======================================================
```
{..
                    #loc=#seDouble0 + #seDouble1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seDouble0 + #seDouble1; ... } ...
  CopyAssignment                           : #loc = #seDouble0 + #seDouble1;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seDouble0 + #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 377573671 ======================================================
```
{..
                    #loc = #seFloat0 - #seFloat1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seFloat0 - #seFloat1; ... } ...
  CopyAssignment                           : #loc = #seFloat0 - #seFloat1;
    ProgramSV                                : #loc (program Variable)

    Minus                                    : #seFloat0 - #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1204562203 ======================================================
```
{..
                    #loc = #seDouble0 - #seDouble1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seDouble0 - #seDouble1; ... } ...
  CopyAssignment                           : #loc = #seDouble0 - #seDouble1;
    ProgramSV                                : #loc (program Variable)

    Minus                                    : #seDouble0 - #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1661330140 ======================================================
```
{..
                    #loc = #seFloat0 * #seFloat1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seFloat0 * #seFloat1; ... } ...
  CopyAssignment                           : #loc = #seFloat0 * #seFloat1;
    ProgramSV                                : #loc (program Variable)

    Times                                    : #seFloat0 * #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1871913794 ======================================================
```
{..
                    #loc = #seDouble0 * #seDouble1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seDouble0 * #seDouble1; ... } ...
  CopyAssignment                           : #loc = #seDouble0 * #seDouble1;
    ProgramSV                                : #loc (program Variable)

    Times                                    : #seDouble0 * #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 305187113 ======================================================
```
{..
                    #loc = #seFloat0 / #seFloat1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seFloat0 / #seFloat1; ... } ...
  CopyAssignment                           : #loc = #seFloat0 / #seFloat1;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seFloat0 / #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1039421095 ======================================================
```
{..
                    #loc = #seDouble0 / #seDouble1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seDouble0 / #seDouble1; ... } ...
  CopyAssignment                           : #loc = #seDouble0 / #seDouble1;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seDouble0 / #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 667119903 ======================================================
```
{..
                    #loc = #seFloat0 % #seFloat1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seFloat0 % #seFloat1; ... } ...
  CopyAssignment                           : #loc = #seFloat0 % #seFloat1;
    ProgramSV                                : #loc (program Variable)

    Modulo                                   : #seFloat0 % #seFloat1;
      ProgramSV                                : #seFloat0 (program JavaFloatExpression)

      ProgramSV                                : #seFloat1 (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1590560803 ======================================================
```
{..
                    #loc = #seDouble0 % #seDouble1;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seDouble0 % #seDouble1; ... } ...
  CopyAssignment                           : #loc = #seDouble0 % #seDouble1;
    ProgramSV                                : #loc (program Variable)

    Modulo                                   : #seDouble0 % #seDouble1;
      ProgramSV                                : #seDouble0 (program JavaDoubleExpression)

      ProgramSV                                : #seDouble1 (program JavaDoubleExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 752449760 ======================================================
```
{..
                    #loc = #seLong + #seFloat;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seLong + #seFloat; ... } ...
  CopyAssignment                           : #loc = #seLong + #seFloat;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seLong + #seFloat;
      ProgramSV                                : #seLong (program JavaLongExpression)

      ProgramSV                                : #seFloat (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1601802635 ======================================================
```
{..
                    #loc = #seCharByteShortInt + #seFloat;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seCharByteShortInt + #seFloat; ... } ...
  CopyAssignment                           : #loc = #seCharByteShortInt + #seFloat;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seCharByteShortInt + #seFloat;
      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)

      ProgramSV                                : #seFloat (program JavaFloatExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1499093288 ======================================================
```
{..
                    #loc = #seFloat + #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seFloat + #seLong; ... } ...
  CopyAssignment                           : #loc = #seFloat + #seLong;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seFloat + #seLong;
      ProgramSV                                : #seFloat (program JavaFloatExpression)

      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 765981325 ======================================================
```
{..
                    #loc = (float) #seLong;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (float) #seLong; ... } ...
  CopyAssignment                           : #loc = (float) #seLong;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (float) #seLong;
      SchemaTypeReference                      : float;
        ProgramElementName                       : float


      ProgramSV                                : #seLong (program JavaLongExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -379920574 ======================================================
```
{..
                    #loc = (float) #seCharByteShortInt;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (float) #seCharByteShortInt; ... } ...
  CopyAssignment                           : #loc = (float) #seCharByteShortInt;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (float) #seCharByteShortInt;
      SchemaTypeReference                      : float;
        ProgramElementName                       : float


      ProgramSV                                : #seCharByteShortInt (program JavaCharByteShortIntExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -188456537 ======================================================
```
{..
                    #loc = (float) #seFloat;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (float) #seFloat; ... } ...
  CopyAssignment                           : #loc = (float) #seFloat;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (float) #seFloat;
      SchemaTypeReference                      : float;
        ProgramElementName                       : float


      ProgramSV                                : #seFloat (program JavaFloatExpression)





=== -1735419236 ======================================================
```
{..
                    #loc = #seFloat;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seFloat; ... } ...
  CopyAssignment                           : #loc = #seFloat;
    ProgramSV                                : #loc (program Variable)

    ProgramSV                                : #seFloat (program JavaFloatExpression)




=== -1702098421 ======================================================
```
{..
                    #loc = (double) #seDouble;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (double) #seDouble; ... } ...
  CopyAssignment                           : #loc = (double) #seDouble;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (double) #seDouble;
      SchemaTypeReference                      : double;
        ProgramElementName                       : double


      ProgramSV                                : #seDouble (program JavaDoubleExpression)





=== -926804211 ======================================================
```
{..
                    #loc = #seDouble;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seDouble; ... } ...
  CopyAssignment                           : #loc = #seDouble;
    ProgramSV                                : #loc (program Variable)

    ProgramSV                                : #seDouble (program JavaDoubleExpression)




=== -1738235142 ======================================================
```
{..
                    #loc = (int) #seFloat;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (int) #seFloat; ... } ...
  CopyAssignment                           : #loc = (int) #seFloat;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (int) #seFloat;
      SchemaTypeReference                      : int;
        ProgramElementName                       : int


      ProgramSV                                : #seFloat (program JavaFloatExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 832786121 ======================================================
```
{..
                    #loc = (long) #seFloat;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (long) #seFloat; ... } ...
  CopyAssignment                           : #loc = (long) #seFloat;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (long) #seFloat;
      SchemaTypeReference                      : long;
        ProgramElementName                       : long


      ProgramSV                                : #seFloat (program JavaFloatExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 984725757 ======================================================
```
{.. #loc = (float) #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (float) #nse; ... } ...
  CopyAssignment                           : #loc = (float) #nse;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (float) #nse;
      SchemaTypeReference                      : float;
        ProgramElementName                       : float


      ProgramSV                                : #nse (program NonSimpleExpression)





=== -2088739861 ======================================================
```
{.. #typeof(#nse) #v = #nse; #loc = (float) #v;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #loc = (float) #v; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #loc = (float) #v;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (float) #v;
      SchemaTypeReference                      : float;
        ProgramElementName                       : float


      ProgramSV                                : #v (program Variable)





=== -1735970912 ======================================================
```
{.. #loc = (double) #nse; ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (double) #nse; ... } ...
  CopyAssignment                           : #loc = (double) #nse;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (double) #nse;
      SchemaTypeReference                      : double;
        ProgramElementName                       : double


      ProgramSV                                : #nse (program NonSimpleExpression)





=== 400560552 ======================================================
```
{.. #typeof(#nse) #v = #nse; #loc = (double) #v;  ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #v = #nse;   #loc = (double) #v; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #v = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #v = #nse;
      ProgramSV                                : #v (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #loc = (double) #v;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (double) #v;
      SchemaTypeReference                      : double;
        ProgramElementName                       : double


      ProgramSV                                : #v (program Variable)





=== 1535981135 ======================================================
```
{.. #lhs = (\bigint) #seAny; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = (\bigint) #seAny; ... } ...
  CopyAssignment                           : #lhs = (\bigint) #seAny;
    ProgramSV                                : #lhs (program LeftHandSide)

    TypeCast                                 : (\bigint) #seAny;
      SchemaTypeReference                      : \bigint;
        ProgramElementName                       : \bigint


      ProgramSV                                : #seAny (program AnyNumberTypeExpression)





=== -1802409943 ======================================================
```
{.. #lhs = #seAny;  ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = #seAny; ... } ...
  CopyAssignment                           : #lhs = #seAny;
    ProgramSV                                : #lhs (program LeftHandSide)

    ProgramSV                                : #seAny (program AnyNumberTypeExpression)




=== -98908617 ======================================================
```
{..
                    #loc=#seBigint + #seAny;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seBigint + #seAny; ... } ...
  CopyAssignment                           : #loc = #seBigint + #seAny;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seBigint + #seAny;
      ProgramSV                                : #seBigint (program JavaBigintExpression)

      ProgramSV                                : #seAny (program AnyNumberTypeExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 265392949 ======================================================
```
{..
                    #loc=#seAny + #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seAny + #seBigint; ... } ...
  CopyAssignment                           : #loc = #seAny + #seBigint;
    ProgramSV                                : #loc (program Variable)

    Plus                                     : #seAny + #seBigint;
      ProgramSV                                : #seAny (program AnyNumberTypeExpression)

      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1791330562 ======================================================
```
{..
                    #loc = #seBigint * #seAny;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seBigint * #seAny; ... } ...
  CopyAssignment                           : #loc = #seBigint * #seAny;
    ProgramSV                                : #loc (program Variable)

    Times                                    : #seBigint * #seAny;
      ProgramSV                                : #seBigint (program JavaBigintExpression)

      ProgramSV                                : #seAny (program AnyNumberTypeExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 767964058 ======================================================
```
{..
                    #loc = #seAny * #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seAny * #seBigint; ... } ...
  CopyAssignment                           : #loc = #seAny * #seBigint;
    ProgramSV                                : #loc (program Variable)

    Times                                    : #seAny * #seBigint;
      ProgramSV                                : #seAny (program AnyNumberTypeExpression)

      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -53644109 ======================================================
```
{..
                    #loc=#seBigint / #seAny;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seBigint / #seAny; ... } ...
  CopyAssignment                           : #loc = #seBigint / #seAny;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seBigint / #seAny;
      ProgramSV                                : #seBigint (program JavaBigintExpression)

      ProgramSV                                : #seAny (program AnyNumberTypeExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 120619833 ======================================================
```
{..
                    #loc=#seAny / #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seAny / #seBigint; ... } ...
  CopyAssignment                           : #loc = #seAny / #seBigint;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seAny / #seBigint;
      ProgramSV                                : #seAny (program AnyNumberTypeExpression)

      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -166805379 ======================================================
```
{..
                    #loc=#seBigint % #seAny;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seBigint % #seAny; ... } ...
  CopyAssignment                           : #loc = #seBigint % #seAny;
    ProgramSV                                : #loc (program Variable)

    Modulo                                   : #seBigint % #seAny;
      ProgramSV                                : #seBigint (program JavaBigintExpression)

      ProgramSV                                : #seAny (program AnyNumberTypeExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 482552623 ======================================================
```
{..
                    #loc=#seAny % #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seAny % #seBigint; ... } ...
  CopyAssignment                           : #loc = #seAny % #seBigint;
    ProgramSV                                : #loc (program Variable)

    Modulo                                   : #seAny % #seBigint;
      ProgramSV                                : #seAny (program AnyNumberTypeExpression)

      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -53644109 ======================================================
```
{..
                    #loc=#seBigint / #seAny;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seBigint / #seAny; ... } ...
  CopyAssignment                           : #loc = #seBigint / #seAny;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seBigint / #seAny;
      ProgramSV                                : #seBigint (program JavaBigintExpression)

      ProgramSV                                : #seAny (program AnyNumberTypeExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 120619833 ======================================================
```
{..
                    #loc=#seAny / #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seAny / #seBigint; ... } ...
  CopyAssignment                           : #loc = #seAny / #seBigint;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seAny / #seBigint;
      ProgramSV                                : #seAny (program AnyNumberTypeExpression)

      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -166805379 ======================================================
```
{..
                    #loc=#seBigint % #seAny;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seBigint % #seAny; ... } ...
  CopyAssignment                           : #loc = #seBigint % #seAny;
    ProgramSV                                : #loc (program Variable)

    Modulo                                   : #seBigint % #seAny;
      ProgramSV                                : #seBigint (program JavaBigintExpression)

      ProgramSV                                : #seAny (program AnyNumberTypeExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 482552623 ======================================================
```
{..
                    #loc=#seAny % #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seAny % #seBigint; ... } ...
  CopyAssignment                           : #loc = #seAny % #seBigint;
    ProgramSV                                : #loc (program Variable)

    Modulo                                   : #seAny % #seBigint;
      ProgramSV                                : #seAny (program AnyNumberTypeExpression)

      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -53644109 ======================================================
```
{..
                    #loc=#seBigint / #seAny;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seBigint / #seAny; ... } ...
  CopyAssignment                           : #loc = #seBigint / #seAny;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seBigint / #seAny;
      ProgramSV                                : #seBigint (program JavaBigintExpression)

      ProgramSV                                : #seAny (program AnyNumberTypeExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -2018902745 ======================================================
```
{..
                            throw new java.lang.ArithmeticException();
                        ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArithmeticException(); ... } ...
  Throw                                    : throw new java.lang.ArithmeticException();
    New                                      : new java.lang.ArithmeticException();
      SchemaTypeReference                      : java.lang.ArithmeticException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArithmeticException






=== 120619833 ======================================================
```
{..
                    #loc=#seAny / #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seAny / #seBigint; ... } ...
  CopyAssignment                           : #loc = #seAny / #seBigint;
    ProgramSV                                : #loc (program Variable)

    Divide                                   : #seAny / #seBigint;
      ProgramSV                                : #seAny (program AnyNumberTypeExpression)

      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -2018902745 ======================================================
```
{..
                            throw new java.lang.ArithmeticException();
                        ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArithmeticException(); ... } ...
  Throw                                    : throw new java.lang.ArithmeticException();
    New                                      : new java.lang.ArithmeticException();
      SchemaTypeReference                      : java.lang.ArithmeticException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArithmeticException






=== -166805379 ======================================================
```
{..
                    #loc=#seBigint % #seAny;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seBigint % #seAny; ... } ...
  CopyAssignment                           : #loc = #seBigint % #seAny;
    ProgramSV                                : #loc (program Variable)

    Modulo                                   : #seBigint % #seAny;
      ProgramSV                                : #seBigint (program JavaBigintExpression)

      ProgramSV                                : #seAny (program AnyNumberTypeExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1181888635 ======================================================
```
{..
                           throw new java.lang.ArithmeticException();
                        ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArithmeticException(); ... } ...
  Throw                                    : throw new java.lang.ArithmeticException();
    New                                      : new java.lang.ArithmeticException();
      SchemaTypeReference                      : java.lang.ArithmeticException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArithmeticException






=== 482552623 ======================================================
```
{..
                    #loc=#seAny % #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seAny % #seBigint; ... } ...
  CopyAssignment                           : #loc = #seAny % #seBigint;
    ProgramSV                                : #loc (program Variable)

    Modulo                                   : #seAny % #seBigint;
      ProgramSV                                : #seAny (program AnyNumberTypeExpression)

      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1181888635 ======================================================
```
{..
                           throw new java.lang.ArithmeticException();
                        ...}
```

ContextStatementBlock                    : ..{ ..   throw new java.lang.ArithmeticException(); ... } ...
  Throw                                    : throw new java.lang.ArithmeticException();
    New                                      : new java.lang.ArithmeticException();
      SchemaTypeReference                      : java.lang.ArithmeticException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : ArithmeticException






=== -1757382181 ======================================================
```
{..
                    #loc = #seBigint - #seAny;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seBigint - #seAny; ... } ...
  CopyAssignment                           : #loc = #seBigint - #seAny;
    ProgramSV                                : #loc (program Variable)

    Minus                                    : #seBigint - #seAny;
      ProgramSV                                : #seBigint (program JavaBigintExpression)

      ProgramSV                                : #seAny (program AnyNumberTypeExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1488099427 ======================================================
```
{..
                    #loc = #seAny - #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = #seAny - #seBigint; ... } ...
  CopyAssignment                           : #loc = #seAny - #seBigint;
    ProgramSV                                : #loc (program Variable)

    Minus                                    : #seAny - #seBigint;
      ProgramSV                                : #seAny (program AnyNumberTypeExpression)

      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 271314296 ======================================================
```
{..
                    #loc = - #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = -#seBigint; ... } ...
  CopyAssignment                           : #loc = -#seBigint;
    ProgramSV                                : #loc (program Variable)

    Negative                                 : -#seBigint;
      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 82823136 ======================================================
```
{..
                    #loc = (short) #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (short) #seBigint; ... } ...
  CopyAssignment                           : #loc = (short) #seBigint;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (short) #seBigint;
      SchemaTypeReference                      : short;
        ProgramElementName                       : short


      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 161347769 ======================================================
```
{.. #loc = (int) #seBigint; ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (int) #seBigint; ... } ...
  CopyAssignment                           : #loc = (int) #seBigint;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (int) #seBigint;
      SchemaTypeReference                      : int;
        ProgramElementName                       : int


      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -927266210 ======================================================
```
{.. #loc = (long) #seBigint; ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (long) #seBigint; ... } ...
  CopyAssignment                           : #loc = (long) #seBigint;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (long) #seBigint;
      SchemaTypeReference                      : long;
        ProgramElementName                       : long


      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1974588292 ======================================================
```
{..
                    #loc = (char) #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (char) #seBigint; ... } ...
  CopyAssignment                           : #loc = (char) #seBigint;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (char) #seBigint;
      SchemaTypeReference                      : char;
        ProgramElementName                       : char


      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -1581906926 ======================================================
```
{..
                    #loc = (byte) #seBigint;
                ...}
```

ContextStatementBlock                    : ..{ ..   #loc = (byte) #seBigint; ... } ...
  CopyAssignment                           : #loc = (byte) #seBigint;
    ProgramSV                                : #loc (program Variable)

    TypeCast                                 : (byte) #seBigint;
      SchemaTypeReference                      : byte;
        ProgramElementName                       : byte


      ProgramSV                                : #seBigint (program JavaBigintExpression)





=== -1591104758 ======================================================
```
{..  ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -600625534 ======================================================
```
{.. #v = \set_union(#nseLeft, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \set_union(#nseLeft, #eRight); ... } ...
  CopyAssignment                           : #v = \set_union(#nseLeft, #eRight);
    ProgramSV                                : #v (program Variable)

    SetUnion                                 : \set_union(#nseLeft, #eRight);
      ProgramSV                                : #nseLeft (program NonSimpleExpression)

      ProgramSV                                : #eRight (program Expression)





=== -1044452409 ======================================================
```
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \set_union(#vLeftNew, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseLeft) #vLeftNew = #nseLeft;   #v = \set_union(#vLeftNew, #eRight); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseLeft) #vLeftNew = #nseLeft;
    TypeOf                                   : #typeof( #nseLeft (program NonSimpleExpression));
      ProgramSV                                : #nseLeft (program NonSimpleExpression)


    VariableSpecification                    : #vLeftNew = #nseLeft;
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #nseLeft (program NonSimpleExpression)



  CopyAssignment                           : #v = \set_union(#vLeftNew, #eRight);
    ProgramSV                                : #v (program Variable)

    SetUnion                                 : \set_union(#vLeftNew, #eRight);
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #eRight (program Expression)





=== 815569895 ======================================================
```
{.. #v = \set_union(#seLeft, #nseRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \set_union(#seLeft, #nseRight); ... } ...
  CopyAssignment                           : #v = \set_union(#seLeft, #nseRight);
    ProgramSV                                : #v (program Variable)

    SetUnion                                 : \set_union(#seLeft, #nseRight);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #nseRight (program NonSimpleExpression)





=== -112598989 ======================================================
```
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \set_union(#seLeft, #vRightNew); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseRight) #vRightNew = #nseRight;   #v = \set_union(#seLeft, #vRightNew); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseRight) #vRightNew = #nseRight;
    TypeOf                                   : #typeof( #nseRight (program NonSimpleExpression));
      ProgramSV                                : #nseRight (program NonSimpleExpression)


    VariableSpecification                    : #vRightNew = #nseRight;
      ProgramSV                                : #vRightNew (program Variable)

      ProgramSV                                : #nseRight (program NonSimpleExpression)



  CopyAssignment                           : #v = \set_union(#seLeft, #vRightNew);
    ProgramSV                                : #v (program Variable)

    SetUnion                                 : \set_union(#seLeft, #vRightNew);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #vRightNew (program Variable)





=== -946842955 ======================================================
```
{.. #v = \intersect(#nseLeft, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \intersect(#nseLeft, #eRight); ... } ...
  CopyAssignment                           : #v = \intersect(#nseLeft, #eRight);
    ProgramSV                                : #v (program Variable)

    Intersect                                : \intersect(#nseLeft, #eRight);
      ProgramSV                                : #nseLeft (program NonSimpleExpression)

      ProgramSV                                : #eRight (program Expression)





=== 1107709428 ======================================================
```
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \intersect(#vLeftNew, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseLeft) #vLeftNew = #nseLeft;   #v = \intersect(#vLeftNew, #eRight); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseLeft) #vLeftNew = #nseLeft;
    TypeOf                                   : #typeof( #nseLeft (program NonSimpleExpression));
      ProgramSV                                : #nseLeft (program NonSimpleExpression)


    VariableSpecification                    : #vLeftNew = #nseLeft;
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #nseLeft (program NonSimpleExpression)



  CopyAssignment                           : #v = \intersect(#vLeftNew, #eRight);
    ProgramSV                                : #v (program Variable)

    Intersect                                : \intersect(#vLeftNew, #eRight);
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #eRight (program Expression)





=== -1327235564 ======================================================
```
{.. #v = \intersect(#seLeft, #nseRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \intersect(#seLeft, #nseRight); ... } ...
  CopyAssignment                           : #v = \intersect(#seLeft, #nseRight);
    ProgramSV                                : #v (program Variable)

    Intersect                                : \intersect(#seLeft, #nseRight);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #nseRight (program NonSimpleExpression)





=== -2115058778 ======================================================
```
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \intersect(#seLeft, #vRightNew); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseRight) #vRightNew = #nseRight;   #v = \intersect(#seLeft, #vRightNew); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseRight) #vRightNew = #nseRight;
    TypeOf                                   : #typeof( #nseRight (program NonSimpleExpression));
      ProgramSV                                : #nseRight (program NonSimpleExpression)


    VariableSpecification                    : #vRightNew = #nseRight;
      ProgramSV                                : #vRightNew (program Variable)

      ProgramSV                                : #nseRight (program NonSimpleExpression)



  CopyAssignment                           : #v = \intersect(#seLeft, #vRightNew);
    ProgramSV                                : #v (program Variable)

    Intersect                                : \intersect(#seLeft, #vRightNew);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #vRightNew (program Variable)





=== 494437377 ======================================================
```
{.. #v = \set_minus(#nseLeft, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \set_minus(#nseLeft, #eRight); ... } ...
  CopyAssignment                           : #v = \set_minus(#nseLeft, #eRight);
    ProgramSV                                : #v (program Variable)

    SetMinus                                 : \set_minus(#nseLeft, #eRight);
      ProgramSV                                : #nseLeft (program NonSimpleExpression)

      ProgramSV                                : #eRight (program Expression)





=== -1457240536 ======================================================
```
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \set_minus(#vLeftNew, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseLeft) #vLeftNew = #nseLeft;   #v = \set_minus(#vLeftNew, #eRight); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseLeft) #vLeftNew = #nseLeft;
    TypeOf                                   : #typeof( #nseLeft (program NonSimpleExpression));
      ProgramSV                                : #nseLeft (program NonSimpleExpression)


    VariableSpecification                    : #vLeftNew = #nseLeft;
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #nseLeft (program NonSimpleExpression)



  CopyAssignment                           : #v = \set_minus(#vLeftNew, #eRight);
    ProgramSV                                : #v (program Variable)

    SetMinus                                 : \set_minus(#vLeftNew, #eRight);
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #eRight (program Expression)





=== 402781768 ======================================================
```
{.. #v = \set_minus(#seLeft, #nseRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \set_minus(#seLeft, #nseRight); ... } ...
  CopyAssignment                           : #v = \set_minus(#seLeft, #nseRight);
    ProgramSV                                : #v (program Variable)

    SetMinus                                 : \set_minus(#seLeft, #nseRight);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #nseRight (program NonSimpleExpression)





=== -24129038 ======================================================
```
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \set_minus(#seLeft, #vRightNew); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseRight) #vRightNew = #nseRight;   #v = \set_minus(#seLeft, #vRightNew); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseRight) #vRightNew = #nseRight;
    TypeOf                                   : #typeof( #nseRight (program NonSimpleExpression));
      ProgramSV                                : #nseRight (program NonSimpleExpression)


    VariableSpecification                    : #vRightNew = #nseRight;
      ProgramSV                                : #vRightNew (program Variable)

      ProgramSV                                : #nseRight (program NonSimpleExpression)



  CopyAssignment                           : #v = \set_minus(#seLeft, #vRightNew);
    ProgramSV                                : #v (program Variable)

    SetMinus                                 : \set_minus(#seLeft, #vRightNew);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #vRightNew (program Variable)





=== 1048167197 ======================================================
```
{.. #v = \singleton(#nseObj.#a); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \singleton(#nseObj.#a); ... } ...
  CopyAssignment                           : #v = \singleton(#nseObj.#a);
    ProgramSV                                : #v (program Variable)

    Singleton                                : \singleton(#nseObj.#a);
      SchematicFieldReference                  : #nseObj.#a;
        ProgramSV                                : #nseObj (program NonSimpleExpression)

        ProgramSV                                : #a (program Variable)






=== -1110880948 ======================================================
```
{.. #typeof(#nseObj) #vObjNew=#nseObj; #v = \singleton(#vObjNew.#a); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseObj) #vObjNew = #nseObj;   #v = \singleton(#vObjNew.#a); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseObj) #vObjNew = #nseObj;
    TypeOf                                   : #typeof( #nseObj (program NonSimpleExpression));
      ProgramSV                                : #nseObj (program NonSimpleExpression)


    VariableSpecification                    : #vObjNew = #nseObj;
      ProgramSV                                : #vObjNew (program Variable)

      ProgramSV                                : #nseObj (program NonSimpleExpression)



  CopyAssignment                           : #v = \singleton(#vObjNew.#a);
    ProgramSV                                : #v (program Variable)

    Singleton                                : \singleton(#vObjNew.#a);
      SchematicFieldReference                  : #vObjNew.#a;
        ProgramSV                                : #vObjNew (program Variable)

        ProgramSV                                : #a (program Variable)






=== -193757055 ======================================================
```
{.. #v = \singleton(#seObj.#a); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \singleton(#seObj.#a); ... } ...
  CopyAssignment                           : #v = \singleton(#seObj.#a);
    ProgramSV                                : #v (program Variable)

    Singleton                                : \singleton(#seObj.#a);
      SchematicFieldReference                  : #seObj.#a;
        ProgramSV                                : #seObj (program SimpleExpression)

        ProgramSV                                : #a (program Variable)






=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 205230595 ======================================================
```
{.. #v = \all_objects(#eObj.#a); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \all_objects(#eObj.#a); ... } ...
  CopyAssignment                           : #v = \all_objects(#eObj.#a);
    ProgramSV                                : #v (program Variable)

    AllObjects                               : \all_objects(#eObj.#a);
      SchematicFieldReference                  : #eObj.#a;
        ProgramSV                                : #eObj (program Expression)

        ProgramSV                                : #a (program Variable)






=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -989850621 ======================================================
```
{.. #v = \all_fields(#nseObj); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \all_fields(#nseObj); ... } ...
  CopyAssignment                           : #v = \all_fields(#nseObj);
    ProgramSV                                : #v (program Variable)

    AllFields                                : \all_fields(#nseObj);
      ProgramSV                                : #nseObj (program NonSimpleExpression)





=== 1956583506 ======================================================
```
{.. #typeof(#nseObj) #vObjNew=#nseObj; #v = \all_fields(#vObjNew); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseObj) #vObjNew = #nseObj;   #v = \all_fields(#vObjNew); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseObj) #vObjNew = #nseObj;
    TypeOf                                   : #typeof( #nseObj (program NonSimpleExpression));
      ProgramSV                                : #nseObj (program NonSimpleExpression)


    VariableSpecification                    : #vObjNew = #nseObj;
      ProgramSV                                : #vObjNew (program Variable)

      ProgramSV                                : #nseObj (program NonSimpleExpression)



  CopyAssignment                           : #v = \all_fields(#vObjNew);
    ProgramSV                                : #v (program Variable)

    AllFields                                : \all_fields(#vObjNew);
      ProgramSV                                : #vObjNew (program Variable)





=== -1149854722 ======================================================
```
{.. #v = \seq_concat(#nseLeft, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \singleton(#nseLeft, #eRight); ... } ...
  CopyAssignment                           : #v = \singleton(#nseLeft, #eRight);
    ProgramSV                                : #v (program Variable)

    SeqConcat                                : \singleton(#nseLeft, #eRight);
      ProgramSV                                : #nseLeft (program NonSimpleExpression)

      ProgramSV                                : #eRight (program Expression)





=== 1474756361 ======================================================
```
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \seq_concat(#vLeftNew, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseLeft) #vLeftNew = #nseLeft;   #v = \singleton(#vLeftNew, #eRight); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseLeft) #vLeftNew = #nseLeft;
    TypeOf                                   : #typeof( #nseLeft (program NonSimpleExpression));
      ProgramSV                                : #nseLeft (program NonSimpleExpression)


    VariableSpecification                    : #vLeftNew = #nseLeft;
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #nseLeft (program NonSimpleExpression)



  CopyAssignment                           : #v = \singleton(#vLeftNew, #eRight);
    ProgramSV                                : #v (program Variable)

    SeqConcat                                : \singleton(#vLeftNew, #eRight);
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #eRight (program Expression)





=== 969334251 ======================================================
```
{.. #v = \seq_concat(#seLeft, #nseRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \singleton(#seLeft, #nseRight); ... } ...
  CopyAssignment                           : #v = \singleton(#seLeft, #nseRight);
    ProgramSV                                : #v (program Variable)

    SeqConcat                                : \singleton(#seLeft, #nseRight);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #nseRight (program NonSimpleExpression)





=== -1522003261 ======================================================
```
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \seq_concat(#seLeft, #vRightNew); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseRight) #vRightNew = #nseRight;   #v = \singleton(#seLeft, #vRightNew); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseRight) #vRightNew = #nseRight;
    TypeOf                                   : #typeof( #nseRight (program NonSimpleExpression));
      ProgramSV                                : #nseRight (program NonSimpleExpression)


    VariableSpecification                    : #vRightNew = #nseRight;
      ProgramSV                                : #vRightNew (program Variable)

      ProgramSV                                : #nseRight (program NonSimpleExpression)



  CopyAssignment                           : #v = \singleton(#seLeft, #vRightNew);
    ProgramSV                                : #v (program Variable)

    SeqConcat                                : \singleton(#seLeft, #vRightNew);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #vRightNew (program Variable)





=== 1785160830 ======================================================
```
{.. #v = \seq_get(#nseLeft, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = #nseLeft[#eRight]; ... } ...
  CopyAssignment                           : #v = #nseLeft[#eRight];
    ProgramSV                                : #v (program Variable)

    SeqGet                                   : #nseLeft[#eRight];
      ProgramSV                                : #nseLeft (program NonSimpleExpression)

      ProgramSV                                : #eRight (program Expression)





=== -160408181 ======================================================
```
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \seq_get(#vLeftNew, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseLeft) #vLeftNew = #nseLeft;   #v = #vLeftNew[#eRight]; ... } ...
  LocalVariableDeclaration                 : #typeof(#nseLeft) #vLeftNew = #nseLeft;
    TypeOf                                   : #typeof( #nseLeft (program NonSimpleExpression));
      ProgramSV                                : #nseLeft (program NonSimpleExpression)


    VariableSpecification                    : #vLeftNew = #nseLeft;
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #nseLeft (program NonSimpleExpression)



  CopyAssignment                           : #v = #vLeftNew[#eRight];
    ProgramSV                                : #v (program Variable)

    SeqGet                                   : #vLeftNew[#eRight];
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #eRight (program Expression)





=== 1760503147 ======================================================
```
{.. #v = \seq_get(#seLeft, #nseRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = #seLeft[#nseRight]; ... } ...
  CopyAssignment                           : #v = #seLeft[#nseRight];
    ProgramSV                                : #v (program Variable)

    SeqGet                                   : #seLeft[#nseRight];
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #nseRight (program NonSimpleExpression)





=== -1300011857 ======================================================
```
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \seq_get(#seLeft, #vRightNew); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseRight) #vRightNew = #nseRight;   #v = #seLeft[#vRightNew]; ... } ...
  LocalVariableDeclaration                 : #typeof(#nseRight) #vRightNew = #nseRight;
    TypeOf                                   : #typeof( #nseRight (program NonSimpleExpression));
      ProgramSV                                : #nseRight (program NonSimpleExpression)


    VariableSpecification                    : #vRightNew = #nseRight;
      ProgramSV                                : #vRightNew (program Variable)

      ProgramSV                                : #nseRight (program NonSimpleExpression)



  CopyAssignment                           : #v = #seLeft[#vRightNew];
    ProgramSV                                : #v (program Variable)

    SeqGet                                   : #seLeft[#vRightNew];
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #vRightNew (program Variable)





=== -1160375029 ======================================================
```
{.. #v = \indexOf(#nseLeft, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \indexOf(#nseLeft, #eRight); ... } ...
  CopyAssignment                           : #v = \indexOf(#nseLeft, #eRight);
    ProgramSV                                : #v (program Variable)

    SeqIndexOf                               : \indexOf(#nseLeft, #eRight);
      ProgramSV                                : #nseLeft (program NonSimpleExpression)

      ProgramSV                                : #eRight (program Expression)





=== -1277706594 ======================================================
```
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \indexOf(#vLeftNew, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseLeft) #vLeftNew = #nseLeft;   #v = \indexOf(#vLeftNew, #eRight); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseLeft) #vLeftNew = #nseLeft;
    TypeOf                                   : #typeof( #nseLeft (program NonSimpleExpression));
      ProgramSV                                : #nseLeft (program NonSimpleExpression)


    VariableSpecification                    : #vLeftNew = #nseLeft;
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #nseLeft (program NonSimpleExpression)



  CopyAssignment                           : #v = \indexOf(#vLeftNew, #eRight);
    ProgramSV                                : #v (program Variable)

    SeqIndexOf                               : \indexOf(#vLeftNew, #eRight);
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #eRight (program Expression)





=== 643204734 ======================================================
```
{.. #v = \indexOf(#seLeft, #nseRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \indexOf(#seLeft, #nseRight); ... } ...
  CopyAssignment                           : #v = \indexOf(#seLeft, #nseRight);
    ProgramSV                                : #v (program Variable)

    SeqIndexOf                               : \indexOf(#seLeft, #nseRight);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #nseRight (program NonSimpleExpression)





=== -1576524292 ======================================================
```
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \indexOf(#seLeft, #vRightNew); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseRight) #vRightNew = #nseRight;   #v = \indexOf(#seLeft, #vRightNew); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseRight) #vRightNew = #nseRight;
    TypeOf                                   : #typeof( #nseRight (program NonSimpleExpression));
      ProgramSV                                : #nseRight (program NonSimpleExpression)


    VariableSpecification                    : #vRightNew = #nseRight;
      ProgramSV                                : #vRightNew (program Variable)

      ProgramSV                                : #nseRight (program NonSimpleExpression)



  CopyAssignment                           : #v = \indexOf(#seLeft, #vRightNew);
    ProgramSV                                : #v (program Variable)

    SeqIndexOf                               : \indexOf(#seLeft, #vRightNew);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #vRightNew (program Variable)





=== -2097009441 ======================================================
```
{.. #v = \seq_sub(#nseLeft, #eMiddle, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \seq_sub(#nseLeft, #eMiddle, #eRight); ... } ...
  CopyAssignment                           : #v = \seq_sub(#nseLeft, #eMiddle, #eRight);
    ProgramSV                                : #v (program Variable)

    SeqSub                                   : \seq_sub(#nseLeft, #eMiddle, #eRight);
      ProgramSV                                : #nseLeft (program NonSimpleExpression)

      ProgramSV                                : #eMiddle (program Expression)

      ProgramSV                                : #eRight (program Expression)





=== 671277760 ======================================================
```
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \seq_sub(#vLeftNew, #eMiddle, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseLeft) #vLeftNew = #nseLeft;   #v = \seq_sub(#vLeftNew, #eMiddle, #eRight); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseLeft) #vLeftNew = #nseLeft;
    TypeOf                                   : #typeof( #nseLeft (program NonSimpleExpression));
      ProgramSV                                : #nseLeft (program NonSimpleExpression)


    VariableSpecification                    : #vLeftNew = #nseLeft;
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #nseLeft (program NonSimpleExpression)



  CopyAssignment                           : #v = \seq_sub(#vLeftNew, #eMiddle, #eRight);
    ProgramSV                                : #v (program Variable)

    SeqSub                                   : \seq_sub(#vLeftNew, #eMiddle, #eRight);
      ProgramSV                                : #vLeftNew (program Variable)

      ProgramSV                                : #eMiddle (program Expression)

      ProgramSV                                : #eRight (program Expression)





=== 605115040 ======================================================
```
{.. #v = \seq_sub(#seLeft, #nseMiddle, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \seq_sub(#seLeft, #nseMiddle, #eRight); ... } ...
  CopyAssignment                           : #v = \seq_sub(#seLeft, #nseMiddle, #eRight);
    ProgramSV                                : #v (program Variable)

    SeqSub                                   : \seq_sub(#seLeft, #nseMiddle, #eRight);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #nseMiddle (program NonSimpleExpression)

      ProgramSV                                : #eRight (program Expression)





=== 2127528593 ======================================================
```
{.. #typeof(#nseMiddle) #vMiddleNew=#nseMiddle; #v = \seq_sub(#seLeft, #vMiddleNew, #eRight); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseMiddle) #vMiddleNew = #nseMiddle;   #v = \seq_sub(#seLeft, #vMiddleNew, #eRight); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseMiddle) #vMiddleNew = #nseMiddle;
    TypeOf                                   : #typeof( #nseMiddle (program NonSimpleExpression));
      ProgramSV                                : #nseMiddle (program NonSimpleExpression)


    VariableSpecification                    : #vMiddleNew = #nseMiddle;
      ProgramSV                                : #vMiddleNew (program Variable)

      ProgramSV                                : #nseMiddle (program NonSimpleExpression)



  CopyAssignment                           : #v = \seq_sub(#seLeft, #vMiddleNew, #eRight);
    ProgramSV                                : #v (program Variable)

    SeqSub                                   : \seq_sub(#seLeft, #vMiddleNew, #eRight);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #vMiddleNew (program Variable)

      ProgramSV                                : #eRight (program Expression)





=== -1785393947 ======================================================
```
{.. #v = \seq_sub(#seLeft, #seMiddle, #nseRight); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \seq_sub(#seLeft, #seMiddle, #nseRight); ... } ...
  CopyAssignment                           : #v = \seq_sub(#seLeft, #seMiddle, #nseRight);
    ProgramSV                                : #v (program Variable)

    SeqSub                                   : \seq_sub(#seLeft, #seMiddle, #nseRight);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #seMiddle (program SimpleExpression)

      ProgramSV                                : #nseRight (program NonSimpleExpression)





=== -464078583 ======================================================
```
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \seq_sub(#seLeft, #seMiddle, #vRightNew); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nseRight) #vRightNew = #nseRight;   #v = \seq_sub(#seLeft, #seMiddle, #vRightNew); ... } ...
  LocalVariableDeclaration                 : #typeof(#nseRight) #vRightNew = #nseRight;
    TypeOf                                   : #typeof( #nseRight (program NonSimpleExpression));
      ProgramSV                                : #nseRight (program NonSimpleExpression)


    VariableSpecification                    : #vRightNew = #nseRight;
      ProgramSV                                : #vRightNew (program Variable)

      ProgramSV                                : #nseRight (program NonSimpleExpression)



  CopyAssignment                           : #v = \seq_sub(#seLeft, #seMiddle, #vRightNew);
    ProgramSV                                : #v (program Variable)

    SeqSub                                   : \seq_sub(#seLeft, #seMiddle, #vRightNew);
      ProgramSV                                : #seLeft (program SimpleExpression)

      ProgramSV                                : #seMiddle (program SimpleExpression)

      ProgramSV                                : #vRightNew (program Variable)





=== 1402203698 ======================================================
```
{.. #v = \seq_singleton(#nse); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \seq_singleton(#nse); ... } ...
  CopyAssignment                           : #v = \seq_singleton(#nse);
    ProgramSV                                : #v (program Variable)

    SeqSingleton                             : \seq_singleton(#nse);
      ProgramSV                                : #nse (program NonSimpleExpression)





=== -1154916392 ======================================================
```
{.. #typeof(#nse) #vNew=#nse; #v = \seq_singleton(#vNew); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #vNew = #nse;   #v = \seq_singleton(#vNew); ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #vNew = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #vNew = #nse;
      ProgramSV                                : #vNew (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #v = \seq_singleton(#vNew);
    ProgramSV                                : #v (program Variable)

    SeqSingleton                             : \seq_singleton(#vNew);
      ProgramSV                                : #vNew (program Variable)





=== -1131573873 ======================================================
```
{.. #v = \seq_length(#nse); ...}
```

ContextStatementBlock                    : ..{ ..   #v = #nse.length; ... } ...
  CopyAssignment                           : #v = #nse.length;
    ProgramSV                                : #v (program Variable)

    SeqLength                                : #nse.length;
      ProgramSV                                : #nse (program NonSimpleExpression)





=== 1899921383 ======================================================
```
{.. #typeof(#nse) #vNew=#nse; #v = \seq_length(#vNew); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #vNew = #nse;   #v = #vNew.length; ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #vNew = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #vNew = #nse;
      ProgramSV                                : #vNew (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #v = #vNew.length;
    ProgramSV                                : #v (program Variable)

    SeqLength                                : #vNew.length;
      ProgramSV                                : #vNew (program Variable)





=== -352215479 ======================================================
```
{.. #v = \seq_reverse(#nse); ...}
```

ContextStatementBlock                    : ..{ ..   #v = \seq_reverse(#nse); ... } ...
  CopyAssignment                           : #v = \seq_reverse(#nse);
    ProgramSV                                : #v (program Variable)

    SeqReverse                               : \seq_reverse(#nse);
      ProgramSV                                : #nse (program NonSimpleExpression)





=== -1128449759 ======================================================
```
{.. #typeof(#nse) #vNew=#nse; #v = \seq_reverse(#vNew); ...}
```

ContextStatementBlock                    : ..{ ..   #typeof(#nse) #vNew = #nse;   #v = \seq_reverse(#vNew); ... } ...
  LocalVariableDeclaration                 : #typeof(#nse) #vNew = #nse;
    TypeOf                                   : #typeof( #nse (program NonSimpleExpression));
      ProgramSV                                : #nse (program NonSimpleExpression)


    VariableSpecification                    : #vNew = #nse;
      ProgramSV                                : #vNew (program Variable)

      ProgramSV                                : #nse (program NonSimpleExpression)



  CopyAssignment                           : #v = \seq_reverse(#vNew);
    ProgramSV                                : #v (program Variable)

    SeqReverse                               : \seq_reverse(#vNew);
      ProgramSV                                : #vNew (program Variable)





=== 2137952803 ======================================================
```
{.. for(#loopInit; #guard; #forupdates) #s ...}
```

ContextStatementBlock                    : ..{ ..   for (#loopInit; #guard; #forupdates) #s ... } ...
  For                                      : for (#loopInit; #guard; #forupdates) #s
    ProgramSV                                : #loopInit (program LoopInit)

    ProgramSV                                : #guard (program Guard)

    ProgramSV                                : #forupdates (program ForUpdates)

    ProgramSV                                : #s (program Statement)




=== -2018318940 ======================================================
```
{..
                    {
                    #forInitUnfoldTransformer(#loopInit);
                    for(; #guard; #forupdates) #s
                    }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     forInitUnfoldTransformer(#loopInit)     for (; #guard; #forupdates) #s   } ... } ...
  StatementBlock                           : {   forInitUnfoldTransformer(#loopInit)   for (; #guard; #forupdates) #s }
    ForInitUnfoldTransformer                 : forInitUnfoldTransformer( #loopInit (program LoopInit));
      ProgramSV                                : #loopInit (program LoopInit)


    For                                      : for (; #guard; #forupdates) #s
      ProgramSV                                : #guard (program Guard)

      ProgramSV                                : #forupdates (program ForUpdates)

      ProgramSV                                : #s (program Statement)





=== -541545463 ======================================================
```
{..
                    exec { #slist }
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     #slist   } ... } ...
  Exec                                     : exec {   #slist }
    StatementBlock                           : {   #slist }
      ProgramSV                                : #slist (program Statement)





=== -661664678 ======================================================
```
{..
                    { #slist }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist   } ... } ...
  StatementBlock                           : {   #slist }
    ProgramSV                                : #slist (program Statement)




=== 2012110635 ======================================================
```
{..
                    exec { } ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {}#cs ... } ...
  Exec                                     : exec {}#cs
    StatementBlock                           : {}

    ProgramSV                                : #cs (program Ccatch)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 99513049 ======================================================
```
{..
                    exec { return; #slist }
                    ccat ( \Return ) { #slist1 }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return;     #slist   } ccatch (\Return) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return;   #slist } ccatch (\Return) {   #slist1 }#cs
    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return) {   #slist1 }
      CcatchReturnParameterDeclaration         : \Return;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1504180557 ======================================================
```
{..
                    { #slist1 }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist1   } ... } ...
  StatementBlock                           : {   #slist1 }
    ProgramSV                                : #slist1 (program Statement)




=== -1408634106 ======================================================
```
{..
                    exec { return #se; #slist }
                    ccat ( \Return #t #v ) { #slist1 }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return #se;     #slist   } ccatch (\Return #t #v) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return #se;   #slist } ccatch (\Return #t #v) {   #slist1 }#cs
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return #t #v) {   #slist1 }
      CcatchReturnValParameterDeclaration      : \Return #t #v
        ParameterDeclaration                     : #t #v;
          ProgramSV                                : #t (program Type)

          VariableSpecification                    : #v;
            ProgramSV                                : #v (program Variable)




      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -773113068 ======================================================
```
{..
                    {
                        #t #v;
                        #v = (#t) #se;
                        #slist1
                    }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     #t #v;     #v = (#t) #se;     #slist1   } ... } ...
  StatementBlock                           : {   #t #v;   #v = (#t) #se;   #slist1 }
    LocalVariableDeclaration                 : #t #v;
      ProgramSV                                : #t (program Type)

      VariableSpecification                    : #v;
        ProgramSV                                : #v (program Variable)



    CopyAssignment                           : #v = (#t) #se;
      ProgramSV                                : #v (program Variable)

      TypeCast                                 : (#t) #se;
        ProgramSV                                : #t (program Type)

        ProgramSV                                : #se (program SimpleExpression)



    ProgramSV                                : #slist1 (program Statement)




=== -1389960619 ======================================================
```
{..
                    exec { break; #slist }
                    ccat ( \Break ) { #slist1 }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Break) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Break) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break) {   #slist1 }
      CcatchBreakParameterDeclaration          : \Break;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1504180557 ======================================================
```
{..
                    { #slist1 }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist1   } ... } ...
  StatementBlock                           : {   #slist1 }
    ProgramSV                                : #slist1 (program Statement)




=== 602293447 ======================================================
```
{..
                    exec { break #lb; #slist }
                    ccat ( \Break #lb ) { #slist1 }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Break #lb) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Break #lb) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break #lb) {   #slist1 }
      CcatchBreakLabelParameterDeclaration     : \Break #lb;
        ProgramSV                                : #lb (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1504180557 ======================================================
```
{..
                    { #slist1 }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist1   } ... } ...
  StatementBlock                           : {   #slist1 }
    ProgramSV                                : #slist1 (program Statement)




=== 1809244248 ======================================================
```
{..
                    exec { break #lb; #slist }
                    ccat ( \Break * ) { #slist1 }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Break *) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Break *) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break *) {   #slist1 }
      CcatchBreakWildcardParameterDeclaration  : \Break *;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1504180557 ======================================================
```
{..
                    { #slist1 }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist1   } ... } ...
  StatementBlock                           : {   #slist1 }
    ProgramSV                                : #slist1 (program Statement)




=== 1071757369 ======================================================
```
{..
                    exec { continue; #slist }
                    ccat ( \Continue ) { #slist1 }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueParameterDeclaration       : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1504180557 ======================================================
```
{..
                    { #slist1 }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist1   } ... } ...
  StatementBlock                           : {   #slist1 }
    ProgramSV                                : #slist1 (program Statement)




=== -156387431 ======================================================
```
{..
                    exec { continue #lb; #slist }
                    ccat ( \Continue #lb ) { #slist1 }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Continue #lb) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Continue #lb) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue #lb) {   #slist1 }
      CcatchContinueLabelParameterDeclaration  : \Continue #lb;
        ProgramSV                                : #lb (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1504180557 ======================================================
```
{..
                    { #slist1 }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist1   } ... } ...
  StatementBlock                           : {   #slist1 }
    ProgramSV                                : #slist1 (program Statement)




=== 1763762090 ======================================================
```
{..
                    exec { continue #lb; #slist }
                    ccat ( \Continue * ) { #slist1 }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueWildcardParameterDeclaration : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1504180557 ======================================================
```
{..
                    { #slist1 }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     #slist1   } ... } ...
  StatementBlock                           : {   #slist1 }
    ProgramSV                                : #slist1 (program Statement)




=== -1649175162 ======================================================
```
{.. exec { throw #se; #slist }
                ccat ( #t #v0 ) { #slist1 } ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;     #slist   } ccatch (#t #v0) {     #slist1   } ... } ...
  Exec                                     : exec {   throw #se;   #slist } ccatch (#t #v0) {   #slist1 }
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (#t #v0) {   #slist1 }
      ParameterDeclaration                     : #t #v0;
        ProgramSV                                : #t (program Type)

        VariableSpecification                    : #v0;
          ProgramSV                                : #v0 (program Variable)



      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)






=== 1425541301 ======================================================
```
{.. if ( #se == null ) {
                      exec { throw new java.lang.NullPointerException (); }
                      ccat ( #t #v0 ) { #slist1 }
                } else if ( #se instanceof #t ) {
                      #t #v0;
                      #v0 = (#t) #se;
                      #slist1
                } else {
                      throw #se;
                } ...}
```

ContextStatementBlock                    : ..{ ..   if (#se == null) {     exec {       throw new java.lang.NullPointerException();     } ccatch (#t #v0) {       #slist1     }   } else if (#se instanceof #t) {     #t #v0;     #v0 = (#t) #se;     #slist1   } else {     throw #se;   } ... } ...
  If                                       : if (#se == null) {   exec {     throw new java.lang.NullPointerException();   } ccatch (#t #v0) {     #slist1   } } else if (#se instanceof #t) {   #t #v0;   #v0 = (#t) #se;   #slist1 } else {   throw #se; }
    Equals                                   : #se == null;
      ProgramSV                                : #se (program SimpleExpression)

      NullLiteral                              : null;


    Then                                     :  {   exec {     throw new java.lang.NullPointerException();   } ccatch (#t #v0) {     #slist1   } }
      StatementBlock                           : {   exec {     throw new java.lang.NullPointerException();   } ccatch (#t #v0) {     #slist1   } }
        Exec                                     : exec {   throw new java.lang.NullPointerException(); } ccatch (#t #v0) {   #slist1 }
          StatementBlock                           : {   throw new java.lang.NullPointerException(); }
            Throw                                    : throw new java.lang.NullPointerException();
              New                                      : new java.lang.NullPointerException();
                SchemaTypeReference                      : java.lang.NullPointerException;
                  PackageReference                         : java.lang
                    PackageReference                         : java
                      ProgramElementName                       : java


                    ProgramElementName                       : lang


                  ProgramElementName                       : NullPointerException





          Ccatch                                   :  ccatch (#t #v0) {   #slist1 }
            ParameterDeclaration                     : #t #v0;
              ProgramSV                                : #t (program Type)

              VariableSpecification                    : #v0;
                ProgramSV                                : #v0 (program Variable)



            StatementBlock                           : {   #slist1 }
              ProgramSV                                : #slist1 (program Statement)






    Else                                     : else if (#se instanceof #t) {   #t #v0;   #v0 = (#t) #se;   #slist1 } else {   throw #se; }
      If                                       : if (#se instanceof #t) {   #t #v0;   #v0 = (#t) #se;   #slist1 } else {   throw #se; }
        Instanceof                               : #se instanceof #t;
          ProgramSV                                : #se (program SimpleExpression)

          ProgramSV                                : #t (program Type)


        Then                                     :  {   #t #v0;   #v0 = (#t) #se;   #slist1 }
          StatementBlock                           : {   #t #v0;   #v0 = (#t) #se;   #slist1 }
            LocalVariableDeclaration                 : #t #v0;
              ProgramSV                                : #t (program Type)

              VariableSpecification                    : #v0;
                ProgramSV                                : #v0 (program Variable)



            CopyAssignment                           : #v0 = (#t) #se;
              ProgramSV                                : #v0 (program Variable)

              TypeCast                                 : (#t) #se;
                ProgramSV                                : #t (program Type)

                ProgramSV                                : #se (program SimpleExpression)



            ProgramSV                                : #slist1 (program Statement)



        Else                                     : else {   throw #se; }
          StatementBlock                           : {   throw #se; }
            Throw                                    : throw #se;
              ProgramSV                                : #se (program SimpleExpression)









=== 455828448 ======================================================
```
{.. exec { throw #se; #slist }
                ccat ( #t #v0 ) { #slist1 }
                ccat ( #t2 #v1 ) { #slist3 }
                ccat #cs ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;     #slist   } ccatch (#t #v0) {     #slist1   } ccatch (#t2 #v1) {     #slist3   }#cs ... } ...
  Exec                                     : exec {   throw #se;   #slist } ccatch (#t #v0) {   #slist1 } ccatch (#t2 #v1) {   #slist3 }#cs
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (#t #v0) {   #slist1 }
      ParameterDeclaration                     : #t #v0;
        ProgramSV                                : #t (program Type)

        VariableSpecification                    : #v0;
          ProgramSV                                : #v0 (program Variable)



      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    Ccatch                                   :  ccatch (#t2 #v1) {   #slist3 }
      ParameterDeclaration                     : #t2 #v1;
        ProgramSV                                : #t2 (program Type)

        VariableSpecification                    : #v1;
          ProgramSV                                : #v1 (program Variable)



      StatementBlock                           : {   #slist3 }
        ProgramSV                                : #slist3 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -1526390044 ======================================================
```
{.. if ( #se == null ) {
                     exec { throw new java.lang.NullPointerException (); }
                     ccat ( #t #v0 ) { #slist1 }
                     ccat ( #t2 #v1 ) { #slist3 }
                     ccat #cs
                } else if ( #se instanceof #t ) {
                     #t #v0;
                     #v0 = (#t) #se;
                     #slist1
                } else {
                     exec { throw #se; }
                     ccat ( #t2 #v1 ) { #slist3 }
                     ccat #cs
                } ...}
```

ContextStatementBlock                    : ..{ ..   if (#se == null) {     exec {       throw new java.lang.NullPointerException();     } ccatch (#t #v0) {       #slist1     } ccatch (#t2 #v1) {       #slist3     }#cs   } else if (#se instanceof #t) {     #t #v0;     #v0 = (#t) #se;     #slist1   } else {     exec {       throw #se;     } ccatch (#t2 #v1) {       #slist3     }#cs   } ... } ...
  If                                       : if (#se == null) {   exec {     throw new java.lang.NullPointerException();   } ccatch (#t #v0) {     #slist1   } ccatch (#t2 #v1) {     #slist3   }#cs } else if (#se instanceof #t) {   #t #v0;   #v0 = (#t) #se;   #slist1 } else {   exec {     throw #se;   } ccatch (#t2 #v1) {     #slist3   }#cs }
    Equals                                   : #se == null;
      ProgramSV                                : #se (program SimpleExpression)

      NullLiteral                              : null;


    Then                                     :  {   exec {     throw new java.lang.NullPointerException();   } ccatch (#t #v0) {     #slist1   } ccatch (#t2 #v1) {     #slist3   }#cs }
      StatementBlock                           : {   exec {     throw new java.lang.NullPointerException();   } ccatch (#t #v0) {     #slist1   } ccatch (#t2 #v1) {     #slist3   }#cs }
        Exec                                     : exec {   throw new java.lang.NullPointerException(); } ccatch (#t #v0) {   #slist1 } ccatch (#t2 #v1) {   #slist3 }#cs
          StatementBlock                           : {   throw new java.lang.NullPointerException(); }
            Throw                                    : throw new java.lang.NullPointerException();
              New                                      : new java.lang.NullPointerException();
                SchemaTypeReference                      : java.lang.NullPointerException;
                  PackageReference                         : java.lang
                    PackageReference                         : java
                      ProgramElementName                       : java


                    ProgramElementName                       : lang


                  ProgramElementName                       : NullPointerException





          Ccatch                                   :  ccatch (#t #v0) {   #slist1 }
            ParameterDeclaration                     : #t #v0;
              ProgramSV                                : #t (program Type)

              VariableSpecification                    : #v0;
                ProgramSV                                : #v0 (program Variable)



            StatementBlock                           : {   #slist1 }
              ProgramSV                                : #slist1 (program Statement)



          Ccatch                                   :  ccatch (#t2 #v1) {   #slist3 }
            ParameterDeclaration                     : #t2 #v1;
              ProgramSV                                : #t2 (program Type)

              VariableSpecification                    : #v1;
                ProgramSV                                : #v1 (program Variable)



            StatementBlock                           : {   #slist3 }
              ProgramSV                                : #slist3 (program Statement)



          ProgramSV                                : #cs (program Ccatch)




    Else                                     : else if (#se instanceof #t) {   #t #v0;   #v0 = (#t) #se;   #slist1 } else {   exec {     throw #se;   } ccatch (#t2 #v1) {     #slist3   }#cs }
      If                                       : if (#se instanceof #t) {   #t #v0;   #v0 = (#t) #se;   #slist1 } else {   exec {     throw #se;   } ccatch (#t2 #v1) {     #slist3   }#cs }
        Instanceof                               : #se instanceof #t;
          ProgramSV                                : #se (program SimpleExpression)

          ProgramSV                                : #t (program Type)


        Then                                     :  {   #t #v0;   #v0 = (#t) #se;   #slist1 }
          StatementBlock                           : {   #t #v0;   #v0 = (#t) #se;   #slist1 }
            LocalVariableDeclaration                 : #t #v0;
              ProgramSV                                : #t (program Type)

              VariableSpecification                    : #v0;
                ProgramSV                                : #v0 (program Variable)



            CopyAssignment                           : #v0 = (#t) #se;
              ProgramSV                                : #v0 (program Variable)

              TypeCast                                 : (#t) #se;
                ProgramSV                                : #t (program Type)

                ProgramSV                                : #se (program SimpleExpression)



            ProgramSV                                : #slist1 (program Statement)



        Else                                     : else {   exec {     throw #se;   } ccatch (#t2 #v1) {     #slist3   }#cs }
          StatementBlock                           : {   exec {     throw #se;   } ccatch (#t2 #v1) {     #slist3   }#cs }
            Exec                                     : exec {   throw #se; } ccatch (#t2 #v1) {   #slist3 }#cs
              StatementBlock                           : {   throw #se; }
                Throw                                    : throw #se;
                  ProgramSV                                : #se (program SimpleExpression)



              Ccatch                                   :  ccatch (#t2 #v1) {   #slist3 }
                ParameterDeclaration                     : #t2 #v1;
                  ProgramSV                                : #t2 (program Type)

                  VariableSpecification                    : #v1;
                    ProgramSV                                : #v1 (program Variable)



                StatementBlock                           : {   #slist3 }
                  ProgramSV                                : #slist3 (program Statement)



              ProgramSV                                : #cs (program Ccatch)









=== -318725449 ======================================================
```
{..
                   exec { return; #slist }
                   ccat ( \Return #t #v ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return;     #slist   } ccatch (\Return #t #v) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return;   #slist } ccatch (\Return #t #v) {   #slist1 }#cs
    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return #t #v) {   #slist1 }
      CcatchReturnValParameterDeclaration      : \Return #t #v
        ParameterDeclaration                     : #t #v;
          ProgramSV                                : #t (program Type)

          VariableSpecification                    : #v;
            ProgramSV                                : #v (program Variable)




      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1073473509 ======================================================
```
{..
                    { return; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return;   } ... } ...
  StatementBlock                           : {   return; }
    Return                                   : return;




=== 1176783498 ======================================================
```
{..
                   exec { return; #slist }
                   ccat ( \Break ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return;     #slist   } ccatch (\Break) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return;   #slist } ccatch (\Break) {   #slist1 }#cs
    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break) {   #slist1 }
      CcatchBreakParameterDeclaration          : \Break;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1073473509 ======================================================
```
{..
                    { return; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return;   } ... } ...
  StatementBlock                           : {   return; }
    Return                                   : return;




=== -874558927 ======================================================
```
{..
                   exec { return; #slist }
                   ccat ( \Break #lb ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return;     #slist   } ccatch (\Break #lb) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return;   #slist } ccatch (\Break #lb) {   #slist1 }#cs
    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break #lb) {   #slist1 }
      CcatchBreakLabelParameterDeclaration     : \Break #lb;
        ProgramSV                                : #lb (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1073473509 ======================================================
```
{..
                    { return; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return;   } ... } ...
  StatementBlock                           : {   return; }
    Return                                   : return;




=== 1014713600 ======================================================
```
{..
                   exec { return; #slist }
                   ccat ( \Break * ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return;     #slist   } ccatch (\Break *) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return;   #slist } ccatch (\Break *) {   #slist1 }#cs
    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break *) {   #slist1 }
      CcatchBreakWildcardParameterDeclaration  : \Break *;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1073473509 ======================================================
```
{..
                    { return; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return;   } ... } ...
  StatementBlock                           : {   return; }
    Return                                   : return;




=== -1112863998 ======================================================
```
{..
                   exec { return; #slist }
                   ccat ( \Continue ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueParameterDeclaration       : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1073473509 ======================================================
```
{..
                    { return; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return;   } ... } ...
  StatementBlock                           : {   return; }
    Return                                   : return;




=== -1465839959 ======================================================
```
{..
                   exec { return; #slist }
                   ccat ( \Continue #lb ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return;     #slist   } ccatch (\Continue #lb) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return;   #slist } ccatch (\Continue #lb) {   #slist1 }#cs
    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue #lb) {   #slist1 }
      CcatchContinueLabelParameterDeclaration  : \Continue #lb;
        ProgramSV                                : #lb (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1073473509 ======================================================
```
{..
                    { return; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return;   } ... } ...
  StatementBlock                           : {   return; }
    Return                                   : return;




=== -313274504 ======================================================
```
{..
                   exec { return; #slist }
                   ccat ( \Continue * ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueWildcardParameterDeclaration : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1073473509 ======================================================
```
{..
                    { return; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return;   } ... } ...
  StatementBlock                           : {   return; }
    Return                                   : return;




=== -1802184385 ======================================================
```
{..
                   exec { return; #slist }
                   ccat ( #t #v0 ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return;     #slist   } ccatch (#t #v0) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return;   #slist } ccatch (#t #v0) {   #slist1 }#cs
    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (#t #v0) {   #slist1 }
      ParameterDeclaration                     : #t #v0;
        ProgramSV                                : #t (program Type)

        VariableSpecification                    : #v0;
          ProgramSV                                : #v0 (program Variable)



      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1073473509 ======================================================
```
{..
                    { return; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return;   } ... } ...
  StatementBlock                           : {   return; }
    Return                                   : return;




=== -1408634106 ======================================================
```
{..
                    exec { return #se; #slist }
                    ccat ( \Return #t #v ) { #slist1 }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return #se;     #slist   } ccatch (\Return #t #v) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return #se;   #slist } ccatch (\Return #t #v) {   #slist1 }#cs
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return #t #v) {   #slist1 }
      CcatchReturnValParameterDeclaration      : \Return #t #v
        ParameterDeclaration                     : #t #v;
          ProgramSV                                : #t (program Type)

          VariableSpecification                    : #v;
            ProgramSV                                : #v (program Variable)




      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 995223203 ======================================================
```
{..
                    exec { return #se; #slist }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return #se;     #slist   }#cs ... } ...
  Exec                                     : exec {   return #se;   #slist }#cs
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    ProgramSV                                : #cs (program Ccatch)




=== -1273687516 ======================================================
```
{..
                   exec { return #se; #slist }
                   ccat ( \Return ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return #se;     #slist   } ccatch (\Return) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return #se;   #slist } ccatch (\Return) {   #slist1 }#cs
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return) {   #slist1 }
      CcatchReturnParameterDeclaration         : \Return;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -1333659913 ======================================================
```
{..
                    exec { return #se; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return #se;   }#cs ... } ...
  Exec                                     : exec {   return #se; }#cs
    StatementBlock                           : {   return #se; }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)



    ProgramSV                                : #cs (program Ccatch)




=== -1089559457 ======================================================
```
{..
                   exec { return #se; #slist }
                   ccat ( \Break ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return #se;     #slist   } ccatch (\Break) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return #se;   #slist } ccatch (\Break) {   #slist1 }#cs
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break) {   #slist1 }
      CcatchBreakParameterDeclaration          : \Break;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1822835834 ======================================================
```
{..
                    { return #se; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return #se;   } ... } ...
  StatementBlock                           : {   return #se; }
    Return                                   : return #se;
      ProgramSV                                : #se (program SimpleExpression)





=== -1313951354 ======================================================
```
{..
                   exec { return #se; #slist }
                   ccat ( \Break #lb ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return #se;     #slist   } ccatch (\Break #lb) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return #se;   #slist } ccatch (\Break #lb) {   #slist1 }#cs
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break #lb) {   #slist1 }
      CcatchBreakLabelParameterDeclaration     : \Break #lb;
        ProgramSV                                : #lb (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1822835834 ======================================================
```
{..
                    { return #se; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return #se;   } ... } ...
  StatementBlock                           : {   return #se; }
    Return                                   : return #se;
      ProgramSV                                : #se (program SimpleExpression)





=== 607552917 ======================================================
```
{..
                   exec { return #se; #slist }
                   ccat ( \Break * ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return #se;     #slist   } ccatch (\Break *) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return #se;   #slist } ccatch (\Break *) {   #slist1 }#cs
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break *) {   #slist1 }
      CcatchBreakWildcardParameterDeclaration  : \Break *;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1822835834 ======================================================
```
{..
                    { return #se; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return #se;   } ... } ...
  StatementBlock                           : {   return #se; }
    Return                                   : return #se;
      ProgramSV                                : #se (program SimpleExpression)





=== -849943283 ======================================================
```
{..
                   exec { return #se; #slist }
                   ccat ( \Continue ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return #se;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return #se;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueParameterDeclaration       : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1822835834 ======================================================
```
{..
                    { return #se; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return #se;   } ... } ...
  StatementBlock                           : {   return #se; }
    Return                                   : return #se;
      ProgramSV                                : #se (program SimpleExpression)





=== -345314508 ======================================================
```
{..
                   exec { return #se; #slist }
                   ccat ( \Continue #lb ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return #se;     #slist   } ccatch (\Continue #lb) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return #se;   #slist } ccatch (\Continue #lb) {   #slist1 }#cs
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue #lb) {   #slist1 }
      CcatchContinueLabelParameterDeclaration  : \Continue #lb;
        ProgramSV                                : #lb (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1822835834 ======================================================
```
{..
                    { return #se; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return #se;   } ... } ...
  StatementBlock                           : {   return #se; }
    Return                                   : return #se;
      ProgramSV                                : #se (program SimpleExpression)





=== -1049537853 ======================================================
```
{..
                   exec { return #se; #slist }
                   ccat ( \Continue * ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return #se;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return #se;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueWildcardParameterDeclaration : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1822835834 ======================================================
```
{..
                    { return #se; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return #se;   } ... } ...
  StatementBlock                           : {   return #se; }
    Return                                   : return #se;
      ProgramSV                                : #se (program SimpleExpression)





=== 226439956 ======================================================
```
{..
                   exec { return #se; #slist }
                   ccat ( #t #v0 ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     return #se;     #slist   } ccatch (#t #v0) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   return #se;   #slist } ccatch (#t #v0) {   #slist1 }#cs
    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (#t #v0) {   #slist1 }
      ParameterDeclaration                     : #t #v0;
        ProgramSV                                : #t (program Type)

        VariableSpecification                    : #v0;
          ProgramSV                                : #v0 (program Variable)



      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1822835834 ======================================================
```
{..
                    { return #se; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     return #se;   } ... } ...
  StatementBlock                           : {   return #se; }
    Return                                   : return #se;
      ProgramSV                                : #se (program SimpleExpression)





=== -1418592816 ======================================================
```
{..
                   exec { break; #slist }
                   ccat ( \Return ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Return) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Return) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return) {   #slist1 }
      CcatchReturnParameterDeclaration         : \Return;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -1601382233 ======================================================
```
{..
                    exec { break; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;   }#cs ... } ...
  Exec                                     : exec {   break; }#cs
    StatementBlock                           : {   break; }
      Break                                    : break;


    ProgramSV                                : #cs (program Ccatch)




=== 356186606 ======================================================
```
{..
                   exec { break; #slist }
                   ccat ( \Return #t #v ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Return #t #v) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Return #t #v) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return #t #v) {   #slist1 }
      CcatchReturnValParameterDeclaration      : \Return #t #v
        ParameterDeclaration                     : #t #v;
          ProgramSV                                : #t (program Type)

          VariableSpecification                    : #v;
            ProgramSV                                : #v (program Variable)




      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -1601382233 ======================================================
```
{..
                    exec { break; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;   }#cs ... } ...
  Exec                                     : exec {   break; }#cs
    StatementBlock                           : {   break; }
      Break                                    : break;


    ProgramSV                                : #cs (program Ccatch)




=== -1745611174 ======================================================
```
{..
                   exec { break; #slist }
                   ccat ( \Break #lb ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Break #lb) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Break #lb) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break #lb) {   #slist1 }
      CcatchBreakLabelParameterDeclaration     : \Break #lb;
        ProgramSV                                : #lb (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 881507020 ======================================================
```
{..
                    { break; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     break;   } ... } ...
  StatementBlock                           : {   break; }
    Break                                    : break;




=== 410455913 ======================================================
```
{..
                   exec { break; #slist }
                   ccat ( \Break * ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Break *) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Break *) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break *) {   #slist1 }
      CcatchBreakWildcardParameterDeclaration  : \Break *;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 881507020 ======================================================
```
{..
                    { break; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     break;   } ... } ...
  StatementBlock                           : {   break; }
    Break                                    : break;




=== 1629984185 ======================================================
```
{..
                   exec { break; #slist }
                   ccat ( \Continue ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueParameterDeclaration       : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 881507020 ======================================================
```
{..
                    { break; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     break;   } ... } ...
  StatementBlock                           : {   break; }
    Break                                    : break;




=== -790927904 ======================================================
```
{..
                   exec { break; #slist }
                   ccat ( \Continue #lb ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Continue #lb) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Continue #lb) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue #lb) {   #slist1 }
      CcatchContinueLabelParameterDeclaration  : \Continue #lb;
        ProgramSV                                : #lb (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 881507020 ======================================================
```
{..
                    { break; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     break;   } ... } ...
  StatementBlock                           : {   break; }
    Break                                    : break;




=== -1546090385 ======================================================
```
{..
                   exec { break; #slist }
                   ccat ( \Continue * ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueWildcardParameterDeclaration : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 881507020 ======================================================
```
{..
                    { break; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     break;   } ... } ...
  StatementBlock                           : {   break; }
    Break                                    : break;




=== 775954920 ======================================================
```
{..
                   exec { break; #slist }
                   ccat ( #t #v0 ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (#t #v0) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (#t #v0) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (#t #v0) {   #slist1 }
      ParameterDeclaration                     : #t #v0;
        ProgramSV                                : #t (program Type)

        VariableSpecification                    : #v0;
          ProgramSV                                : #v0 (program Variable)



      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 881507020 ======================================================
```
{..
                    { break; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     break;   } ... } ...
  StatementBlock                           : {   break; }
    Break                                    : break;




=== -206676617 ======================================================
```
{..
                   exec { break #lb; #slist }
                   ccat ( \Return ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Return) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Return) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return) {   #slist1 }
      CcatchReturnParameterDeclaration         : \Return;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1688758926 ======================================================
```
{..
                    exec { break #lb; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;   }#cs ... } ...
  Exec                                     : exec {   break; }#cs
    StatementBlock                           : {   break; }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)



    ProgramSV                                : #cs (program Ccatch)




=== 849657941 ======================================================
```
{..
                   exec { break #lb; #slist }
                   ccat ( \Return #t #v ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Return #t #v) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Return #t #v) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return #t #v) {   #slist1 }
      CcatchReturnValParameterDeclaration      : \Return #t #v
        ParameterDeclaration                     : #t #v;
          ProgramSV                                : #t (program Type)

          VariableSpecification                    : #v;
            ProgramSV                                : #v (program Variable)




      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1688758926 ======================================================
```
{..
                    exec { break #lb; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;   }#cs ... } ...
  Exec                                     : exec {   break; }#cs
    StatementBlock                           : {   break; }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)



    ProgramSV                                : #cs (program Ccatch)




=== 1715806892 ======================================================
```
{..
                   exec { break #lb; #slist }
                   ccat ( \Break ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Break) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Break) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break) {   #slist1 }
      CcatchBreakParameterDeclaration          : \Break;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1688758926 ======================================================
```
{..
                    exec { break #lb; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;   }#cs ... } ...
  Exec                                     : exec {   break; }#cs
    StatementBlock                           : {   break; }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)



    ProgramSV                                : #cs (program Ccatch)




=== 2031736206 ======================================================
```
{..
                   exec { break #lb; #slist }
                   ccat ( \Break #lb1 ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Break #lb1) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Break #lb1) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break #lb1) {   #slist1 }
      CcatchBreakLabelParameterDeclaration     : \Break #lb1;
        ProgramSV                                : #lb1 (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1688758926 ======================================================
```
{..
                    exec { break #lb; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;   }#cs ... } ...
  Exec                                     : exec {   break; }#cs
    StatementBlock                           : {   break; }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)



    ProgramSV                                : #cs (program Ccatch)




=== -1949653088 ======================================================
```
{..
                   exec { break #lb; #slist }
                   ccat ( \Continue ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueParameterDeclaration       : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1823547141 ======================================================
```
{..
                    { break #lb; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     break;   } ... } ...
  StatementBlock                           : {   break; }
    Break                                    : break;
      ProgramSV                                : #lb (program Label)





=== -557496038 ======================================================
```
{..
                   exec { break #lb; #slist }
                   ccat ( \Continue #lb1 ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Continue #lb1) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Continue #lb1) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue #lb1) {   #slist1 }
      CcatchContinueLabelParameterDeclaration  : \Continue #lb1;
        ProgramSV                                : #lb1 (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1823547141 ======================================================
```
{..
                    { break #lb; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     break;   } ... } ...
  StatementBlock                           : {   break; }
    Break                                    : break;
      ProgramSV                                : #lb (program Label)





=== -1308705642 ======================================================
```
{..
                   exec { break #lb; #slist }
                   ccat ( \Continue * ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueWildcardParameterDeclaration : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1823547141 ======================================================
```
{..
                    { break #lb; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     break;   } ... } ...
  StatementBlock                           : {   break; }
    Break                                    : break;
      ProgramSV                                : #lb (program Label)





=== -2052938911 ======================================================
```
{..
                   exec { break #lb; #slist }
                   ccat ( #t #v ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     break;     #slist   } ccatch (#t #v) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   break;   #slist } ccatch (#t #v) {   #slist1 }#cs
    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (#t #v) {   #slist1 }
      ParameterDeclaration                     : #t #v;
        ProgramSV                                : #t (program Type)

        VariableSpecification                    : #v;
          ProgramSV                                : #v (program Variable)



      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 1823547141 ======================================================
```
{..
                    { break #lb; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     break;   } ... } ...
  StatementBlock                           : {   break; }
    Break                                    : break;
      ProgramSV                                : #lb (program Label)





=== -2029653438 ======================================================
```
{..
                   exec { continue; #slist }
                   ccat ( \Return ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Return) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Return) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return) {   #slist1 }
      CcatchReturnParameterDeclaration         : \Return;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -679597803 ======================================================
```
{..
                    exec { continue; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;   }#cs ... } ...
  Exec                                     : exec {   continue; }#cs
    StatementBlock                           : {   continue; }
      Continue                                 : continue;


    ProgramSV                                : #cs (program Ccatch)




=== -1248964384 ======================================================
```
{..
                   exec { continue; #slist }
                   ccat ( \Return #t #v ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Return #t #v) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Return #t #v) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return #t #v) {   #slist1 }
      CcatchReturnValParameterDeclaration      : \Return #t #v
        ParameterDeclaration                     : #t #v;
          ProgramSV                                : #t (program Type)

          VariableSpecification                    : #v;
            ProgramSV                                : #v (program Variable)




      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -679597803 ======================================================
```
{..
                    exec { continue; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;   }#cs ... } ...
  Exec                                     : exec {   continue; }#cs
    StatementBlock                           : {   continue; }
      Continue                                 : continue;


    ProgramSV                                : #cs (program Ccatch)




=== -1668134783 ======================================================
```
{..
                   exec { continue; #slist }
                   ccat ( \Break ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Break) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Break) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break) {   #slist1 }
      CcatchBreakParameterDeclaration          : \Break;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -679597803 ======================================================
```
{..
                    exec { continue; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;   }#cs ... } ...
  Exec                                     : exec {   continue; }#cs
    StatementBlock                           : {   continue; }
      Continue                                 : continue;


    ProgramSV                                : #cs (program Ccatch)




=== 513766568 ======================================================
```
{..
                   exec { continue; #slist }
                   ccat ( \Break #lb ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Break #lb) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Break #lb) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break #lb) {   #slist1 }
      CcatchBreakLabelParameterDeclaration     : \Break #lb;
        ProgramSV                                : #lb (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -679597803 ======================================================
```
{..
                    exec { continue; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;   }#cs ... } ...
  Exec                                     : exec {   continue; }#cs
    StatementBlock                           : {   continue; }
      Continue                                 : continue;


    ProgramSV                                : #cs (program Ccatch)




=== -1352554185 ======================================================
```
{..
                   exec { continue; #slist }
                   ccat ( \Break * ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Break *) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Break *) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break *) {   #slist1 }
      CcatchBreakWildcardParameterDeclaration  : \Break *;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -679597803 ======================================================
```
{..
                    exec { continue; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;   }#cs ... } ...
  Exec                                     : exec {   continue; }#cs
    StatementBlock                           : {   continue; }
      Continue                                 : continue;


    ProgramSV                                : #cs (program Ccatch)




=== -352135370 ======================================================
```
{..
                   exec { continue; #slist }
                   ccat ( #t #v0 ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (#t #v0) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (#t #v0) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;

      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (#t #v0) {   #slist1 }
      ParameterDeclaration                     : #t #v0;
        ProgramSV                                : #t (program Type)

        VariableSpecification                    : #v0;
          ProgramSV                                : #v0 (program Variable)



      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -2028747428 ======================================================
```
{..
                    { continue; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     continue;   } ... } ...
  StatementBlock                           : {   continue; }
    Continue                                 : continue;




=== 1114556649 ======================================================
```
{..
                   exec { continue #lb; #slist }
                   ccat ( \Return ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Return) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Return) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return) {   #slist1 }
      CcatchReturnParameterDeclaration         : \Return;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 679465980 ======================================================
```
{..
                    exec { continue #lb; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;   }#cs ... } ...
  Exec                                     : exec {   continue; }#cs
    StatementBlock                           : {   continue; }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)



    ProgramSV                                : #cs (program Ccatch)




=== 984567367 ======================================================
```
{..
                   exec { continue #lb; #slist }
                   ccat ( \Return #t #v ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Return #t #v) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Return #t #v) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return #t #v) {   #slist1 }
      CcatchReturnValParameterDeclaration      : \Return #t #v
        ParameterDeclaration                     : #t #v;
          ProgramSV                                : #t (program Type)

          VariableSpecification                    : #v;
            ProgramSV                                : #v (program Variable)




      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 679465980 ======================================================
```
{..
                    exec { continue #lb; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;   }#cs ... } ...
  Exec                                     : exec {   continue; }#cs
    StatementBlock                           : {   continue; }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)



    ProgramSV                                : #cs (program Ccatch)




=== -319782662 ======================================================
```
{..
                   exec { continue #lb; #slist }
                   ccat ( \Break ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Break) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Break) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break) {   #slist1 }
      CcatchBreakParameterDeclaration          : \Break;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 679465980 ======================================================
```
{..
                    exec { continue #lb; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;   }#cs ... } ...
  Exec                                     : exec {   continue; }#cs
    StatementBlock                           : {   continue; }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)



    ProgramSV                                : #cs (program Ccatch)




=== 1374894080 ======================================================
```
{..
                   exec { continue #lb; #slist }
                   ccat ( \Break #lb1 ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Break #lb1) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Break #lb1) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break #lb1) {   #slist1 }
      CcatchBreakLabelParameterDeclaration     : \Break #lb1;
        ProgramSV                                : #lb1 (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 679465980 ======================================================
```
{..
                    exec { continue #lb; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;   }#cs ... } ...
  Exec                                     : exec {   continue; }#cs
    StatementBlock                           : {   continue; }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)



    ProgramSV                                : #cs (program Ccatch)




=== 1628678000 ======================================================
```
{..
                   exec { continue #lb; #slist }
                   ccat ( \Break * ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Break *) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Break *) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break *) {   #slist1 }
      CcatchBreakWildcardParameterDeclaration  : \Break *;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 679465980 ======================================================
```
{..
                    exec { continue #lb; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;   }#cs ... } ...
  Exec                                     : exec {   continue; }#cs
    StatementBlock                           : {   continue; }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)



    ProgramSV                                : #cs (program Ccatch)




=== 740163218 ======================================================
```
{..
                   exec { continue #lb; #slist }
                   ccat ( \Continue ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueParameterDeclaration       : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 679465980 ======================================================
```
{..
                    exec { continue #lb; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;   }#cs ... } ...
  Exec                                     : exec {   continue; }#cs
    StatementBlock                           : {   continue; }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)



    ProgramSV                                : #cs (program Ccatch)




=== -670271128 ======================================================
```
{..
                   exec { continue #lb; #slist }
                   ccat ( \Continue #lb1 ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (\Continue #lb1) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (\Continue #lb1) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue #lb1) {   #slist1 }
      CcatchContinueLabelParameterDeclaration  : \Continue #lb1;
        ProgramSV                                : #lb1 (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== 679465980 ======================================================
```
{..
                    exec { continue #lb; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;   }#cs ... } ...
  Exec                                     : exec {   continue; }#cs
    StatementBlock                           : {   continue; }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)



    ProgramSV                                : #cs (program Ccatch)




=== -871677101 ======================================================
```
{..
                   exec { continue #lb; #slist }
                   ccat ( #t #v ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     continue;     #slist   } ccatch (#t #v) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   continue;   #slist } ccatch (#t #v) {   #slist1 }#cs
    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (#t #v) {   #slist1 }
      ParameterDeclaration                     : #t #v;
        ProgramSV                                : #t (program Type)

        VariableSpecification                    : #v;
          ProgramSV                                : #v (program Variable)



      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -409837163 ======================================================
```
{..
                    { continue #lb; }
                ...}
```

ContextStatementBlock                    : ..{ ..   {     continue;   } ... } ...
  StatementBlock                           : {   continue; }
    Continue                                 : continue;
      ProgramSV                                : #lb (program Label)





=== 2048042580 ======================================================
```
{..
                   exec { throw #se; #slist }
                   ccat ( \Return ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;     #slist   } ccatch (\Return) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   throw #se;   #slist } ccatch (\Return) {   #slist1 }#cs
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return) {   #slist1 }
      CcatchReturnParameterDeclaration         : \Return;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -883659989 ======================================================
```
{..
                    exec { throw #se; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;   }#cs ... } ...
  Exec                                     : exec {   throw #se; }#cs
    StatementBlock                           : {   throw #se; }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)



    ProgramSV                                : #cs (program Ccatch)




=== -915132558 ======================================================
```
{..
                   exec { throw #se; #slist }
                   ccat ( \Return #t #v ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;     #slist   } ccatch (\Return #t #v) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   throw #se;   #slist } ccatch (\Return #t #v) {   #slist1 }#cs
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Return #t #v) {   #slist1 }
      CcatchReturnValParameterDeclaration      : \Return #t #v
        ParameterDeclaration                     : #t #v;
          ProgramSV                                : #t (program Type)

          VariableSpecification                    : #v;
            ProgramSV                                : #v (program Variable)




      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -883659989 ======================================================
```
{..
                    exec { throw #se; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;   }#cs ... } ...
  Exec                                     : exec {   throw #se; }#cs
    StatementBlock                           : {   throw #se; }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)



    ProgramSV                                : #cs (program Ccatch)




=== -705312209 ======================================================
```
{..
                   exec { throw #se; #slist }
                   ccat ( \Break ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;     #slist   } ccatch (\Break) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   throw #se;   #slist } ccatch (\Break) {   #slist1 }#cs
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break) {   #slist1 }
      CcatchBreakParameterDeclaration          : \Break;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -883659989 ======================================================
```
{..
                    exec { throw #se; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;   }#cs ... } ...
  Exec                                     : exec {   throw #se; }#cs
    StatementBlock                           : {   throw #se; }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)



    ProgramSV                                : #cs (program Ccatch)




=== 300838742 ======================================================
```
{..
                   exec { throw #se; #slist }
                   ccat ( \Break #lb ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;     #slist   } ccatch (\Break #lb) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   throw #se;   #slist } ccatch (\Break #lb) {   #slist1 }#cs
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break #lb) {   #slist1 }
      CcatchBreakLabelParameterDeclaration     : \Break #lb;
        ProgramSV                                : #lb (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -883659989 ======================================================
```
{..
                    exec { throw #se; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;   }#cs ... } ...
  Exec                                     : exec {   throw #se; }#cs
    StatementBlock                           : {   throw #se; }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)



    ProgramSV                                : #cs (program Ccatch)




=== 501970789 ======================================================
```
{..
                   exec { throw #se; #slist }
                   ccat ( \Break * ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;     #slist   } ccatch (\Break *) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   throw #se;   #slist } ccatch (\Break *) {   #slist1 }#cs
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Break *) {   #slist1 }
      CcatchBreakWildcardParameterDeclaration  : \Break *;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -883659989 ======================================================
```
{..
                    exec { throw #se; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;   }#cs ... } ...
  Exec                                     : exec {   throw #se; }#cs
    StatementBlock                           : {   throw #se; }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)



    ProgramSV                                : #cs (program Ccatch)




=== 171978045 ======================================================
```
{..
                   exec { throw #se; #slist }
                   ccat ( \Continue ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   throw #se;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueParameterDeclaration       : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -883659989 ======================================================
```
{..
                    exec { throw #se; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;   }#cs ... } ...
  Exec                                     : exec {   throw #se; }#cs
    StatementBlock                           : {   throw #se; }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)



    ProgramSV                                : #cs (program Ccatch)




=== -2062247068 ======================================================
```
{..
                   exec { throw #se; #slist }
                   ccat ( \Continue #lb ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;     #slist   } ccatch (\Continue #lb) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   throw #se;   #slist } ccatch (\Continue #lb) {   #slist1 }#cs
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue #lb) {   #slist1 }
      CcatchContinueLabelParameterDeclaration  : \Continue #lb;
        ProgramSV                                : #lb (program Label)


      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -883659989 ======================================================
```
{..
                    exec { throw #se; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;   }#cs ... } ...
  Exec                                     : exec {   throw #se; }#cs
    StatementBlock                           : {   throw #se; }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)



    ProgramSV                                : #cs (program Ccatch)




=== 1764314867 ======================================================
```
{..
                   exec { throw #se; #slist }
                   ccat ( \Continue * ) { #slist1 }
                   ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;     #slist   } ccatch (\Continue) {     #slist1   }#cs ... } ...
  Exec                                     : exec {   throw #se;   #slist } ccatch (\Continue) {   #slist1 }#cs
    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)


    Ccatch                                   :  ccatch (\Continue) {   #slist1 }
      CcatchContinueWildcardParameterDeclaration : \Continue;

      StatementBlock                           : {   #slist1 }
        ProgramSV                                : #slist1 (program Statement)



    ProgramSV                                : #cs (program Ccatch)




=== -883659989 ======================================================
```
{..
                    exec { throw #se; }
                    ccat #cs
                ...}
```

ContextStatementBlock                    : ..{ ..   exec {     throw #se;   }#cs ... } ...
  Exec                                     : exec {   throw #se; }#cs
    StatementBlock                           : {   throw #se; }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)



    ProgramSV                                : #cs (program Ccatch)




=== 695964776 ======================================================
```
 {.. while (#nse) #body ... }
```

ContextStatementBlock                    : ..{ ..   while (#nse) #body ... } ...
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 1062393960 ======================================================
```
{
                              ..
                              boolean #x;
                              loop-scope(#x) {
                                if (#nse) {
                                  #body
                                  continue;
                                } else {
                                  break;
                                }
                              }
                              ...
                            }
```

ContextStatementBlock                    : ..{ ..   boolean #x;   loop-scope (#x) {     if (#nse) {       #body       continue;     } else {       break;     }   } ... } ...
  LocalVariableDeclaration                 : boolean #x;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #x;
      ProgramSV                                : #x (program Variable)



  LoopScopeBlock                           : loop-scope (#x) {   if (#nse) {     #body     continue;   } else {     break;   } }
    ProgramSV                                : #x (program Variable)

    StatementBlock                           : {   if (#nse) {     #body     continue;   } else {     break;   } }
      If                                       : if (#nse) {   #body   continue; } else {   break; }
        ProgramSV                                : #nse (program Expression)

        Then                                     :  {   #body   continue; }
          StatementBlock                           : {   #body   continue; }
            ProgramSV                                : #body (program Statement)

            Continue                                 : continue;



        Else                                     : else {   break; }
          StatementBlock                           : {   break; }
            Break                                    : break;








=== -1931110108 ======================================================
```
{
                    #typeof(#heapBefore_LOOP) #heapBefore_LOOP;
                    #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;
                    #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;
                    #typeof(#variant) #variant;
                    #localVarDeclsBefore_LOOP
              }
```

StatementBlock                           : {   #typeof(#heapBefore_LOOP) #heapBefore_LOOP;   #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;   #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;   #typeof(#variant) #variant;   #localVarDeclsBefore_LOOP }
  LocalVariableDeclaration                 : #typeof(#heapBefore_LOOP) #heapBefore_LOOP;
    TypeOf                                   : #typeof( #heapBefore_LOOP (program Variable));
      ProgramSV                                : #heapBefore_LOOP (program Variable)


    VariableSpecification                    : #heapBefore_LOOP;
      ProgramSV                                : #heapBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;
    TypeOf                                   : #typeof( #savedHeapBefore_LOOP (program Variable));
      ProgramSV                                : #savedHeapBefore_LOOP (program Variable)


    VariableSpecification                    : #savedHeapBefore_LOOP;
      ProgramSV                                : #savedHeapBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;
    TypeOf                                   : #typeof( #permissionsBefore_LOOP (program Variable));
      ProgramSV                                : #permissionsBefore_LOOP (program Variable)


    VariableSpecification                    : #permissionsBefore_LOOP;
      ProgramSV                                : #permissionsBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#variant) #variant;
    TypeOf                                   : #typeof( #variant (program Variable));
      ProgramSV                                : #variant (program Variable)


    VariableSpecification                    : #variant;
      ProgramSV                                : #variant (program Variable)



  ProgramSV                                : #localVarDeclsBefore_LOOP (program Statement)



=== 1828924154 ======================================================
```
{ while (#nse) #body }
```

StatementBlock                           : {   while (#nse) #body }
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 1828924154 ======================================================
```
{ while (#nse) #body }
```

StatementBlock                           : {   while (#nse) #body }
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 695964776 ======================================================
```
 {.. while (#nse) #body ... }
```

ContextStatementBlock                    : ..{ ..   while (#nse) #body ... } ...
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 1062393960 ======================================================
```
{
                              ..
                              boolean #x;
                              loop-scope(#x) {
                                if (#nse) {
                                  #body
                                  continue;
                                } else {
                                  break;
                                }
                              }
                              ...
                            }
```

ContextStatementBlock                    : ..{ ..   boolean #x;   loop-scope (#x) {     if (#nse) {       #body       continue;     } else {       break;     }   } ... } ...
  LocalVariableDeclaration                 : boolean #x;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #x;
      ProgramSV                                : #x (program Variable)



  LoopScopeBlock                           : loop-scope (#x) {   if (#nse) {     #body     continue;   } else {     break;   } }
    ProgramSV                                : #x (program Variable)

    StatementBlock                           : {   if (#nse) {     #body     continue;   } else {     break;   } }
      If                                       : if (#nse) {   #body   continue; } else {   break; }
        ProgramSV                                : #nse (program Expression)

        Then                                     :  {   #body   continue; }
          StatementBlock                           : {   #body   continue; }
            ProgramSV                                : #body (program Statement)

            Continue                                 : continue;



        Else                                     : else {   break; }
          StatementBlock                           : {   break; }
            Break                                    : break;








=== 1553780648 ======================================================
```
{
                                #typeof(#heapBefore_LOOP) #heapBefore_LOOP;
                                #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;
                                #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;
                                #localVarDeclsBefore_LOOP
              }
              
```

StatementBlock                           : {   #typeof(#heapBefore_LOOP) #heapBefore_LOOP;   #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;   #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;   #localVarDeclsBefore_LOOP }
  LocalVariableDeclaration                 : #typeof(#heapBefore_LOOP) #heapBefore_LOOP;
    TypeOf                                   : #typeof( #heapBefore_LOOP (program Variable));
      ProgramSV                                : #heapBefore_LOOP (program Variable)


    VariableSpecification                    : #heapBefore_LOOP;
      ProgramSV                                : #heapBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;
    TypeOf                                   : #typeof( #savedHeapBefore_LOOP (program Variable));
      ProgramSV                                : #savedHeapBefore_LOOP (program Variable)


    VariableSpecification                    : #savedHeapBefore_LOOP;
      ProgramSV                                : #savedHeapBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;
    TypeOf                                   : #typeof( #permissionsBefore_LOOP (program Variable));
      ProgramSV                                : #permissionsBefore_LOOP (program Variable)


    VariableSpecification                    : #permissionsBefore_LOOP;
      ProgramSV                                : #permissionsBefore_LOOP (program Variable)



  ProgramSV                                : #localVarDeclsBefore_LOOP (program Statement)



=== 1828924154 ======================================================
```
{ while (#nse) #body }
```

StatementBlock                           : {   while (#nse) #body }
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 1828924154 ======================================================
```
{ while (#nse) #body }
```

StatementBlock                           : {   while (#nse) #body }
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 695964776 ======================================================
```
 {.. while (#nse) #body ... }
```

ContextStatementBlock                    : ..{ ..   while (#nse) #body ... } ...
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 679552353 ======================================================
```
 {..
                                   #reattachLoopInvariant(while (#nse) #body);
                                ... }
```

ContextStatementBlock                    : ..{ ..   #reattachLoopInvariant(while (#nse) #body) ... } ...
  ReattachLoopInvariant                    : #reattachLoopInvariant( while (#nse) #body);
    While                                    : while (#nse) #body
      Guard                                    : #nse (program Expression)
        ProgramSV                                : #nse (program Expression)


      ProgramSV                                : #body (program Statement)





=== -1983518644 ======================================================
```
 {..
                       boolean #x;
                       loop-scope(#x) {
                         if (#nse) { #body continue; }
                         else { break; }
                       }
                    ... }
                     
```

ContextStatementBlock                    : ..{ ..   boolean #x;   loop-scope (#x) {     if (#nse) {       #body       continue;     } else {       break;     }   } ... } ...
  LocalVariableDeclaration                 : boolean #x;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #x;
      ProgramSV                                : #x (program Variable)



  LoopScopeBlock                           : loop-scope (#x) {   if (#nse) {     #body     continue;   } else {     break;   } }
    ProgramSV                                : #x (program Variable)

    StatementBlock                           : {   if (#nse) {     #body     continue;   } else {     break;   } }
      If                                       : if (#nse) {   #body   continue; } else {   break; }
        ProgramSV                                : #nse (program Expression)

        Then                                     :  {   #body   continue; }
          StatementBlock                           : {   #body   continue; }
            ProgramSV                                : #body (program Statement)

            Continue                                 : continue;



        Else                                     : else {   break; }
          StatementBlock                           : {   break; }
            Break                                    : break;








=== 695964776 ======================================================
```
 {.. while (#nse) #body ... }
```

ContextStatementBlock                    : ..{ ..   while (#nse) #body ... } ...
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 1062393960 ======================================================
```
{
                              ..
                              boolean #x;
                              loop-scope(#x) {
                                if (#nse) {
                                  #body
                                  continue;
                                } else {
                                  break;
                                }
                              }
                              ...
                            }
```

ContextStatementBlock                    : ..{ ..   boolean #x;   loop-scope (#x) {     if (#nse) {       #body       continue;     } else {       break;     }   } ... } ...
  LocalVariableDeclaration                 : boolean #x;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #x;
      ProgramSV                                : #x (program Variable)



  LoopScopeBlock                           : loop-scope (#x) {   if (#nse) {     #body     continue;   } else {     break;   } }
    ProgramSV                                : #x (program Variable)

    StatementBlock                           : {   if (#nse) {     #body     continue;   } else {     break;   } }
      If                                       : if (#nse) {   #body   continue; } else {   break; }
        ProgramSV                                : #nse (program Expression)

        Then                                     :  {   #body   continue; }
          StatementBlock                           : {   #body   continue; }
            ProgramSV                                : #body (program Statement)

            Continue                                 : continue;



        Else                                     : else {   break; }
          StatementBlock                           : {   break; }
            Break                                    : break;








=== -612828634 ======================================================
```
{
                  #typeof(#heapBefore_LOOP) #heapBefore_LOOP;
                  #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;
                  #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;
                  #typeof(#variant) #variant;
                  #localVarDeclsBefore_LOOP
              }
              
```

StatementBlock                           : {   #typeof(#heapBefore_LOOP) #heapBefore_LOOP;   #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;   #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;   #typeof(#variant) #variant;   #localVarDeclsBefore_LOOP }
  LocalVariableDeclaration                 : #typeof(#heapBefore_LOOP) #heapBefore_LOOP;
    TypeOf                                   : #typeof( #heapBefore_LOOP (program Variable));
      ProgramSV                                : #heapBefore_LOOP (program Variable)


    VariableSpecification                    : #heapBefore_LOOP;
      ProgramSV                                : #heapBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;
    TypeOf                                   : #typeof( #savedHeapBefore_LOOP (program Variable));
      ProgramSV                                : #savedHeapBefore_LOOP (program Variable)


    VariableSpecification                    : #savedHeapBefore_LOOP;
      ProgramSV                                : #savedHeapBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;
    TypeOf                                   : #typeof( #permissionsBefore_LOOP (program Variable));
      ProgramSV                                : #permissionsBefore_LOOP (program Variable)


    VariableSpecification                    : #permissionsBefore_LOOP;
      ProgramSV                                : #permissionsBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#variant) #variant;
    TypeOf                                   : #typeof( #variant (program Variable));
      ProgramSV                                : #variant (program Variable)


    VariableSpecification                    : #variant;
      ProgramSV                                : #variant (program Variable)



  ProgramSV                                : #localVarDeclsBefore_LOOP (program Statement)



=== 1062393960 ======================================================
```
{
                              ..
                              boolean #x;
                              loop-scope(#x) {
                                if (#nse) {
                                  #body
                                  continue;
                                } else {
                                  break;
                                }
                              }
                              ...
                            }
```

ContextStatementBlock                    : ..{ ..   boolean #x;   loop-scope (#x) {     if (#nse) {       #body       continue;     } else {       break;     }   } ... } ...
  LocalVariableDeclaration                 : boolean #x;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #x;
      ProgramSV                                : #x (program Variable)



  LoopScopeBlock                           : loop-scope (#x) {   if (#nse) {     #body     continue;   } else {     break;   } }
    ProgramSV                                : #x (program Variable)

    StatementBlock                           : {   if (#nse) {     #body     continue;   } else {     break;   } }
      If                                       : if (#nse) {   #body   continue; } else {   break; }
        ProgramSV                                : #nse (program Expression)

        Then                                     :  {   #body   continue; }
          StatementBlock                           : {   #body   continue; }
            ProgramSV                                : #body (program Statement)

            Continue                                 : continue;



        Else                                     : else {   break; }
          StatementBlock                           : {   break; }
            Break                                    : break;








=== -264263146 ======================================================
```
{
                   #typeof(#heapBefore_LOOP) #heapBefore_LOOP;
                   #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;
                   #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;
                   #typeof(#variant) #variant;
              }
              
```

StatementBlock                           : {   #typeof(#heapBefore_LOOP) #heapBefore_LOOP;   #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;   #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;   #typeof(#variant) #variant; }
  LocalVariableDeclaration                 : #typeof(#heapBefore_LOOP) #heapBefore_LOOP;
    TypeOf                                   : #typeof( #heapBefore_LOOP (program Variable));
      ProgramSV                                : #heapBefore_LOOP (program Variable)


    VariableSpecification                    : #heapBefore_LOOP;
      ProgramSV                                : #heapBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;
    TypeOf                                   : #typeof( #savedHeapBefore_LOOP (program Variable));
      ProgramSV                                : #savedHeapBefore_LOOP (program Variable)


    VariableSpecification                    : #savedHeapBefore_LOOP;
      ProgramSV                                : #savedHeapBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;
    TypeOf                                   : #typeof( #permissionsBefore_LOOP (program Variable));
      ProgramSV                                : #permissionsBefore_LOOP (program Variable)


    VariableSpecification                    : #permissionsBefore_LOOP;
      ProgramSV                                : #permissionsBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#variant) #variant;
    TypeOf                                   : #typeof( #variant (program Variable));
      ProgramSV                                : #variant (program Variable)


    VariableSpecification                    : #variant;
      ProgramSV                                : #variant (program Variable)





=== 1828924154 ======================================================
```
{ while (#nse) #body }
```

StatementBlock                           : {   while (#nse) #body }
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 1828924154 ======================================================
```
{ while (#nse) #body }
```

StatementBlock                           : {   while (#nse) #body }
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 695964776 ======================================================
```
 {.. while (#nse) #body ... }
```

ContextStatementBlock                    : ..{ ..   while (#nse) #body ... } ...
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 1062393960 ======================================================
```
{
                              ..
                              boolean #x;
                              loop-scope(#x) {
                                if (#nse) {
                                  #body
                                  continue;
                                } else {
                                  break;
                                }
                              }
                              ...
                            }
```

ContextStatementBlock                    : ..{ ..   boolean #x;   loop-scope (#x) {     if (#nse) {       #body       continue;     } else {       break;     }   } ... } ...
  LocalVariableDeclaration                 : boolean #x;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #x;
      ProgramSV                                : #x (program Variable)



  LoopScopeBlock                           : loop-scope (#x) {   if (#nse) {     #body     continue;   } else {     break;   } }
    ProgramSV                                : #x (program Variable)

    StatementBlock                           : {   if (#nse) {     #body     continue;   } else {     break;   } }
      If                                       : if (#nse) {   #body   continue; } else {   break; }
        ProgramSV                                : #nse (program Expression)

        Then                                     :  {   #body   continue; }
          StatementBlock                           : {   #body   continue; }
            ProgramSV                                : #body (program Statement)

            Continue                                 : continue;



        Else                                     : else {   break; }
          StatementBlock                           : {   break; }
            Break                                    : break;








=== 500308628 ======================================================
```
{   #typeof(#heapBefore_LOOP) #heapBefore_LOOP;
                                 #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;
                                 #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;
                                 #localVarDeclsBefore_LOOP
              }
              
```

StatementBlock                           : {   #typeof(#heapBefore_LOOP) #heapBefore_LOOP;   #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;   #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;   #localVarDeclsBefore_LOOP }
  LocalVariableDeclaration                 : #typeof(#heapBefore_LOOP) #heapBefore_LOOP;
    TypeOf                                   : #typeof( #heapBefore_LOOP (program Variable));
      ProgramSV                                : #heapBefore_LOOP (program Variable)


    VariableSpecification                    : #heapBefore_LOOP;
      ProgramSV                                : #heapBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#savedHeapBefore_LOOP) #savedHeapBefore_LOOP;
    TypeOf                                   : #typeof( #savedHeapBefore_LOOP (program Variable));
      ProgramSV                                : #savedHeapBefore_LOOP (program Variable)


    VariableSpecification                    : #savedHeapBefore_LOOP;
      ProgramSV                                : #savedHeapBefore_LOOP (program Variable)



  LocalVariableDeclaration                 : #typeof(#permissionsBefore_LOOP) #permissionsBefore_LOOP;
    TypeOf                                   : #typeof( #permissionsBefore_LOOP (program Variable));
      ProgramSV                                : #permissionsBefore_LOOP (program Variable)


    VariableSpecification                    : #permissionsBefore_LOOP;
      ProgramSV                                : #permissionsBefore_LOOP (program Variable)



  ProgramSV                                : #localVarDeclsBefore_LOOP (program Statement)



=== 1062393960 ======================================================
```
{
                              ..
                              boolean #x;
                              loop-scope(#x) {
                                if (#nse) {
                                  #body
                                  continue;
                                } else {
                                  break;
                                }
                              }
                              ...
                            }
```

ContextStatementBlock                    : ..{ ..   boolean #x;   loop-scope (#x) {     if (#nse) {       #body       continue;     } else {       break;     }   } ... } ...
  LocalVariableDeclaration                 : boolean #x;
    SchemaTypeReference                      : boolean;
      ProgramElementName                       : boolean


    VariableSpecification                    : #x;
      ProgramSV                                : #x (program Variable)



  LoopScopeBlock                           : loop-scope (#x) {   if (#nse) {     #body     continue;   } else {     break;   } }
    ProgramSV                                : #x (program Variable)

    StatementBlock                           : {   if (#nse) {     #body     continue;   } else {     break;   } }
      If                                       : if (#nse) {   #body   continue; } else {   break; }
        ProgramSV                                : #nse (program Expression)

        Then                                     :  {   #body   continue; }
          StatementBlock                           : {   #body   continue; }
            ProgramSV                                : #body (program Statement)

            Continue                                 : continue;



        Else                                     : else {   break; }
          StatementBlock                           : {   break; }
            Break                                    : break;








=== 1828924154 ======================================================
```
{ while (#nse) #body }
```

StatementBlock                           : {   while (#nse) #body }
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 1828924154 ======================================================
```
{ while (#nse) #body }
```

StatementBlock                           : {   while (#nse) #body }
  While                                    : while (#nse) #body
    Guard                                    : #nse (program Expression)
      ProgramSV                                : #nse (program Expression)


    ProgramSV                                : #body (program Statement)




=== 76906728 ======================================================
```
{.. loop-scope(#lhs) { break; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   loop-scope (#lhs) {     break;     #slist   } ... } ...
  LoopScopeBlock                           : loop-scope (#lhs) {   break;   #slist }
    ProgramSV                                : #lhs (program LeftHandSide)

    StatementBlock                           : {   break;   #slist }
      Break                                    : break;

      ProgramSV                                : #slist (program Statement)





=== -1372383946 ======================================================
```
{..  #lhs = true; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = true; ... } ...
  CopyAssignment                           : #lhs = true;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : true;




=== 1229678256 ======================================================
```
{.. loop-scope(#lhs) { continue; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   loop-scope (#lhs) {     continue;     #slist   } ... } ...
  LoopScopeBlock                           : loop-scope (#lhs) {   continue;   #slist }
    ProgramSV                                : #lhs (program LeftHandSide)

    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;

      ProgramSV                                : #slist (program Statement)





=== 1462385772 ======================================================
```
{.. #lb: loop-scope(#lhs) { continue #lb; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   #lb:   loop-scope (#lhs) {     continue;     #slist   } ... } ...
  LabeledStatement                         : #lb: loop-scope (#lhs) {   continue;   #slist }
    ProgramSV                                : #lb (program Label)

    LoopScopeBlock                           : loop-scope (#lhs) {   continue;   #slist }
      ProgramSV                                : #lhs (program LeftHandSide)

      StatementBlock                           : {   continue;   #slist }
        Continue                                 : continue;
          ProgramSV                                : #lb (program Label)


        ProgramSV                                : #slist (program Statement)






=== -24240041 ======================================================
```
{.. loop-scope(#lhs) { continue #lb; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   loop-scope (#lhs) {     continue;     #slist   } ... } ...
  LoopScopeBlock                           : loop-scope (#lhs) {   continue;   #slist }
    ProgramSV                                : #lhs (program LeftHandSide)

    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)





=== 1625925531 ======================================================
```
{..  #lhs = true; continue #lb; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = true;   continue; ... } ...
  CopyAssignment                           : #lhs = true;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : true;


  Continue                                 : continue;
    ProgramSV                                : #lb (program Label)




=== 1096430303 ======================================================
```
{
                      loop-scope(#lhs) { continue #lb; #slist } }
                    
```

StatementBlock                           : {   loop-scope (#lhs) {     continue;     #slist   } }
  LoopScopeBlock                           : loop-scope (#lhs) {   continue;   #slist }
    ProgramSV                                : #lhs (program LeftHandSide)

    StatementBlock                           : {   continue;   #slist }
      Continue                                 : continue;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)





=== 921634741 ======================================================
```
{.. #lb1: loop-scope(#lhs) { continue #lb; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   #lb1:   loop-scope (#lhs) {     continue;     #slist   } ... } ...
  LabeledStatement                         : #lb1: loop-scope (#lhs) {   continue;   #slist }
    ProgramSV                                : #lb1 (program Label)

    LoopScopeBlock                           : loop-scope (#lhs) {   continue;   #slist }
      ProgramSV                                : #lhs (program LeftHandSide)

      StatementBlock                           : {   continue;   #slist }
        Continue                                 : continue;
          ProgramSV                                : #lb (program Label)


        ProgramSV                                : #slist (program Statement)






=== 1625925531 ======================================================
```
{..  #lhs = true; continue #lb; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = true;   continue; ... } ...
  CopyAssignment                           : #lhs = true;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : true;


  Continue                                 : continue;
    ProgramSV                                : #lb (program Label)




=== 1984978575 ======================================================
```
{.. loop-scope(#lhs) { break #lb; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   loop-scope (#lhs) {     break;     #slist   } ... } ...
  LoopScopeBlock                           : loop-scope (#lhs) {   break;   #slist }
    ProgramSV                                : #lhs (program LeftHandSide)

    StatementBlock                           : {   break;   #slist }
      Break                                    : break;
        ProgramSV                                : #lb (program Label)


      ProgramSV                                : #slist (program Statement)





=== -943045939 ======================================================
```
{..  { #lhs = true; break #lb; } ...}
```

ContextStatementBlock                    : ..{ ..   {     #lhs = true;     break;   } ... } ...
  StatementBlock                           : {   #lhs = true;   break; }
    CopyAssignment                           : #lhs = true;
      ProgramSV                                : #lhs (program LeftHandSide)

      BooleanLiteral                           : true;


    Break                                    : break;
      ProgramSV                                : #lb (program Label)





=== -2104161044 ======================================================
```
{.. loop-scope(#lhs) { throw #se; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   loop-scope (#lhs) {     throw #se;     #slist   } ... } ...
  LoopScopeBlock                           : loop-scope (#lhs) {   throw #se;   #slist }
    ProgramSV                                : #lhs (program LeftHandSide)

    StatementBlock                           : {   throw #se;   #slist }
      Throw                                    : throw #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)





=== 1470595592 ======================================================
```
{..  #lhs = true; throw #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = true;   throw #se; ... } ...
  CopyAssignment                           : #lhs = true;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : true;


  Throw                                    : throw #se;
    ProgramSV                                : #se (program SimpleExpression)




=== 357450450 ======================================================
```
{.. loop-scope(#lhs) { return #se; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   loop-scope (#lhs) {     return #se;     #slist   } ... } ...
  LoopScopeBlock                           : loop-scope (#lhs) {   return #se;   #slist }
    ProgramSV                                : #lhs (program LeftHandSide)

    StatementBlock                           : {   return #se;   #slist }
      Return                                   : return #se;
        ProgramSV                                : #se (program SimpleExpression)


      ProgramSV                                : #slist (program Statement)





=== -1246008704 ======================================================
```
{..  #lhs = true; return #se; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = true;   return #se; ... } ...
  CopyAssignment                           : #lhs = true;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : true;


  Return                                   : return #se;
    ProgramSV                                : #se (program SimpleExpression)




=== -1095507705 ======================================================
```
{.. loop-scope(#lhs) { return; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   loop-scope (#lhs) {     return;     #slist   } ... } ...
  LoopScopeBlock                           : loop-scope (#lhs) {   return;   #slist }
    ProgramSV                                : #lhs (program LeftHandSide)

    StatementBlock                           : {   return;   #slist }
      Return                                   : return;

      ProgramSV                                : #slist (program Statement)





=== 1153119275 ======================================================
```
{..  #lhs = true; return; ...}
```

ContextStatementBlock                    : ..{ ..   #lhs = true;   return; ... } ...
  CopyAssignment                           : #lhs = true;
    ProgramSV                                : #lhs (program LeftHandSide)

    BooleanLiteral                           : true;


  Return                                   : return;



=== -513931026 ======================================================
```
{.. { continue; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   {     continue;     #slist   } ... } ...
  StatementBlock                           : {   continue;   #slist }
    Continue                                 : continue;

    ProgramSV                                : #slist (program Statement)




=== 1154630144 ======================================================
```
{..   continue; ...}
```

ContextStatementBlock                    : ..{ ..   continue; ... } ...
  Continue                                 : continue;



=== 888813418 ======================================================
```
{.. { break; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   {     break;     #slist   } ... } ...
  StatementBlock                           : {   break;   #slist }
    Break                                    : break;

    ProgramSV                                : #slist (program Statement)




=== -1746721170 ======================================================
```
{..   break; ...}
```

ContextStatementBlock                    : ..{ ..   break; ... } ...
  Break                                    : break;



=== 736719765 ======================================================
```
{.. { continue #lb; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   {     continue;     #slist   } ... } ...
  StatementBlock                           : {   continue;   #slist }
    Continue                                 : continue;
      ProgramSV                                : #lb (program Label)


    ProgramSV                                : #slist (program Statement)




=== 526555641 ======================================================
```
{..   continue #lb; ...}
```

ContextStatementBlock                    : ..{ ..   continue; ... } ...
  Continue                                 : continue;
    ProgramSV                                : #lb (program Label)




=== -527301615 ======================================================
```
{.. { break #lb; #slist } ...}
```

ContextStatementBlock                    : ..{ ..   {     break;     #slist   } ... } ...
  StatementBlock                           : {   break;   #slist }
    Break                                    : break;
      ProgramSV                                : #lb (program Label)


    ProgramSV                                : #slist (program Statement)




=== -43018393 ======================================================
```
{..   break #lb; ...}
```

ContextStatementBlock                    : ..{ ..   break; ... } ...
  Break                                    : break;
    ProgramSV                                : #lb (program Label)




=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Object.java ======================================================
CompilationUnit                          :  package java.lang;  public class Object {     <clinit>     <clprepare>     <init>     public boolean java.lang.Object::<transactionConditionallyUpdated>     public int java.lang.Object::<transient>     public boolean java.lang.Object::<created>     public boolean java.lang.Object::<initialized>     static       private boolean java.lang.Object::<classPrepared>     static       private boolean java.lang.Object::<classInitialized>     static       private boolean java.lang.Object::<classErroneous>     static       private boolean java.lang.Object::<classInitializationInProgress>     Object     equals     hashCode     toString     finalize     clone     notify     notifyAll     wait     wait     wait     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class Object {     <clinit>     <clprepare>     <init>     public boolean java.lang.Object::<transactionConditionallyUpdated>     public int java.lang.Object::<transient>     public boolean java.lang.Object::<created>     public boolean java.lang.Object::<initialized>     static       private boolean java.lang.Object::<classPrepared>     static       private boolean java.lang.Object::<classInitialized>     static       private boolean java.lang.Object::<classErroneous>     static       private boolean java.lang.Object::<classInitializationInProgress>     Object     equals     hashCode     toString     finalize     clone     notify     notifyAll     wait     wait     wait     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : Object

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {} catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {} catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {} catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Object::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {} catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {} catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {} catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Object::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {} catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {} catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Object::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Object::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Object::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {} catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {}

                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Object::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Object::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Object::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Object::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Object::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Object::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Object::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Object::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Object::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Object::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Object::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Object::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {}


    FieldDeclaration                         : public boolean java.lang.Object::<transactionConditionallyUpdated>;
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Object::<transactionConditionallyUpdated>;
        LocationVariable                         : java.lang.Object::<transactionConditionallyUpdated>



    FieldDeclaration                         : public int java.lang.Object::<transient>;
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ImplicitFieldSpecification               : java.lang.Object::<transient>;
        LocationVariable                         : java.lang.Object::<transient>



    FieldDeclaration                         : public boolean java.lang.Object::<created>;
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Object::<created>;
        LocationVariable                         : java.lang.Object::<created>



    FieldDeclaration                         : public boolean java.lang.Object::<initialized>;
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Object::<initialized>;
        LocationVariable                         : java.lang.Object::<initialized>



    FieldDeclaration                         : static   private boolean java.lang.Object::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Object::<classPrepared>;
        LocationVariable                         : java.lang.Object::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Object::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Object::<classInitialized>;
        LocationVariable                         : java.lang.Object::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.Object::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Object::<classErroneous>;
        LocationVariable                         : java.lang.Object::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Object::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Object::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Object::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : Object

      StatementBlock                           : {}


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : equals

      ParameterDeclaration                     : java.lang.Object o;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : o;
          LocationVariable                         : o




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : hashCode


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : toString


    MethodDeclaration                        : 
      Protected                                : protected;

      ProgramElementName                       : finalize

      Throws                                   : throws java.lang.Throwable;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable



      StatementBlock                           : {}


    MethodDeclaration                        : protected java.lang.Object clone ()throws java.lang.CloneNotSupportedException{}
      Protected                                : protected;

      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object


      ProgramElementName                       : clone

      Throws                                   : throws java.lang.CloneNotSupportedException;
        TypeRef                                  : java.lang.CloneNotSupportedException;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : CloneNotSupportedException



      StatementBlock                           : {}


    MethodDeclaration                        : 
      Public                                   : public;

      Final                                    : final;

      ProgramElementName                       : notify


    MethodDeclaration                        : 
      Public                                   : public;

      Final                                    : final;

      ProgramElementName                       : notifyAll


    MethodDeclaration                        : public   final void wait ()throws java.lang.InterruptedException;
      Public                                   : public;

      Final                                    : final;

      ProgramElementName                       : wait

      Throws                                   : throws java.lang.InterruptedException;
        TypeRef                                  : java.lang.InterruptedException;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : InterruptedException




    MethodDeclaration                        : public   final void wait (long ms)throws java.lang.InterruptedException;
      Public                                   : public;

      Final                                    : final;

      ProgramElementName                       : wait

      ParameterDeclaration                     : long ms;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : ms;
          LocationVariable                         : ms



      Throws                                   : throws java.lang.InterruptedException;
        TypeRef                                  : java.lang.InterruptedException;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : InterruptedException




    MethodDeclaration                        : public   final void wait (long ms, int ns)throws java.lang.InterruptedException;
      Public                                   : public;

      Final                                    : final;

      ProgramElementName                       : wait

      ParameterDeclaration                     : long ms;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : ms;
          LocationVariable                         : ms



      ParameterDeclaration                     : int ns;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : ns;
          LocationVariable                         : ns



      Throws                                   : throws java.lang.InterruptedException;
        TypeRef                                  : java.lang.InterruptedException;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : InterruptedException




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Object;
        ProgramElementName                       : Object


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : 
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {}


    MethodDeclaration                        : 
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {}


    MethodDeclaration                        : public Object <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Object;
        ProgramElementName                       : Object


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Object <createObject> (){     Object __NEW__;     __NEW__ = Object.<allocate>();     __NEW__.<create>()@java.lang.Object;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Object;
        ProgramElementName                       : Object


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Object __NEW__;   __NEW__ = Object.<allocate>();   __NEW__.<create>()@java.lang.Object;   return __NEW__; }
        LocalVariableDeclaration                 : Object __NEW__;
          TypeRef                                  : Object;
            ProgramElementName                       : Object


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Object.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Object.<allocate>();
            TypeRef                                  : Object;
              ProgramElementName                       : Object


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Object;
          TypeRef                                  : java.lang.Object;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Object


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/annotation/Annotation.java ======================================================
CompilationUnit                          :  package java.lang.annotation;  public interface Annotation {     annotationType   };
  PackageSpecification                     :  package java.lang.annotation;;
    PackageReference                         : java.lang.annotation
      PackageReference                         : java.lang
        PackageReference                         : java
          ProgramElementName                       : java


        ProgramElementName                       : lang


      ProgramElementName                       : annotation



  InterfaceDeclaration                     : public interface Annotation {     annotationType   };
    Public                                   : public;

    ProgramElementName                       : Annotation

    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.Class;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Class


      ProgramElementName                       : annotationType





=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/ArithmeticException.java ======================================================
CompilationUnit                          :  package java.lang;  public class ArithmeticException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.ArithmeticException::<classPrepared>     static       private boolean java.lang.ArithmeticException::<classInitialized>     static       private boolean java.lang.ArithmeticException::<classErroneous>     static       private boolean java.lang.ArithmeticException::<classInitializationInProgress>     ArithmeticException     ArithmeticException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class ArithmeticException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.ArithmeticException::<classPrepared>     static       private boolean java.lang.ArithmeticException::<classInitialized>     static       private boolean java.lang.ArithmeticException::<classErroneous>     static       private boolean java.lang.ArithmeticException::<classInitializationInProgress>     ArithmeticException     ArithmeticException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : ArithmeticException

    Extends                                  : extends java.lang.RuntimeException;
      TypeRef                                  : java.lang.RuntimeException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : RuntimeException



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.RuntimeException.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.RuntimeException.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.ArithmeticException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.ArithmeticException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.ArithmeticException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.ArithmeticException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.ArithmeticException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.RuntimeException.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.RuntimeException.<clinit>()); }
                        PassiveExpression                        : @(java.lang.RuntimeException.<clinit>());
                          MethodReference                          : java.lang.RuntimeException.<clinit>();
                            TypeRef                                  : java.lang.RuntimeException;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : RuntimeException


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.ArithmeticException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.ArithmeticException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.ArithmeticException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.ArithmeticException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.ArithmeticException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.ArithmeticException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.ArithmeticException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.ArithmeticException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.ArithmeticException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.ArithmeticException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.ArithmeticException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.ArithmeticException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.ArithmeticException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ArithmeticException::<classPrepared>;
        LocationVariable                         : java.lang.ArithmeticException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.ArithmeticException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ArithmeticException::<classInitialized>;
        LocationVariable                         : java.lang.ArithmeticException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.ArithmeticException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ArithmeticException::<classErroneous>;
        LocationVariable                         : java.lang.ArithmeticException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.ArithmeticException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ArithmeticException::<classInitializationInProgress>;
        LocationVariable                         : java.lang.ArithmeticException::<classInitializationInProgress>



    ConstructorDeclaration                   : public ArithmeticException (){     super();   }
      Public                                   : public;

      ProgramElementName                       : ArithmeticException

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public ArithmeticException (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : ArithmeticException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ArithmeticException;
        ProgramElementName                       : ArithmeticException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public ArithmeticException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : ArithmeticException;
        ProgramElementName                       : ArithmeticException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static ArithmeticException <createObject> (){     ArithmeticException __NEW__;     __NEW__ = ArithmeticException.<allocate>();     __NEW__.<create>()@java.lang.ArithmeticException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ArithmeticException;
        ProgramElementName                       : ArithmeticException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   ArithmeticException __NEW__;   __NEW__ = ArithmeticException.<allocate>();   __NEW__.<create>()@java.lang.ArithmeticException;   return __NEW__; }
        LocalVariableDeclaration                 : ArithmeticException __NEW__;
          TypeRef                                  : ArithmeticException;
            ProgramElementName                       : ArithmeticException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = ArithmeticException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : ArithmeticException.<allocate>();
            TypeRef                                  : ArithmeticException;
              ProgramElementName                       : ArithmeticException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.ArithmeticException;
          TypeRef                                  : java.lang.ArithmeticException;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : ArithmeticException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/ArrayIndexOutOfBoundsException.java ======================================================
CompilationUnit                          :  package java.lang;  public class ArrayIndexOutOfBoundsException extends java.lang.IndexOutOfBoundsException {     <clinit>     <clprepare>     <init>     <init>     <init>     static       private boolean java.lang.ArrayIndexOutOfBoundsException::<classPrepared>     static       private boolean java.lang.ArrayIndexOutOfBoundsException::<classInitialized>     static       private boolean java.lang.ArrayIndexOutOfBoundsException::<classErroneous>     static       private boolean java.lang.ArrayIndexOutOfBoundsException::<classInitializationInProgress>     ArrayIndexOutOfBoundsException     ArrayIndexOutOfBoundsException     ArrayIndexOutOfBoundsException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class ArrayIndexOutOfBoundsException extends java.lang.IndexOutOfBoundsException {     <clinit>     <clprepare>     <init>     <init>     <init>     static       private boolean java.lang.ArrayIndexOutOfBoundsException::<classPrepared>     static       private boolean java.lang.ArrayIndexOutOfBoundsException::<classInitialized>     static       private boolean java.lang.ArrayIndexOutOfBoundsException::<classErroneous>     static       private boolean java.lang.ArrayIndexOutOfBoundsException::<classInitializationInProgress>     ArrayIndexOutOfBoundsException     ArrayIndexOutOfBoundsException     ArrayIndexOutOfBoundsException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : ArrayIndexOutOfBoundsException

    Extends                                  : extends java.lang.IndexOutOfBoundsException;
      TypeRef                                  : java.lang.IndexOutOfBoundsException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : IndexOutOfBoundsException



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.IndexOutOfBoundsException.<clinit>(                        ));         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.IndexOutOfBoundsException.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.IndexOutOfBoundsException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.IndexOutOfBoundsException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.IndexOutOfBoundsException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.IndexOutOfBoundsException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.IndexOutOfBoundsException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.IndexOutOfBoundsException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.IndexOutOfBoundsException.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.IndexOutOfBoundsException.<clinit>()); }
                        PassiveExpression                        : @(java.lang.IndexOutOfBoundsException.<clinit>());
                          MethodReference                          : java.lang.IndexOutOfBoundsException.<clinit>();
                            TypeRef                                  : java.lang.IndexOutOfBoundsException;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : IndexOutOfBoundsException


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.ArrayIndexOutOfBoundsException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ArrayIndexOutOfBoundsException::<classPrepared>;
        LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.ArrayIndexOutOfBoundsException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ArrayIndexOutOfBoundsException::<classInitialized>;
        LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.ArrayIndexOutOfBoundsException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ArrayIndexOutOfBoundsException::<classErroneous>;
        LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.ArrayIndexOutOfBoundsException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ArrayIndexOutOfBoundsException::<classInitializationInProgress>;
        LocationVariable                         : java.lang.ArrayIndexOutOfBoundsException::<classInitializationInProgress>



    ConstructorDeclaration                   : public ArrayIndexOutOfBoundsException (){     super();   }
      Public                                   : public;

      ProgramElementName                       : ArrayIndexOutOfBoundsException

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : ArrayIndexOutOfBoundsException

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    ConstructorDeclaration                   : public ArrayIndexOutOfBoundsException (     java.lang.String arg0   ){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : ArrayIndexOutOfBoundsException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : public   static ArrayIndexOutOfBoundsException <allocate> ();
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ArrayIndexOutOfBoundsException;
        ProgramElementName                       : ArrayIndexOutOfBoundsException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public ArrayIndexOutOfBoundsException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : ArrayIndexOutOfBoundsException;
        ProgramElementName                       : ArrayIndexOutOfBoundsException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static ArrayIndexOutOfBoundsException <createObject> (        ){     ArrayIndexOutOfBoundsException __NEW__;     __NEW__ = ArrayIndexOutOfBoundsException.<allocate>(            );     __NEW__.<create>()@java.lang.ArrayIndexOutOfBoundsException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ArrayIndexOutOfBoundsException;
        ProgramElementName                       : ArrayIndexOutOfBoundsException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   ArrayIndexOutOfBoundsException __NEW__;   __NEW__ = ArrayIndexOutOfBoundsException.<allocate>();   __NEW__.<create>()@java.lang.ArrayIndexOutOfBoundsException;   return __NEW__; }
        LocalVariableDeclaration                 : ArrayIndexOutOfBoundsException __NEW__;
          TypeRef                                  : ArrayIndexOutOfBoundsException;
            ProgramElementName                       : ArrayIndexOutOfBoundsException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = ArrayIndexOutOfBoundsException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : ArrayIndexOutOfBoundsException.<allocate>();
            TypeRef                                  : ArrayIndexOutOfBoundsException;
              ProgramElementName                       : ArrayIndexOutOfBoundsException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.ArrayIndexOutOfBoundsException;
          TypeRef                                  : java.lang.ArrayIndexOutOfBoundsException;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : ArrayIndexOutOfBoundsException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/ArrayStoreException.java ======================================================
CompilationUnit                          :  package java.lang;  public class ArrayStoreException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.ArrayStoreException::<classPrepared>     static       private boolean java.lang.ArrayStoreException::<classInitialized>     static       private boolean java.lang.ArrayStoreException::<classErroneous>     static       private boolean java.lang.ArrayStoreException::<classInitializationInProgress>     ArrayStoreException     ArrayStoreException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class ArrayStoreException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.ArrayStoreException::<classPrepared>     static       private boolean java.lang.ArrayStoreException::<classInitialized>     static       private boolean java.lang.ArrayStoreException::<classErroneous>     static       private boolean java.lang.ArrayStoreException::<classInitializationInProgress>     ArrayStoreException     ArrayStoreException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : ArrayStoreException

    Extends                                  : extends java.lang.RuntimeException;
      TypeRef                                  : java.lang.RuntimeException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : RuntimeException



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.RuntimeException.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.RuntimeException.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.ArrayStoreException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.ArrayStoreException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.ArrayStoreException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.ArrayStoreException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.ArrayStoreException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.RuntimeException.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.RuntimeException.<clinit>()); }
                        PassiveExpression                        : @(java.lang.RuntimeException.<clinit>());
                          MethodReference                          : java.lang.RuntimeException.<clinit>();
                            TypeRef                                  : java.lang.RuntimeException;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : RuntimeException


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.ArrayStoreException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.ArrayStoreException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.ArrayStoreException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.ArrayStoreException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.ArrayStoreException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.ArrayStoreException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.ArrayStoreException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.ArrayStoreException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.ArrayStoreException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.ArrayStoreException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.ArrayStoreException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.ArrayStoreException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.ArrayStoreException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ArrayStoreException::<classPrepared>;
        LocationVariable                         : java.lang.ArrayStoreException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.ArrayStoreException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ArrayStoreException::<classInitialized>;
        LocationVariable                         : java.lang.ArrayStoreException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.ArrayStoreException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ArrayStoreException::<classErroneous>;
        LocationVariable                         : java.lang.ArrayStoreException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.ArrayStoreException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ArrayStoreException::<classInitializationInProgress>;
        LocationVariable                         : java.lang.ArrayStoreException::<classInitializationInProgress>



    ConstructorDeclaration                   : public ArrayStoreException (){     super();   }
      Public                                   : public;

      ProgramElementName                       : ArrayStoreException

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public ArrayStoreException (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : ArrayStoreException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ArrayStoreException;
        ProgramElementName                       : ArrayStoreException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public ArrayStoreException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : ArrayStoreException;
        ProgramElementName                       : ArrayStoreException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static ArrayStoreException <createObject> (){     ArrayStoreException __NEW__;     __NEW__ = ArrayStoreException.<allocate>();     __NEW__.<create>()@java.lang.ArrayStoreException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ArrayStoreException;
        ProgramElementName                       : ArrayStoreException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   ArrayStoreException __NEW__;   __NEW__ = ArrayStoreException.<allocate>();   __NEW__.<create>()@java.lang.ArrayStoreException;   return __NEW__; }
        LocalVariableDeclaration                 : ArrayStoreException __NEW__;
          TypeRef                                  : ArrayStoreException;
            ProgramElementName                       : ArrayStoreException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = ArrayStoreException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : ArrayStoreException.<allocate>();
            TypeRef                                  : ArrayStoreException;
              ProgramElementName                       : ArrayStoreException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.ArrayStoreException;
          TypeRef                                  : java.lang.ArrayStoreException;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : ArrayStoreException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/AssertionError.java ======================================================
CompilationUnit                          :  package java.lang;  public class AssertionError extends java.lang.Error {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     <init>     <init>     static       private boolean java.lang.AssertionError::<classPrepared>     static       private boolean java.lang.AssertionError::<classInitialized>     static       private boolean java.lang.AssertionError::<classErroneous>     static       private boolean java.lang.AssertionError::<classInitializationInProgress>     AssertionError     AssertionError     AssertionError     AssertionError     AssertionError     AssertionError     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class AssertionError extends java.lang.Error {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     <init>     <init>     static       private boolean java.lang.AssertionError::<classPrepared>     static       private boolean java.lang.AssertionError::<classInitialized>     static       private boolean java.lang.AssertionError::<classErroneous>     static       private boolean java.lang.AssertionError::<classInitializationInProgress>     AssertionError     AssertionError     AssertionError     AssertionError     AssertionError     AssertionError     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : AssertionError

    Extends                                  : extends java.lang.Error;
      TypeRef                                  : java.lang.Error;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Error



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Error.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Error.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Error.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.AssertionError::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Error.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Error.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Error.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.AssertionError::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Error.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Error.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.AssertionError::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.AssertionError::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.AssertionError::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Error.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Error.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Error.<clinit>());
                          MethodReference                          : java.lang.Error.<clinit>();
                            TypeRef                                  : java.lang.Error;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Error


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.AssertionError::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.AssertionError::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.AssertionError::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.AssertionError::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.AssertionError::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.AssertionError::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.AssertionError::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.AssertionError::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.AssertionError::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.AssertionError::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.AssertionError::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.AssertionError::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (long detailMessage){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : long detailMessage;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : detailMessage;
          LocationVariable                         : detailMessage



      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    MethodDeclaration                        : public void <init> (int detailMessage){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : int detailMessage;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : detailMessage;
          LocationVariable                         : detailMessage



      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    MethodDeclaration                        : public void <init> (char detailMessage){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : char detailMessage;
        TypeRef                                  : char;
          ProgramElementName                       : char


        VariableSpecification                    : detailMessage;
          LocationVariable                         : detailMessage



      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    MethodDeclaration                        : public void <init> (boolean detailMessage){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : boolean detailMessage;
        TypeRef                                  : boolean;
          ProgramElementName                       : boolean


        VariableSpecification                    : detailMessage;
          LocationVariable                         : detailMessage



      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    MethodDeclaration                        : public void <init> (java.lang.Object detailMessage){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.Object detailMessage;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : detailMessage;
          LocationVariable                         : detailMessage



      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.AssertionError::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.AssertionError::<classPrepared>;
        LocationVariable                         : java.lang.AssertionError::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.AssertionError::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.AssertionError::<classInitialized>;
        LocationVariable                         : java.lang.AssertionError::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.AssertionError::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.AssertionError::<classErroneous>;
        LocationVariable                         : java.lang.AssertionError::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.AssertionError::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.AssertionError::<classInitializationInProgress>;
        LocationVariable                         : java.lang.AssertionError::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : AssertionError

      StatementBlock                           : {}


    ConstructorDeclaration                   : public AssertionError (java.lang.Object detailMessage){}
      Public                                   : public;

      ProgramElementName                       : AssertionError

      ParameterDeclaration                     : java.lang.Object detailMessage;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : detailMessage;
          LocationVariable                         : detailMessage



      StatementBlock                           : {}


    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : AssertionError

      ParameterDeclaration                     : boolean detailMessage;
        TypeRef                                  : boolean;
          ProgramElementName                       : boolean


        VariableSpecification                    : detailMessage;
          LocationVariable                         : detailMessage



      StatementBlock                           : {}


    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : AssertionError

      ParameterDeclaration                     : char detailMessage;
        TypeRef                                  : char;
          ProgramElementName                       : char


        VariableSpecification                    : detailMessage;
          LocationVariable                         : detailMessage



      StatementBlock                           : {}


    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : AssertionError

      ParameterDeclaration                     : int detailMessage;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : detailMessage;
          LocationVariable                         : detailMessage



      StatementBlock                           : {}


    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : AssertionError

      ParameterDeclaration                     : long detailMessage;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : detailMessage;
          LocationVariable                         : detailMessage



      StatementBlock                           : {}


    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : AssertionError;
        ProgramElementName                       : AssertionError


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public AssertionError <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : AssertionError;
        ProgramElementName                       : AssertionError


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static AssertionError <createObject> (){     AssertionError __NEW__;     __NEW__ = AssertionError.<allocate>();     __NEW__.<create>()@java.lang.AssertionError;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : AssertionError;
        ProgramElementName                       : AssertionError


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   AssertionError __NEW__;   __NEW__ = AssertionError.<allocate>();   __NEW__.<create>()@java.lang.AssertionError;   return __NEW__; }
        LocalVariableDeclaration                 : AssertionError __NEW__;
          TypeRef                                  : AssertionError;
            ProgramElementName                       : AssertionError


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = AssertionError.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : AssertionError.<allocate>();
            TypeRef                                  : AssertionError;
              ProgramElementName                       : AssertionError


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.AssertionError;
          TypeRef                                  : java.lang.AssertionError;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : AssertionError


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Character.java ======================================================
CompilationUnit                          :  package java.lang;  public   final class Character extends java.lang.Object implements java.io.Serializable,   java.lang.Comparable {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Character::<classPrepared>     static       private boolean java.lang.Character::<classInitialized>     static       private boolean java.lang.Character::<classErroneous>     static       private boolean java.lang.Character::<classInitializationInProgress>     digit     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public   final class Character extends java.lang.Object implements java.io.Serializable,   java.lang.Comparable {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Character::<classPrepared>     static       private boolean java.lang.Character::<classInitialized>     static       private boolean java.lang.Character::<classErroneous>     static       private boolean java.lang.Character::<classInitializationInProgress>     digit     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : Character

    Extends                                  : extends java.lang.Object;
      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object



    Implements                               : implements java.io.Serializable, java.lang.Comparable;
      TypeRef                                  : java.io.Serializable;
        PackageReference                         : java.io
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : io


        ProgramElementName                       : Serializable


      TypeRef                                  : java.lang.Comparable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Comparable



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Character::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Character::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Character::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Character::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Character::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Character::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Character::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Character::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Character::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Character::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Character::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Character::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Character::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Character::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Character::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Character::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Character::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.Character::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Character::<classPrepared>;
        LocationVariable                         : java.lang.Character::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Character::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Character::<classInitialized>;
        LocationVariable                         : java.lang.Character::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.Character::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Character::<classErroneous>;
        LocationVariable                         : java.lang.Character::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Character::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Character::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Character::<classInitializationInProgress>



    MethodDeclaration                        : 
      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : digit

      ParameterDeclaration                     : char ch;
        TypeRef                                  : char;
          ProgramElementName                       : char


        VariableSpecification                    : ch;
          LocationVariable                         : ch



      ParameterDeclaration                     : int radix;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : radix;
          LocationVariable                         : radix




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Character;
        ProgramElementName                       : Character


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Character <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Character;
        ProgramElementName                       : Character


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Character <createObject> (){     Character __NEW__;     __NEW__ = Character.<allocate>();     __NEW__.<create>()@java.lang.Character;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Character;
        ProgramElementName                       : Character


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Character __NEW__;   __NEW__ = Character.<allocate>();   __NEW__.<create>()@java.lang.Character;   return __NEW__; }
        LocalVariableDeclaration                 : Character __NEW__;
          TypeRef                                  : Character;
            ProgramElementName                       : Character


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Character.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Character.<allocate>();
            TypeRef                                  : Character;
              ProgramElementName                       : Character


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Character;
          TypeRef                                  : java.lang.Character;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Character


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Class.java ======================================================
CompilationUnit                          :  package java.lang;  public   final class Class {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Class::<classPrepared>     static       private boolean java.lang.Class::<classInitialized>     static       private boolean java.lang.Class::<classErroneous>     static       private boolean java.lang.Class::<classInitializationInProgress>     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public   final class Class {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Class::<classPrepared>     static       private boolean java.lang.Class::<classInitialized>     static       private boolean java.lang.Class::<classErroneous>     static       private boolean java.lang.Class::<classInitializationInProgress>     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : Class

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Class::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Class::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Class::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Class::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Class::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Class::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Class::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Class::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Class::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Class::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Class::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Class::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Class::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Class::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Class::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Class::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Class::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static private boolean java.lang.Class::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Class::<classPrepared>;
        LocationVariable                         : java.lang.Class::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Class::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Class::<classInitialized>;
        LocationVariable                         : java.lang.Class::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.Class::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Class::<classErroneous>;
        LocationVariable                         : java.lang.Class::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Class::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Class::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Class::<classInitializationInProgress>



    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Class;
        ProgramElementName                       : Class


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Class <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Class;
        ProgramElementName                       : Class


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Class <createObject> (){     Class __NEW__;     __NEW__ = Class.<allocate>();     __NEW__.<create>()@java.lang.Class;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Class;
        ProgramElementName                       : Class


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Class __NEW__;   __NEW__ = Class.<allocate>();   __NEW__.<create>()@java.lang.Class;   return __NEW__; }
        LocalVariableDeclaration                 : Class __NEW__;
          TypeRef                                  : Class;
            ProgramElementName                       : Class


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Class.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Class.<allocate>();
            TypeRef                                  : Class;
              ProgramElementName                       : Class


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Class;
          TypeRef                                  : java.lang.Class;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Class


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/ClassCastException.java ======================================================
CompilationUnit                          :  package java.lang;  public class ClassCastException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.ClassCastException::<classPrepared>     static       private boolean java.lang.ClassCastException::<classInitialized>     static       private boolean java.lang.ClassCastException::<classErroneous>     static       private boolean java.lang.ClassCastException::<classInitializationInProgress>     ClassCastException     ClassCastException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class ClassCastException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.ClassCastException::<classPrepared>     static       private boolean java.lang.ClassCastException::<classInitialized>     static       private boolean java.lang.ClassCastException::<classErroneous>     static       private boolean java.lang.ClassCastException::<classInitializationInProgress>     ClassCastException     ClassCastException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : ClassCastException

    Extends                                  : extends java.lang.RuntimeException;
      TypeRef                                  : java.lang.RuntimeException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : RuntimeException



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.RuntimeException.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.RuntimeException.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.ClassCastException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.ClassCastException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.ClassCastException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.ClassCastException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.ClassCastException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.RuntimeException.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.RuntimeException.<clinit>()); }
                        PassiveExpression                        : @(java.lang.RuntimeException.<clinit>());
                          MethodReference                          : java.lang.RuntimeException.<clinit>();
                            TypeRef                                  : java.lang.RuntimeException;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : RuntimeException


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.ClassCastException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.ClassCastException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.ClassCastException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.ClassCastException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.ClassCastException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.ClassCastException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.ClassCastException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.ClassCastException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.ClassCastException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.ClassCastException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.ClassCastException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.ClassCastException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.ClassCastException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ClassCastException::<classPrepared>;
        LocationVariable                         : java.lang.ClassCastException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.ClassCastException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ClassCastException::<classInitialized>;
        LocationVariable                         : java.lang.ClassCastException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.ClassCastException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ClassCastException::<classErroneous>;
        LocationVariable                         : java.lang.ClassCastException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.ClassCastException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ClassCastException::<classInitializationInProgress>;
        LocationVariable                         : java.lang.ClassCastException::<classInitializationInProgress>



    ConstructorDeclaration                   : public ClassCastException (){     super();   }
      Public                                   : public;

      ProgramElementName                       : ClassCastException

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public ClassCastException (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : ClassCastException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ClassCastException;
        ProgramElementName                       : ClassCastException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public ClassCastException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : ClassCastException;
        ProgramElementName                       : ClassCastException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static ClassCastException <createObject> (){     ClassCastException __NEW__;     __NEW__ = ClassCastException.<allocate>();     __NEW__.<create>()@java.lang.ClassCastException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ClassCastException;
        ProgramElementName                       : ClassCastException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   ClassCastException __NEW__;   __NEW__ = ClassCastException.<allocate>();   __NEW__.<create>()@java.lang.ClassCastException;   return __NEW__; }
        LocalVariableDeclaration                 : ClassCastException __NEW__;
          TypeRef                                  : ClassCastException;
            ProgramElementName                       : ClassCastException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = ClassCastException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : ClassCastException.<allocate>();
            TypeRef                                  : ClassCastException;
              ProgramElementName                       : ClassCastException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.ClassCastException;
          TypeRef                                  : java.lang.ClassCastException;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : ClassCastException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/CloneNotSupportedException.java ======================================================
CompilationUnit                          :  package java.lang;  public class CloneNotSupportedException extends java.lang.Exception {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.CloneNotSupportedException::<classPrepared>     static       private boolean java.lang.CloneNotSupportedException::<classInitialized>     static       private boolean java.lang.CloneNotSupportedException::<classErroneous>     static       private boolean java.lang.CloneNotSupportedException::<classInitializationInProgress>     CloneNotSupportedException     CloneNotSupportedException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class CloneNotSupportedException extends java.lang.Exception {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.CloneNotSupportedException::<classPrepared>     static       private boolean java.lang.CloneNotSupportedException::<classInitialized>     static       private boolean java.lang.CloneNotSupportedException::<classErroneous>     static       private boolean java.lang.CloneNotSupportedException::<classInitializationInProgress>     CloneNotSupportedException     CloneNotSupportedException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : CloneNotSupportedException

    Extends                                  : extends java.lang.Exception;
      TypeRef                                  : java.lang.Exception;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Exception



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Exception.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Exception.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Exception.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.CloneNotSupportedException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Exception.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Exception.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Exception.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.CloneNotSupportedException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Exception.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Exception.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.CloneNotSupportedException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.CloneNotSupportedException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.CloneNotSupportedException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Exception.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Exception.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Exception.<clinit>());
                          MethodReference                          : java.lang.Exception.<clinit>();
                            TypeRef                                  : java.lang.Exception;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Exception


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.CloneNotSupportedException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.CloneNotSupportedException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.CloneNotSupportedException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.CloneNotSupportedException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.CloneNotSupportedException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.CloneNotSupportedException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.CloneNotSupportedException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.CloneNotSupportedException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.CloneNotSupportedException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.CloneNotSupportedException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.CloneNotSupportedException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.CloneNotSupportedException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.CloneNotSupportedException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.CloneNotSupportedException::<classPrepared>;
        LocationVariable                         : java.lang.CloneNotSupportedException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.CloneNotSupportedException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.CloneNotSupportedException::<classInitialized>;
        LocationVariable                         : java.lang.CloneNotSupportedException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.CloneNotSupportedException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.CloneNotSupportedException::<classErroneous>;
        LocationVariable                         : java.lang.CloneNotSupportedException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.CloneNotSupportedException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.CloneNotSupportedException::<classInitializationInProgress>;
        LocationVariable                         : java.lang.CloneNotSupportedException::<classInitializationInProgress>



    ConstructorDeclaration                   : public CloneNotSupportedException (){     super();   }
      Public                                   : public;

      ProgramElementName                       : CloneNotSupportedException

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public CloneNotSupportedException (     java.lang.String arg0   ){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : CloneNotSupportedException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : CloneNotSupportedException;
        ProgramElementName                       : CloneNotSupportedException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public CloneNotSupportedException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : CloneNotSupportedException;
        ProgramElementName                       : CloneNotSupportedException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static CloneNotSupportedException <createObject> (){     CloneNotSupportedException __NEW__;     __NEW__ = CloneNotSupportedException.<allocate>();     __NEW__.<create>()@java.lang.CloneNotSupportedException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : CloneNotSupportedException;
        ProgramElementName                       : CloneNotSupportedException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   CloneNotSupportedException __NEW__;   __NEW__ = CloneNotSupportedException.<allocate>();   __NEW__.<create>()@java.lang.CloneNotSupportedException;   return __NEW__; }
        LocalVariableDeclaration                 : CloneNotSupportedException __NEW__;
          TypeRef                                  : CloneNotSupportedException;
            ProgramElementName                       : CloneNotSupportedException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = CloneNotSupportedException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : CloneNotSupportedException.<allocate>();
            TypeRef                                  : CloneNotSupportedException;
              ProgramElementName                       : CloneNotSupportedException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.CloneNotSupportedException;
          TypeRef                                  : java.lang.CloneNotSupportedException;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : CloneNotSupportedException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Cloneable.java ======================================================
CompilationUnit                          :  package java.lang;  public interface Cloneable {   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  InterfaceDeclaration                     : public interface Cloneable {   };
    Public                                   : public;

    ProgramElementName                       : Cloneable




=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Comparable.java ======================================================
CompilationUnit                          :  package java.lang;  public interface Comparable {     compareTo   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  InterfaceDeclaration                     : public interface Comparable {     compareTo   };
    Public                                   : public;

    ProgramElementName                       : Comparable

    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : compareTo

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Double.java ======================================================
CompilationUnit                          :  package java.lang;  public class Double {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Double::<classPrepared>     static       private boolean java.lang.Double::<classInitialized>     static       private boolean java.lang.Double::<classErroneous>     static       private boolean java.lang.Double::<classInitializationInProgress>     _isSame     _isNaN     isNaN     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class Double {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Double::<classPrepared>     static       private boolean java.lang.Double::<classInitialized>     static       private boolean java.lang.Double::<classErroneous>     static       private boolean java.lang.Double::<classInitializationInProgress>     _isSame     _isNaN     isNaN     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : Double

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Double::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Double::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Double::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Double::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Double::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Double::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Double::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Double::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Double::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Double::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Double::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Double::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Double::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Double::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Double::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Double::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Double::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.Double::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Double::<classPrepared>;
        LocationVariable                         : java.lang.Double::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Double::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Double::<classInitialized>;
        LocationVariable                         : java.lang.Double::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.Double::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Double::<classErroneous>;
        LocationVariable                         : java.lang.Double::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Double::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Double::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Double::<classInitializationInProgress>



    MethodDeclaration                        : 
      Static                                   : static;

      Model                                    : model;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : _isSame

      ParameterDeclaration                     : double a;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : double b;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : b;
          LocationVariable                         : b




    MethodDeclaration                        : 
      Static                                   : static;

      Model                                    : model;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : _isNaN

      ParameterDeclaration                     : double val;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : public   static boolean isNaN (double val){     return val != val;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : isNaN

      ParameterDeclaration                     : double val;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : val;
          LocationVariable                         : val



      StatementBlock                           : {   return val != val; }
        Return                                   : return val != val;
          NotEquals                                : val != val;
            LocationVariable                         : val

            LocationVariable                         : val





    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Double;
        ProgramElementName                       : Double


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Double <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Double;
        ProgramElementName                       : Double


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Double <createObject> (){     Double __NEW__;     __NEW__ = Double.<allocate>();     __NEW__.<create>()@java.lang.Double;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Double;
        ProgramElementName                       : Double


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Double __NEW__;   __NEW__ = Double.<allocate>();   __NEW__.<create>()@java.lang.Double;   return __NEW__; }
        LocalVariableDeclaration                 : Double __NEW__;
          TypeRef                                  : Double;
            ProgramElementName                       : Double


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Double.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Double.<allocate>();
            TypeRef                                  : Double;
              ProgramElementName                       : Double


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Double;
          TypeRef                                  : java.lang.Double;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Double


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Enum.java ======================================================
CompilationUnit                          :  package java.lang;  public   abstract class Enum extends java.lang.Object implements java.lang.Comparable,   java.io.Serializable {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Enum::<classPrepared>     static       private boolean java.lang.Enum::<classInitialized>     static       private boolean java.lang.Enum::<classErroneous>     static       private boolean java.lang.Enum::<classInitializationInProgress>     name     ordinal     Enum     getDeclaringClass     valueOf     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public   abstract class Enum extends java.lang.Object implements java.lang.Comparable,   java.io.Serializable {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Enum::<classPrepared>     static       private boolean java.lang.Enum::<classInitialized>     static       private boolean java.lang.Enum::<classErroneous>     static       private boolean java.lang.Enum::<classInitializationInProgress>     name     ordinal     Enum     getDeclaringClass     valueOf     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Abstract                                 : abstract;

    ProgramElementName                       : Enum

    Extends                                  : extends java.lang.Object;
      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object



    Implements                               : implements java.lang.Comparable, java.io.Serializable;
      TypeRef                                  : java.lang.Comparable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Comparable


      TypeRef                                  : java.io.Serializable;
        PackageReference                         : java.io
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : io


        ProgramElementName                       : Serializable



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Enum::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Enum::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Enum::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Enum::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Enum::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Enum::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Enum::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Enum::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Enum::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Enum::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Enum::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Enum::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Enum::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Enum::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Enum::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Enum::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Enum::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : protected void <init> (java.lang.String arg0, int arg1);
      Protected                                : protected;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    FieldDeclaration                         : static private boolean java.lang.Enum::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Enum::<classPrepared>;
        LocationVariable                         : java.lang.Enum::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Enum::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Enum::<classInitialized>;
        LocationVariable                         : java.lang.Enum::<classInitialized>



    FieldDeclaration                         : static private boolean java.lang.Enum::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Enum::<classErroneous>;
        LocationVariable                         : java.lang.Enum::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Enum::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Enum::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Enum::<classInitializationInProgress>



    MethodDeclaration                        : 
      Public                                   : public;

      Final                                    : final;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : name


    MethodDeclaration                        : 
      Public                                   : public;

      Final                                    : final;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : ordinal


    ConstructorDeclaration                   : 
      Protected                                : protected;

      ProgramElementName                       : Enum

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : 
      Public                                   : public;

      Final                                    : final;

      TypeRef                                  : java.lang.Class;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Class


      ProgramElementName                       : getDeclaringClass


    MethodDeclaration                        : public   static java.lang.Enum valueOf (     java.lang.Class arg0,     java.lang.String arg1   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.Enum;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Enum


      ProgramElementName                       : valueOf

      ParameterDeclaration                     : java.lang.Class arg0;
        TypeRef                                  : java.lang.Class;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Class


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.String arg1;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Enum;
        ProgramElementName                       : Enum


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Enum <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Enum;
        ProgramElementName                       : Enum


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Enum <createObject> (){     Enum __NEW__;     __NEW__ = Enum.<allocate>();     __NEW__.<create>()@java.lang.Enum;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Enum;
        ProgramElementName                       : Enum


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Enum __NEW__;   __NEW__ = Enum.<allocate>();   __NEW__.<create>()@java.lang.Enum;   return __NEW__; }
        LocalVariableDeclaration                 : Enum __NEW__;
          TypeRef                                  : Enum;
            ProgramElementName                       : Enum


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Enum.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Enum.<allocate>();
            TypeRef                                  : Enum;
              ProgramElementName                       : Enum


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Enum;
          TypeRef                                  : java.lang.Enum;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Enum


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Error.java ======================================================
CompilationUnit                          :  package java.lang;  public class Error extends java.lang.Throwable {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     static       private boolean java.lang.Error::<classPrepared>     static       private boolean java.lang.Error::<classInitialized>     static       private boolean java.lang.Error::<classErroneous>     static       private boolean java.lang.Error::<classInitializationInProgress>     Error     Error     Error     Error     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class Error extends java.lang.Throwable {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     static       private boolean java.lang.Error::<classPrepared>     static       private boolean java.lang.Error::<classInitialized>     static       private boolean java.lang.Error::<classErroneous>     static       private boolean java.lang.Error::<classInitializationInProgress>     Error     Error     Error     Error     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : Error

    Extends                                  : extends java.lang.Throwable;
      TypeRef                                  : java.lang.Throwable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Throwable



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Throwable.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Throwable.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Throwable.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Error::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Throwable.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Throwable.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Throwable.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Error::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Throwable.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Throwable.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Error::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Error::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Error::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Throwable.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Throwable.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Throwable.<clinit>());
                          MethodReference                          : java.lang.Throwable.<clinit>();
                            TypeRef                                  : java.lang.Throwable;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Throwable


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Error::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Error::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Error::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Error::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Error::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Error::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Error::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Error::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Error::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Error::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Error::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Error::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.Throwable arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (     java.lang.String arg0,     java.lang.Throwable arg1   ){     super.<init>(arg0, arg1);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Throwable arg1;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      StatementBlock                           : {   super.<init>(arg0, arg1); }
        MethodReference                          : super.<init>(arg0, arg1);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0

          LocationVariable                         : arg1




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static private boolean java.lang.Error::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Error::<classPrepared>;
        LocationVariable                         : java.lang.Error::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Error::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Error::<classInitialized>;
        LocationVariable                         : java.lang.Error::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.Error::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Error::<classErroneous>;
        LocationVariable                         : java.lang.Error::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Error::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Error::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Error::<classInitializationInProgress>



    ConstructorDeclaration                   : public Error (){     super();   }
      Public                                   : public;

      ProgramElementName                       : Error

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public Error (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : Error

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    ConstructorDeclaration                   : public Error (     java.lang.String arg0,     java.lang.Throwable arg1   ){     super(arg0, arg1);   }
      Public                                   : public;

      ProgramElementName                       : Error

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Throwable arg1;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      StatementBlock                           : {   super(arg0, arg1); }
        SuperConstructorReference                : super(arg0, arg1);
          LocationVariable                         : arg0

          LocationVariable                         : arg1




    ConstructorDeclaration                   : public Error (java.lang.Throwable arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : Error

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Error;
        ProgramElementName                       : Error


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Error <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Error;
        ProgramElementName                       : Error


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Error <createObject> (){     Error __NEW__;     __NEW__ = Error.<allocate>();     __NEW__.<create>()@java.lang.Error;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Error;
        ProgramElementName                       : Error


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Error __NEW__;   __NEW__ = Error.<allocate>();   __NEW__.<create>()@java.lang.Error;   return __NEW__; }
        LocalVariableDeclaration                 : Error __NEW__;
          TypeRef                                  : Error;
            ProgramElementName                       : Error


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Error.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Error.<allocate>();
            TypeRef                                  : Error;
              ProgramElementName                       : Error


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Error;
          TypeRef                                  : java.lang.Error;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Error


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Exception.java ======================================================
CompilationUnit                          :  package java.lang;  public class Exception extends java.lang.Throwable {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     static       private boolean java.lang.Exception::<classPrepared>     static       private boolean java.lang.Exception::<classInitialized>     static       private boolean java.lang.Exception::<classErroneous>     static       private boolean java.lang.Exception::<classInitializationInProgress>     Exception     Exception     Exception     Exception     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class Exception extends java.lang.Throwable {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     static       private boolean java.lang.Exception::<classPrepared>     static       private boolean java.lang.Exception::<classInitialized>     static       private boolean java.lang.Exception::<classErroneous>     static       private boolean java.lang.Exception::<classInitializationInProgress>     Exception     Exception     Exception     Exception     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : Exception

    Extends                                  : extends java.lang.Throwable;
      TypeRef                                  : java.lang.Throwable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Throwable



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Throwable.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Throwable.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Throwable.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Exception::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Throwable.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Throwable.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Throwable.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Exception::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Throwable.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Throwable.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Exception::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Exception::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Exception::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Throwable.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Throwable.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Throwable.<clinit>());
                          MethodReference                          : java.lang.Throwable.<clinit>();
                            TypeRef                                  : java.lang.Throwable;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Throwable


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Exception::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Exception::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Exception::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Exception::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Exception::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Exception::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Exception::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Exception::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Exception::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Exception::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Exception::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Exception::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.Throwable arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (     java.lang.String arg0,     java.lang.Throwable arg1   ){     super.<init>(arg0, arg1);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Throwable arg1;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      StatementBlock                           : {   super.<init>(arg0, arg1); }
        MethodReference                          : super.<init>(arg0, arg1);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0

          LocationVariable                         : arg1




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.Exception::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Exception::<classPrepared>;
        LocationVariable                         : java.lang.Exception::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Exception::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Exception::<classInitialized>;
        LocationVariable                         : java.lang.Exception::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.Exception::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Exception::<classErroneous>;
        LocationVariable                         : java.lang.Exception::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Exception::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Exception::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Exception::<classInitializationInProgress>



    ConstructorDeclaration                   : public Exception (){     super();   }
      Public                                   : public;

      ProgramElementName                       : Exception

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public Exception (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : Exception

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    ConstructorDeclaration                   : public Exception (     java.lang.String arg0,     java.lang.Throwable arg1   ){     super(arg0, arg1);   }
      Public                                   : public;

      ProgramElementName                       : Exception

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Throwable arg1;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      StatementBlock                           : {   super(arg0, arg1); }
        SuperConstructorReference                : super(arg0, arg1);
          LocationVariable                         : arg0

          LocationVariable                         : arg1




    ConstructorDeclaration                   : public Exception (java.lang.Throwable arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : Exception

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Exception;
        ProgramElementName                       : Exception


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Exception <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Exception;
        ProgramElementName                       : Exception


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Exception <createObject> (){     Exception __NEW__;     __NEW__ = Exception.<allocate>();     __NEW__.<create>()@java.lang.Exception;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Exception;
        ProgramElementName                       : Exception


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Exception __NEW__;   __NEW__ = Exception.<allocate>();   __NEW__.<create>()@java.lang.Exception;   return __NEW__; }
        LocalVariableDeclaration                 : Exception __NEW__;
          TypeRef                                  : Exception;
            ProgramElementName                       : Exception


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Exception.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Exception.<allocate>();
            TypeRef                                  : Exception;
              ProgramElementName                       : Exception


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Exception;
          TypeRef                                  : java.lang.Exception;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Exception


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/ExceptionInInitializerError.java ======================================================
CompilationUnit                          :  package java.lang;  public class ExceptionInInitializerError extends java.lang.LinkageError {     <clinit>     <clprepare>     <init>     <init>     <init>     static       private boolean java.lang.ExceptionInInitializerError::<classPrepared>     static       private boolean java.lang.ExceptionInInitializerError::<classInitialized>     static       private boolean java.lang.ExceptionInInitializerError::<classErroneous>     static       private boolean java.lang.ExceptionInInitializerError::<classInitializationInProgress>     ExceptionInInitializerError     ExceptionInInitializerError     ExceptionInInitializerError     getException     getCause     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class ExceptionInInitializerError extends java.lang.LinkageError {     <clinit>     <clprepare>     <init>     <init>     <init>     static       private boolean java.lang.ExceptionInInitializerError::<classPrepared>     static       private boolean java.lang.ExceptionInInitializerError::<classInitialized>     static       private boolean java.lang.ExceptionInInitializerError::<classErroneous>     static       private boolean java.lang.ExceptionInInitializerError::<classInitializationInProgress>     ExceptionInInitializerError     ExceptionInInitializerError     ExceptionInInitializerError     getException     getCause     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : ExceptionInInitializerError

    Extends                                  : extends java.lang.LinkageError;
      TypeRef                                  : java.lang.LinkageError;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : LinkageError



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.LinkageError.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.LinkageError.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.LinkageError.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.ExceptionInInitializerError::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.LinkageError.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.LinkageError.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.LinkageError.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.ExceptionInInitializerError::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.LinkageError.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.LinkageError.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.ExceptionInInitializerError::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.ExceptionInInitializerError::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.ExceptionInInitializerError::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.LinkageError.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.LinkageError.<clinit>()); }
                        PassiveExpression                        : @(java.lang.LinkageError.<clinit>());
                          MethodReference                          : java.lang.LinkageError.<clinit>();
                            TypeRef                                  : java.lang.LinkageError;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : LinkageError


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.ExceptionInInitializerError::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.ExceptionInInitializerError::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.ExceptionInInitializerError::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.ExceptionInInitializerError::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.ExceptionInInitializerError::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.ExceptionInInitializerError::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.ExceptionInInitializerError::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.ExceptionInInitializerError::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.ExceptionInInitializerError::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.ExceptionInInitializerError::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.ExceptionInInitializerError::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.ExceptionInInitializerError::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (java.lang.Throwable arg0){     super.<init>();     initCause(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>();   initCause(arg0); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>


        MethodReference                          : initCause(arg0);
          ProgramElementName                       : initCause

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.ExceptionInInitializerError::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ExceptionInInitializerError::<classPrepared>;
        LocationVariable                         : java.lang.ExceptionInInitializerError::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.ExceptionInInitializerError::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ExceptionInInitializerError::<classInitialized>;
        LocationVariable                         : java.lang.ExceptionInInitializerError::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.ExceptionInInitializerError::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ExceptionInInitializerError::<classErroneous>;
        LocationVariable                         : java.lang.ExceptionInInitializerError::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.ExceptionInInitializerError::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.ExceptionInInitializerError::<classInitializationInProgress>;
        LocationVariable                         : java.lang.ExceptionInInitializerError::<classInitializationInProgress>



    ConstructorDeclaration                   : public ExceptionInInitializerError (){     super();   }
      Public                                   : public;

      ProgramElementName                       : ExceptionInInitializerError

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public ExceptionInInitializerError (     java.lang.Throwable arg0   ){     super();     initCause(arg0);   }
      Public                                   : public;

      ProgramElementName                       : ExceptionInInitializerError

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super();   initCause(arg0); }
        SuperConstructorReference                : super();

        MethodReference                          : initCause(arg0);
          ProgramElementName                       : initCause

          LocationVariable                         : arg0




    ConstructorDeclaration                   : public ExceptionInInitializerError (     java.lang.String arg0   ){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : ExceptionInInitializerError

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.Throwable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Throwable


      ProgramElementName                       : getException


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.Throwable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Throwable


      ProgramElementName                       : getCause


    MethodDeclaration                        : public   static ExceptionInInitializerError <allocate> ();
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ExceptionInInitializerError;
        ProgramElementName                       : ExceptionInInitializerError


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public ExceptionInInitializerError <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : ExceptionInInitializerError;
        ProgramElementName                       : ExceptionInInitializerError


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static ExceptionInInitializerError <createObject> (){     ExceptionInInitializerError __NEW__;     __NEW__ = ExceptionInInitializerError.<allocate>();     __NEW__.<create>()@java.lang.ExceptionInInitializerError;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ExceptionInInitializerError;
        ProgramElementName                       : ExceptionInInitializerError


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   ExceptionInInitializerError __NEW__;   __NEW__ = ExceptionInInitializerError.<allocate>();   __NEW__.<create>()@java.lang.ExceptionInInitializerError;   return __NEW__; }
        LocalVariableDeclaration                 : ExceptionInInitializerError __NEW__;
          TypeRef                                  : ExceptionInInitializerError;
            ProgramElementName                       : ExceptionInInitializerError


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = ExceptionInInitializerError.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : ExceptionInInitializerError.<allocate>();
            TypeRef                                  : ExceptionInInitializerError;
              ProgramElementName                       : ExceptionInInitializerError


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.ExceptionInInitializerError;
          TypeRef                                  : java.lang.ExceptionInInitializerError;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : ExceptionInInitializerError


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Float.java ======================================================
CompilationUnit                          :  package java.lang;  public class Float {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Float::<classPrepared>     static       private boolean java.lang.Float::<classInitialized>     static       private boolean java.lang.Float::<classErroneous>     static       private boolean java.lang.Float::<classInitializationInProgress>     _isSame     _isNaN     isNaN     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class Float {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Float::<classPrepared>     static       private boolean java.lang.Float::<classInitialized>     static       private boolean java.lang.Float::<classErroneous>     static       private boolean java.lang.Float::<classInitializationInProgress>     _isSame     _isNaN     isNaN     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : Float

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Float::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Float::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Float::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Float::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Float::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Float::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Float::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Float::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Float::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Float::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Float::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Float::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Float::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Float::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Float::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Float::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Float::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static private boolean java.lang.Float::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Float::<classPrepared>;
        LocationVariable                         : java.lang.Float::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Float::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Float::<classInitialized>;
        LocationVariable                         : java.lang.Float::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.Float::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Float::<classErroneous>;
        LocationVariable                         : java.lang.Float::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Float::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Float::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Float::<classInitializationInProgress>



    MethodDeclaration                        : 
      Static                                   : static;

      Model                                    : model;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : _isSame

      ParameterDeclaration                     : float a;
        TypeRef                                  : float;
          ProgramElementName                       : float


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : float b;
        TypeRef                                  : float;
          ProgramElementName                       : float


        VariableSpecification                    : b;
          LocationVariable                         : b




    MethodDeclaration                        : 
      Static                                   : static;

      Model                                    : model;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : _isNaN

      ParameterDeclaration                     : float val;
        TypeRef                                  : float;
          ProgramElementName                       : float


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : public   static boolean isNaN (float val){     return val != val;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : isNaN

      ParameterDeclaration                     : float val;
        TypeRef                                  : float;
          ProgramElementName                       : float


        VariableSpecification                    : val;
          LocationVariable                         : val



      StatementBlock                           : {   return val != val; }
        Return                                   : return val != val;
          NotEquals                                : val != val;
            LocationVariable                         : val

            LocationVariable                         : val





    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Float;
        ProgramElementName                       : Float


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Float <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Float;
        ProgramElementName                       : Float


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Float <createObject> (){     Float __NEW__;     __NEW__ = Float.<allocate>();     __NEW__.<create>()@java.lang.Float;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Float;
        ProgramElementName                       : Float


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Float __NEW__;   __NEW__ = Float.<allocate>();   __NEW__.<create>()@java.lang.Float;   return __NEW__; }
        LocalVariableDeclaration                 : Float __NEW__;
          TypeRef                                  : Float;
            ProgramElementName                       : Float


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Float.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Float.<allocate>();
            TypeRef                                  : Float;
              ProgramElementName                       : Float


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Float;
          TypeRef                                  : java.lang.Float;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Float


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/IllegalArgumentException.java ======================================================
CompilationUnit                          :  package java.lang;  public class IllegalArgumentException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.IllegalArgumentException::<classPrepared>     static       private boolean java.lang.IllegalArgumentException::<classInitialized>     static       private boolean java.lang.IllegalArgumentException::<classErroneous>     static       private boolean java.lang.IllegalArgumentException::<classInitializationInProgress>     IllegalArgumentException     IllegalArgumentException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class IllegalArgumentException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.IllegalArgumentException::<classPrepared>     static       private boolean java.lang.IllegalArgumentException::<classInitialized>     static       private boolean java.lang.IllegalArgumentException::<classErroneous>     static       private boolean java.lang.IllegalArgumentException::<classInitializationInProgress>     IllegalArgumentException     IllegalArgumentException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : IllegalArgumentException

    Extends                                  : extends java.lang.RuntimeException;
      TypeRef                                  : java.lang.RuntimeException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : RuntimeException



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.RuntimeException.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.RuntimeException.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.IllegalArgumentException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.IllegalArgumentException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.IllegalArgumentException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.IllegalArgumentException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.IllegalArgumentException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.RuntimeException.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.RuntimeException.<clinit>()); }
                        PassiveExpression                        : @(java.lang.RuntimeException.<clinit>());
                          MethodReference                          : java.lang.RuntimeException.<clinit>();
                            TypeRef                                  : java.lang.RuntimeException;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : RuntimeException


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.IllegalArgumentException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.IllegalArgumentException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.IllegalArgumentException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.IllegalArgumentException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.IllegalArgumentException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.IllegalArgumentException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.IllegalArgumentException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.IllegalArgumentException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.IllegalArgumentException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.IllegalArgumentException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.IllegalArgumentException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.IllegalArgumentException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.IllegalArgumentException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.IllegalArgumentException::<classPrepared>;
        LocationVariable                         : java.lang.IllegalArgumentException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.IllegalArgumentException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.IllegalArgumentException::<classInitialized>;
        LocationVariable                         : java.lang.IllegalArgumentException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.IllegalArgumentException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.IllegalArgumentException::<classErroneous>;
        LocationVariable                         : java.lang.IllegalArgumentException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.IllegalArgumentException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.IllegalArgumentException::<classInitializationInProgress>;
        LocationVariable                         : java.lang.IllegalArgumentException::<classInitializationInProgress>



    ConstructorDeclaration                   : public IllegalArgumentException (){     super();   }
      Public                                   : public;

      ProgramElementName                       : IllegalArgumentException

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public IllegalArgumentException (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : IllegalArgumentException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : IllegalArgumentException;
        ProgramElementName                       : IllegalArgumentException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public IllegalArgumentException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : IllegalArgumentException;
        ProgramElementName                       : IllegalArgumentException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static IllegalArgumentException <createObject> (){     IllegalArgumentException __NEW__;     __NEW__ = IllegalArgumentException.<allocate>();     __NEW__.<create>()@java.lang.IllegalArgumentException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : IllegalArgumentException;
        ProgramElementName                       : IllegalArgumentException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   IllegalArgumentException __NEW__;   __NEW__ = IllegalArgumentException.<allocate>();   __NEW__.<create>()@java.lang.IllegalArgumentException;   return __NEW__; }
        LocalVariableDeclaration                 : IllegalArgumentException __NEW__;
          TypeRef                                  : IllegalArgumentException;
            ProgramElementName                       : IllegalArgumentException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = IllegalArgumentException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : IllegalArgumentException.<allocate>();
            TypeRef                                  : IllegalArgumentException;
              ProgramElementName                       : IllegalArgumentException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.IllegalArgumentException;
          TypeRef                                  : java.lang.IllegalArgumentException;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : IllegalArgumentException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/IndexOutOfBoundsException.java ======================================================
CompilationUnit                          :  package java.lang;  public class IndexOutOfBoundsException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.IndexOutOfBoundsException::<classPrepared>     static       private boolean java.lang.IndexOutOfBoundsException::<classInitialized>     static       private boolean java.lang.IndexOutOfBoundsException::<classErroneous>     static       private boolean java.lang.IndexOutOfBoundsException::<classInitializationInProgress>     IndexOutOfBoundsException     IndexOutOfBoundsException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class IndexOutOfBoundsException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.IndexOutOfBoundsException::<classPrepared>     static       private boolean java.lang.IndexOutOfBoundsException::<classInitialized>     static       private boolean java.lang.IndexOutOfBoundsException::<classErroneous>     static       private boolean java.lang.IndexOutOfBoundsException::<classInitializationInProgress>     IndexOutOfBoundsException     IndexOutOfBoundsException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : IndexOutOfBoundsException

    Extends                                  : extends java.lang.RuntimeException;
      TypeRef                                  : java.lang.RuntimeException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : RuntimeException



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.RuntimeException.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.RuntimeException.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.IndexOutOfBoundsException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.IndexOutOfBoundsException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.IndexOutOfBoundsException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.IndexOutOfBoundsException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.IndexOutOfBoundsException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.RuntimeException.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.RuntimeException.<clinit>()); }
                        PassiveExpression                        : @(java.lang.RuntimeException.<clinit>());
                          MethodReference                          : java.lang.RuntimeException.<clinit>();
                            TypeRef                                  : java.lang.RuntimeException;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : RuntimeException


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.IndexOutOfBoundsException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.IndexOutOfBoundsException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.IndexOutOfBoundsException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.IndexOutOfBoundsException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.IndexOutOfBoundsException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.IndexOutOfBoundsException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.IndexOutOfBoundsException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.IndexOutOfBoundsException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.IndexOutOfBoundsException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.IndexOutOfBoundsException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.IndexOutOfBoundsException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.IndexOutOfBoundsException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.IndexOutOfBoundsException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.IndexOutOfBoundsException::<classPrepared>;
        LocationVariable                         : java.lang.IndexOutOfBoundsException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.IndexOutOfBoundsException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.IndexOutOfBoundsException::<classInitialized>;
        LocationVariable                         : java.lang.IndexOutOfBoundsException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.IndexOutOfBoundsException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.IndexOutOfBoundsException::<classErroneous>;
        LocationVariable                         : java.lang.IndexOutOfBoundsException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.IndexOutOfBoundsException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.IndexOutOfBoundsException::<classInitializationInProgress>;
        LocationVariable                         : java.lang.IndexOutOfBoundsException::<classInitializationInProgress>



    ConstructorDeclaration                   : public IndexOutOfBoundsException (){     super();   }
      Public                                   : public;

      ProgramElementName                       : IndexOutOfBoundsException

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public IndexOutOfBoundsException (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : IndexOutOfBoundsException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : IndexOutOfBoundsException;
        ProgramElementName                       : IndexOutOfBoundsException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public IndexOutOfBoundsException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : IndexOutOfBoundsException;
        ProgramElementName                       : IndexOutOfBoundsException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static IndexOutOfBoundsException <createObject> (){     IndexOutOfBoundsException __NEW__;     __NEW__ = IndexOutOfBoundsException.<allocate>();     __NEW__.<create>()@java.lang.IndexOutOfBoundsException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : IndexOutOfBoundsException;
        ProgramElementName                       : IndexOutOfBoundsException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   IndexOutOfBoundsException __NEW__;   __NEW__ = IndexOutOfBoundsException.<allocate>();   __NEW__.<create>()@java.lang.IndexOutOfBoundsException;   return __NEW__; }
        LocalVariableDeclaration                 : IndexOutOfBoundsException __NEW__;
          TypeRef                                  : IndexOutOfBoundsException;
            ProgramElementName                       : IndexOutOfBoundsException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = IndexOutOfBoundsException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : IndexOutOfBoundsException.<allocate>();
            TypeRef                                  : IndexOutOfBoundsException;
              ProgramElementName                       : IndexOutOfBoundsException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.IndexOutOfBoundsException;
          TypeRef                                  : java.lang.IndexOutOfBoundsException;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : IndexOutOfBoundsException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Integer.java ======================================================
CompilationUnit                          :  package java.lang;  public   final class Integer implements java.lang.Comparable {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.Integer::<classPrepared>     static       private boolean java.lang.Integer::<classInitialized>     static       private boolean java.lang.Integer::<classErroneous>     static       private boolean java.lang.Integer::<classInitializationInProgress>     public final       static int java.lang.Integer::MIN_VALUE = -2147483648     public final       static int java.lang.Integer::MAX_VALUE = 2147483647     public final       static java.lang.Class java.lang.Integer::TYPE     public final       static int java.lang.Integer::SIZE = 32     toString     toHexString     toOctalString     toBinaryString     toString     parseInt     parseInt     valueOf     valueOf     valueOf     Integer     Integer     byteValue     shortValue     intValue     longValue     getInteger     getInteger     getInteger     decode     compareTo     highestOneBit     lowestOneBit     numberOfLeadingZeros     numberOfTrailingZeros     bitCount     rotateLeft     rotateRight     reverse     signum     reverseBytes     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public   final class Integer implements java.lang.Comparable {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.Integer::<classPrepared>     static       private boolean java.lang.Integer::<classInitialized>     static       private boolean java.lang.Integer::<classErroneous>     static       private boolean java.lang.Integer::<classInitializationInProgress>     public final       static int java.lang.Integer::MIN_VALUE = -2147483648     public final       static int java.lang.Integer::MAX_VALUE = 2147483647     public final       static java.lang.Class java.lang.Integer::TYPE     public final       static int java.lang.Integer::SIZE = 32     toString     toHexString     toOctalString     toBinaryString     toString     parseInt     parseInt     valueOf     valueOf     valueOf     Integer     Integer     byteValue     shortValue     intValue     longValue     getInteger     getInteger     getInteger     decode     compareTo     highestOneBit     lowestOneBit     numberOfLeadingZeros     numberOfTrailingZeros     bitCount     rotateLeft     rotateRight     reverse     signum     reverseBytes     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : Integer

    Implements                               : implements java.lang.Comparable;
      TypeRef                                  : java.lang.Comparable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Comparable



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Integer::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Integer::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Integer::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Integer::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Integer::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Integer::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Integer::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Integer::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Integer::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Integer::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Integer::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Integer::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(TYPE) = null;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(TYPE) = null;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Integer::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Integer::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(TYPE) = null;
          PassiveExpression                        : @(TYPE);
            FieldReference                           : TYPE;
              LocationVariable                         : java.lang.Integer::TYPE



          NullLiteral                              : null;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Integer::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Integer::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Integer::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      Throws                                   : throws ;


    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    FieldDeclaration                         : static   private boolean java.lang.Integer::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Integer::<classPrepared>;
        LocationVariable                         : java.lang.Integer::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Integer::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Integer::<classInitialized>;
        LocationVariable                         : java.lang.Integer::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.Integer::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Integer::<classErroneous>;
        LocationVariable                         : java.lang.Integer::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Integer::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Integer::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Integer::<classInitializationInProgress>



    FieldDeclaration                         : public final   static int java.lang.Integer::MIN_VALUE = -2147483648;
      Public                                   : public;

      Final                                    : final;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      FieldSpecification                       : java.lang.Integer::MIN_VALUE = -2147483648;
        ProgramConstant                          : java.lang.Integer::MIN_VALUE

        IntLiteral                               : -2147483648



    FieldDeclaration                         : public final   static int java.lang.Integer::MAX_VALUE = 2147483647;
      Public                                   : public;

      Final                                    : final;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      FieldSpecification                       : java.lang.Integer::MAX_VALUE = 2147483647;
        ProgramConstant                          : java.lang.Integer::MAX_VALUE

        IntLiteral                               : 2147483647



    FieldDeclaration                         : public final   static java.lang.Class java.lang.Integer::TYPE;
      Public                                   : public;

      Final                                    : final;

      Static                                   : static;

      TypeRef                                  : java.lang.Class;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Class


      FieldSpecification                       : java.lang.Integer::TYPE;
        LocationVariable                         : java.lang.Integer::TYPE



    FieldDeclaration                         : public final static int java.lang.Integer::SIZE = 32;
      Public                                   : public;

      Final                                    : final;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      FieldSpecification                       : java.lang.Integer::SIZE = 32;
        ProgramConstant                          : java.lang.Integer::SIZE

        IntLiteral                               : 32



    MethodDeclaration                        : public   static java.lang.String toString (int arg0, int arg1);
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : toString

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : toHexString

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : public   static java.lang.String toOctalString (int arg0);
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : toOctalString

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : public   static java.lang.String toBinaryString (int arg0);
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : toBinaryString

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : toString

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : public   static int parseInt (java.lang.String arg0, int arg1)throws java.lang.NumberFormatException;
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : parseInt

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      Throws                                   : throws java.lang.NumberFormatException;
        TypeRef                                  : java.lang.NumberFormatException;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : NumberFormatException




    MethodDeclaration                        : public   static int parseInt (java.lang.String arg0)throws java.lang.NumberFormatException;
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : parseInt

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      Throws                                   : throws java.lang.NumberFormatException;
        TypeRef                                  : java.lang.NumberFormatException;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : NumberFormatException




    MethodDeclaration                        : public   static java.lang.Integer valueOf (     java.lang.String arg0,     int arg1   )throws java.lang.NumberFormatException;
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.Integer;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Integer


      ProgramElementName                       : valueOf

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      Throws                                   : throws java.lang.NumberFormatException;
        TypeRef                                  : java.lang.NumberFormatException;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : NumberFormatException




    MethodDeclaration                        : public   static java.lang.Integer valueOf (     java.lang.String arg0   )throws java.lang.NumberFormatException;
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.Integer;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Integer


      ProgramElementName                       : valueOf

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      Throws                                   : throws java.lang.NumberFormatException;
        TypeRef                                  : java.lang.NumberFormatException;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : NumberFormatException




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.Integer;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Integer


      ProgramElementName                       : valueOf

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : Integer

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : Integer

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      Throws                                   : throws ;


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : byte;
        ProgramElementName                       : byte


      ProgramElementName                       : byteValue


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : short;
        ProgramElementName                       : short


      ProgramElementName                       : shortValue


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : intValue


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : long;
        ProgramElementName                       : long


      ProgramElementName                       : longValue


    MethodDeclaration                        : public   static java.lang.Integer getInteger (     java.lang.String arg0   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.Integer;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Integer


      ProgramElementName                       : getInteger

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : public   static java.lang.Integer getInteger (     java.lang.String arg0,     int arg1   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.Integer;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Integer


      ProgramElementName                       : getInteger

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : public   static java.lang.Integer getInteger (     java.lang.String arg0,     java.lang.Integer arg1   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.Integer;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Integer


      ProgramElementName                       : getInteger

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Integer arg1;
        TypeRef                                  : java.lang.Integer;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Integer


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : public   static java.lang.Integer decode (     java.lang.String arg0   )throws java.lang.NumberFormatException;
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.Integer;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Integer


      ProgramElementName                       : decode

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      Throws                                   : throws java.lang.NumberFormatException;
        TypeRef                                  : java.lang.NumberFormatException;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : NumberFormatException




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : compareTo

      ParameterDeclaration                     : java.lang.Integer arg0;
        TypeRef                                  : java.lang.Integer;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Integer


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : highestOneBit

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : lowestOneBit

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : numberOfLeadingZeros

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : numberOfTrailingZeros

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : bitCount

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : rotateLeft

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : rotateRight

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : reverse

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : signum

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : reverseBytes

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Integer;
        ProgramElementName                       : Integer


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Integer <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Integer;
        ProgramElementName                       : Integer


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Integer <createObject> (){     Integer __NEW__;     __NEW__ = Integer.<allocate>();     __NEW__.<create>()@java.lang.Integer;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Integer;
        ProgramElementName                       : Integer


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Integer __NEW__;   __NEW__ = Integer.<allocate>();   __NEW__.<create>()@java.lang.Integer;   return __NEW__; }
        LocalVariableDeclaration                 : Integer __NEW__;
          TypeRef                                  : Integer;
            ProgramElementName                       : Integer


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Integer.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Integer.<allocate>();
            TypeRef                                  : Integer;
              ProgramElementName                       : Integer


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Integer;
          TypeRef                                  : java.lang.Integer;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Integer


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/InterruptedException.java ======================================================
CompilationUnit                          :  package java.lang;  public class InterruptedException extends java.lang.Exception {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.InterruptedException::<classPrepared>     static       private boolean java.lang.InterruptedException::<classInitialized>     static       private boolean java.lang.InterruptedException::<classErroneous>     static       private boolean java.lang.InterruptedException::<classInitializationInProgress>     InterruptedException     InterruptedException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class InterruptedException extends java.lang.Exception {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.InterruptedException::<classPrepared>     static       private boolean java.lang.InterruptedException::<classInitialized>     static       private boolean java.lang.InterruptedException::<classErroneous>     static       private boolean java.lang.InterruptedException::<classInitializationInProgress>     InterruptedException     InterruptedException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : InterruptedException

    Extends                                  : extends java.lang.Exception;
      TypeRef                                  : java.lang.Exception;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Exception



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Exception.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Exception.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Exception.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.InterruptedException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Exception.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Exception.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Exception.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.InterruptedException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Exception.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Exception.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.InterruptedException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.InterruptedException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.InterruptedException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Exception.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Exception.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Exception.<clinit>());
                          MethodReference                          : java.lang.Exception.<clinit>();
                            TypeRef                                  : java.lang.Exception;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Exception


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.InterruptedException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.InterruptedException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.InterruptedException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.InterruptedException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.InterruptedException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.InterruptedException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.InterruptedException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.InterruptedException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.InterruptedException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.InterruptedException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.InterruptedException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.InterruptedException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.InterruptedException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.InterruptedException::<classPrepared>;
        LocationVariable                         : java.lang.InterruptedException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.InterruptedException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.InterruptedException::<classInitialized>;
        LocationVariable                         : java.lang.InterruptedException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.InterruptedException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.InterruptedException::<classErroneous>;
        LocationVariable                         : java.lang.InterruptedException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.InterruptedException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.InterruptedException::<classInitializationInProgress>;
        LocationVariable                         : java.lang.InterruptedException::<classInitializationInProgress>



    ConstructorDeclaration                   : public InterruptedException (){     super();   }
      Public                                   : public;

      ProgramElementName                       : InterruptedException

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public InterruptedException (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : InterruptedException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : InterruptedException;
        ProgramElementName                       : InterruptedException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public InterruptedException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : InterruptedException;
        ProgramElementName                       : InterruptedException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static InterruptedException <createObject> (){     InterruptedException __NEW__;     __NEW__ = InterruptedException.<allocate>();     __NEW__.<create>()@java.lang.InterruptedException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : InterruptedException;
        ProgramElementName                       : InterruptedException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   InterruptedException __NEW__;   __NEW__ = InterruptedException.<allocate>();   __NEW__.<create>()@java.lang.InterruptedException;   return __NEW__; }
        LocalVariableDeclaration                 : InterruptedException __NEW__;
          TypeRef                                  : InterruptedException;
            ProgramElementName                       : InterruptedException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = InterruptedException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : InterruptedException.<allocate>();
            TypeRef                                  : InterruptedException;
              ProgramElementName                       : InterruptedException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.InterruptedException;
          TypeRef                                  : java.lang.InterruptedException;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : InterruptedException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Iterable.java ======================================================
CompilationUnit                          :  package java.lang;  public interface Iterable {     iterator   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  InterfaceDeclaration                     : public interface Iterable {     iterator   };
    Public                                   : public;

    ProgramElementName                       : Iterable

    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.util.Iterator;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : Iterator


      ProgramElementName                       : iterator





=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/LinkageError.java ======================================================
CompilationUnit                          :  package java.lang;  public class LinkageError extends java.lang.Error {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.LinkageError::<classPrepared>     static       private boolean java.lang.LinkageError::<classInitialized>     static       private boolean java.lang.LinkageError::<classErroneous>     static       private boolean java.lang.LinkageError::<classInitializationInProgress>     LinkageError     LinkageError     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class LinkageError extends java.lang.Error {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.LinkageError::<classPrepared>     static       private boolean java.lang.LinkageError::<classInitialized>     static       private boolean java.lang.LinkageError::<classErroneous>     static       private boolean java.lang.LinkageError::<classInitializationInProgress>     LinkageError     LinkageError     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : LinkageError

    Extends                                  : extends java.lang.Error;
      TypeRef                                  : java.lang.Error;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Error



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Error.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Error.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Error.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.LinkageError::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Error.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Error.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Error.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.LinkageError::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Error.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Error.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.LinkageError::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.LinkageError::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.LinkageError::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Error.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Error.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Error.<clinit>());
                          MethodReference                          : java.lang.Error.<clinit>();
                            TypeRef                                  : java.lang.Error;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Error


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.LinkageError::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.LinkageError::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.LinkageError::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.LinkageError::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.LinkageError::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.LinkageError::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.LinkageError::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.LinkageError::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.LinkageError::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.LinkageError::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.LinkageError::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.LinkageError::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.LinkageError::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.LinkageError::<classPrepared>;
        LocationVariable                         : java.lang.LinkageError::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.LinkageError::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.LinkageError::<classInitialized>;
        LocationVariable                         : java.lang.LinkageError::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.LinkageError::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.LinkageError::<classErroneous>;
        LocationVariable                         : java.lang.LinkageError::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.LinkageError::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.LinkageError::<classInitializationInProgress>;
        LocationVariable                         : java.lang.LinkageError::<classInitializationInProgress>



    ConstructorDeclaration                   : public LinkageError (){     super();   }
      Public                                   : public;

      ProgramElementName                       : LinkageError

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public LinkageError (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : LinkageError

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : LinkageError;
        ProgramElementName                       : LinkageError


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public LinkageError <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : LinkageError;
        ProgramElementName                       : LinkageError


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static LinkageError <createObject> (){     LinkageError __NEW__;     __NEW__ = LinkageError.<allocate>();     __NEW__.<create>()@java.lang.LinkageError;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : LinkageError;
        ProgramElementName                       : LinkageError


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   LinkageError __NEW__;   __NEW__ = LinkageError.<allocate>();   __NEW__.<create>()@java.lang.LinkageError;   return __NEW__; }
        LocalVariableDeclaration                 : LinkageError __NEW__;
          TypeRef                                  : LinkageError;
            ProgramElementName                       : LinkageError


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = LinkageError.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : LinkageError.<allocate>();
            TypeRef                                  : LinkageError;
              ProgramElementName                       : LinkageError


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.LinkageError;
          TypeRef                                  : java.lang.LinkageError;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : LinkageError


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Math.java ======================================================
CompilationUnit                          :  package java.lang;  public   final class Math {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Math::<classPrepared>     static       private boolean java.lang.Math::<classInitialized>     static       private boolean java.lang.Math::<classErroneous>     static       private boolean java.lang.Math::<classInitializationInProgress>     Math     floorMod     public static       final double java.lang.Math::PI = 3.14159265358979323846     public static       final double java.lang.Math::E = 2.7182818284590452354     toRadians     toDegrees     abs     abs     abs     abs     min     min     min     min     max     max     max     max     sin     asin     cos     acos     tan     atan2     sqrt     pow     exp     atan     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public   final class Math {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Math::<classPrepared>     static       private boolean java.lang.Math::<classInitialized>     static       private boolean java.lang.Math::<classErroneous>     static       private boolean java.lang.Math::<classInitializationInProgress>     Math     floorMod     public static       final double java.lang.Math::PI = 3.14159265358979323846     public static       final double java.lang.Math::E = 2.7182818284590452354     toRadians     toDegrees     abs     abs     abs     abs     min     min     min     min     max     max     max     max     sin     asin     cos     acos     tan     atan2     sqrt     pow     exp     atan     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : Math

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Math::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Math::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Math::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Math::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Math::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Math::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Math::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Math::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Math::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Math::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Math::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Math::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Math::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Math::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Math::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Math::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Math::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : private void <init> (){     super.<init>();   }
      Private                                  : private;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static private boolean java.lang.Math::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Math::<classPrepared>;
        LocationVariable                         : java.lang.Math::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Math::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Math::<classInitialized>;
        LocationVariable                         : java.lang.Math::<classInitialized>



    FieldDeclaration                         : static private boolean java.lang.Math::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Math::<classErroneous>;
        LocationVariable                         : java.lang.Math::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Math::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Math::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Math::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Private                                  : private;

      ProgramElementName                       : Math

      StatementBlock                           : {}


    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : floorMod

      ParameterDeclaration                     : int x;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : x;
          LocationVariable                         : x



      ParameterDeclaration                     : int y;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : y;
          LocationVariable                         : y




    FieldDeclaration                         : public static   final double java.lang.Math::PI = 3.14159265358979323846;
      Public                                   : public;

      Static                                   : static;

      Final                                    : final;

      TypeRef                                  : double;
        ProgramElementName                       : double


      FieldSpecification                       : java.lang.Math::PI = 3.14159265358979323846;
        ProgramConstant                          : java.lang.Math::PI

        DoubleLiteral                            : 3.14159265358979323846;



    FieldDeclaration                         : public static   final double java.lang.Math::E = 2.7182818284590452354;
      Public                                   : public;

      Static                                   : static;

      Final                                    : final;

      TypeRef                                  : double;
        ProgramElementName                       : double


      FieldSpecification                       : java.lang.Math::E = 2.7182818284590452354;
        ProgramConstant                          : java.lang.Math::E

        DoubleLiteral                            : 2.7182818284590452354;



    MethodDeclaration                        : public   static double toRadians (double angdeg){     return angdeg / 180.0 * PI;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : toRadians

      ParameterDeclaration                     : double angdeg;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : angdeg;
          LocationVariable                         : angdeg



      StatementBlock                           : {   return angdeg / 180.0 * PI; }
        Return                                   : return angdeg / 180.0 * PI;
          Times                                    : angdeg / 180.0 * PI;
            Divide                                   : angdeg / 180.0;
              LocationVariable                         : angdeg

              DoubleLiteral                            : 180.0;


            FieldReference                           : PI;
              ProgramConstant                          : java.lang.Math::PI






    MethodDeclaration                        : public   static double toDegrees (double angrad){     return angrad * 180.0 / PI;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : toDegrees

      ParameterDeclaration                     : double angrad;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : angrad;
          LocationVariable                         : angrad



      StatementBlock                           : {   return angrad * 180.0 / PI; }
        Return                                   : return angrad * 180.0 / PI;
          Divide                                   : angrad * 180.0 / PI;
            Times                                    : angrad * 180.0;
              LocationVariable                         : angrad

              DoubleLiteral                            : 180.0;


            FieldReference                           : PI;
              ProgramConstant                          : java.lang.Math::PI






    MethodDeclaration                        : public   static int abs (int a){     return (a < 0) ? -a : a;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : abs

      ParameterDeclaration                     : int a;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : a;
          LocationVariable                         : a



      StatementBlock                           : {   return (a < 0) ? -a : a; }
        Return                                   : return (a < 0) ? -a : a;
          Conditional                              : (a < 0) ? -a : a;
            ParenthesizedExpression                  : (a < 0);
              LessThan                                 : a < 0;
                LocationVariable                         : a

                IntLiteral                               : 0



            Negative                                 : -a;
              LocationVariable                         : a


            LocationVariable                         : a





    MethodDeclaration                        : public   static long abs (long a){     return (a < 0) ? -a : a;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : long;
        ProgramElementName                       : long


      ProgramElementName                       : abs

      ParameterDeclaration                     : long a;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : a;
          LocationVariable                         : a



      StatementBlock                           : {   return (a < 0) ? -a : a; }
        Return                                   : return (a < 0) ? -a : a;
          Conditional                              : (a < 0) ? -a : a;
            ParenthesizedExpression                  : (a < 0);
              LessThan                                 : a < 0;
                LocationVariable                         : a

                IntLiteral                               : 0



            Negative                                 : -a;
              LocationVariable                         : a


            LocationVariable                         : a





    MethodDeclaration                        : public   static double abs (double a){     return (a <= 0.0D) ? 0.0D - a : a;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : abs

      ParameterDeclaration                     : double a;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : a;
          LocationVariable                         : a



      StatementBlock                           : {   return (a <= 0.0D) ? 0.0D - a : a; }
        Return                                   : return (a <= 0.0D) ? 0.0D - a : a;
          Conditional                              : (a <= 0.0D) ? 0.0D - a : a;
            ParenthesizedExpression                  : (a <= 0.0D);
              LessOrEquals                             : a <= 0.0D;
                LocationVariable                         : a

                DoubleLiteral                            : 0.0D;



            Minus                                    : 0.0D - a;
              DoubleLiteral                            : 0.0D;

              LocationVariable                         : a


            LocationVariable                         : a





    MethodDeclaration                        : public   static float abs (float a){     return (a <= 0.0F) ? 0.0F - a : a;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : float;
        ProgramElementName                       : float


      ProgramElementName                       : abs

      ParameterDeclaration                     : float a;
        TypeRef                                  : float;
          ProgramElementName                       : float


        VariableSpecification                    : a;
          LocationVariable                         : a



      StatementBlock                           : {   return (a <= 0.0F) ? 0.0F - a : a; }
        Return                                   : return (a <= 0.0F) ? 0.0F - a : a;
          Conditional                              : (a <= 0.0F) ? 0.0F - a : a;
            ParenthesizedExpression                  : (a <= 0.0F);
              LessOrEquals                             : a <= 0.0F;
                LocationVariable                         : a

                FloatLiteral                             : 0.0F;



            Minus                                    : 0.0F - a;
              FloatLiteral                             : 0.0F;

              LocationVariable                         : a


            LocationVariable                         : a





    MethodDeclaration                        : public   static int min (int a, int b){     return (a <= b) ? a : b;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : min

      ParameterDeclaration                     : int a;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int b;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : b;
          LocationVariable                         : b



      StatementBlock                           : {   return (a <= b) ? a : b; }
        Return                                   : return (a <= b) ? a : b;
          Conditional                              : (a <= b) ? a : b;
            ParenthesizedExpression                  : (a <= b);
              LessOrEquals                             : a <= b;
                LocationVariable                         : a

                LocationVariable                         : b



            LocationVariable                         : a

            LocationVariable                         : b





    MethodDeclaration                        : public   static long min (long a, long b){     return (a <= b) ? a : b;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : long;
        ProgramElementName                       : long


      ProgramElementName                       : min

      ParameterDeclaration                     : long a;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : long b;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : b;
          LocationVariable                         : b



      StatementBlock                           : {   return (a <= b) ? a : b; }
        Return                                   : return (a <= b) ? a : b;
          Conditional                              : (a <= b) ? a : b;
            ParenthesizedExpression                  : (a <= b);
              LessOrEquals                             : a <= b;
                LocationVariable                         : a

                LocationVariable                         : b



            LocationVariable                         : a

            LocationVariable                         : b





    MethodDeclaration                        : public   static double min (double a, double b){     return (a <= b) ? a : b;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : min

      ParameterDeclaration                     : double a;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : double b;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : b;
          LocationVariable                         : b



      StatementBlock                           : {   return (a <= b) ? a : b; }
        Return                                   : return (a <= b) ? a : b;
          Conditional                              : (a <= b) ? a : b;
            ParenthesizedExpression                  : (a <= b);
              LessOrEquals                             : a <= b;
                LocationVariable                         : a

                LocationVariable                         : b



            LocationVariable                         : a

            LocationVariable                         : b





    MethodDeclaration                        : public   static float min (float a, float b){     return (a <= b) ? a : b;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : float;
        ProgramElementName                       : float


      ProgramElementName                       : min

      ParameterDeclaration                     : float a;
        TypeRef                                  : float;
          ProgramElementName                       : float


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : float b;
        TypeRef                                  : float;
          ProgramElementName                       : float


        VariableSpecification                    : b;
          LocationVariable                         : b



      StatementBlock                           : {   return (a <= b) ? a : b; }
        Return                                   : return (a <= b) ? a : b;
          Conditional                              : (a <= b) ? a : b;
            ParenthesizedExpression                  : (a <= b);
              LessOrEquals                             : a <= b;
                LocationVariable                         : a

                LocationVariable                         : b



            LocationVariable                         : a

            LocationVariable                         : b





    MethodDeclaration                        : public   static int max (int a, int b){     return (a >= b) ? a : b;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : max

      ParameterDeclaration                     : int a;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int b;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : b;
          LocationVariable                         : b



      StatementBlock                           : {   return (a >= b) ? a : b; }
        Return                                   : return (a >= b) ? a : b;
          Conditional                              : (a >= b) ? a : b;
            ParenthesizedExpression                  : (a >= b);
              GreaterOrEquals                          : a >= b;
                LocationVariable                         : a

                LocationVariable                         : b



            LocationVariable                         : a

            LocationVariable                         : b





    MethodDeclaration                        : public   static long max (long a, long b){     return (a >= b) ? a : b;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : long;
        ProgramElementName                       : long


      ProgramElementName                       : max

      ParameterDeclaration                     : long a;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : long b;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : b;
          LocationVariable                         : b



      StatementBlock                           : {   return (a >= b) ? a : b; }
        Return                                   : return (a >= b) ? a : b;
          Conditional                              : (a >= b) ? a : b;
            ParenthesizedExpression                  : (a >= b);
              GreaterOrEquals                          : a >= b;
                LocationVariable                         : a

                LocationVariable                         : b



            LocationVariable                         : a

            LocationVariable                         : b





    MethodDeclaration                        : public   static double max (double a, double b){     if (a != a) return a;     return (a >= b) ? a : b;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : max

      ParameterDeclaration                     : double a;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : double b;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : b;
          LocationVariable                         : b



      StatementBlock                           : {   if (a != a) return a;   return (a >= b) ? a : b; }
        If                                       : if (a != a) return a;
          NotEquals                                : a != a;
            LocationVariable                         : a

            LocationVariable                         : a


          Then                                     :  return a;
            Return                                   : return a;
              LocationVariable                         : a




        Return                                   : return (a >= b) ? a : b;
          Conditional                              : (a >= b) ? a : b;
            ParenthesizedExpression                  : (a >= b);
              GreaterOrEquals                          : a >= b;
                LocationVariable                         : a

                LocationVariable                         : b



            LocationVariable                         : a

            LocationVariable                         : b





    MethodDeclaration                        : public   static float max (float a, float b){     if (a != a) return a;     return (a >= b) ? a : b;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : float;
        ProgramElementName                       : float


      ProgramElementName                       : max

      ParameterDeclaration                     : float a;
        TypeRef                                  : float;
          ProgramElementName                       : float


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : float b;
        TypeRef                                  : float;
          ProgramElementName                       : float


        VariableSpecification                    : b;
          LocationVariable                         : b



      StatementBlock                           : {   if (a != a) return a;   return (a >= b) ? a : b; }
        If                                       : if (a != a) return a;
          NotEquals                                : a != a;
            LocationVariable                         : a

            LocationVariable                         : a


          Then                                     :  return a;
            Return                                   : return a;
              LocationVariable                         : a




        Return                                   : return (a >= b) ? a : b;
          Conditional                              : (a >= b) ? a : b;
            ParenthesizedExpression                  : (a >= b);
              GreaterOrEquals                          : a >= b;
                LocationVariable                         : a

                LocationVariable                         : b



            LocationVariable                         : a

            LocationVariable                         : b





    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : sin

      ParameterDeclaration                     : double d;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : d;
          LocationVariable                         : d




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : asin

      ParameterDeclaration                     : double d;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : d;
          LocationVariable                         : d




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : cos

      ParameterDeclaration                     : double d;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : d;
          LocationVariable                         : d




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : acos

      ParameterDeclaration                     : double d;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : d;
          LocationVariable                         : d




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : tan

      ParameterDeclaration                     : double d;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : d;
          LocationVariable                         : d




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : atan2

      ParameterDeclaration                     : double a;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : double b;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : b;
          LocationVariable                         : b




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : sqrt

      ParameterDeclaration                     : double d;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : d;
          LocationVariable                         : d




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : pow

      ParameterDeclaration                     : double a;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : double b;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : b;
          LocationVariable                         : b




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : exp

      ParameterDeclaration                     : double a;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : a;
          LocationVariable                         : a




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double;
        ProgramElementName                       : double


      ProgramElementName                       : atan

      ParameterDeclaration                     : double a;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : a;
          LocationVariable                         : a




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Math;
        ProgramElementName                       : Math


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Math <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Math;
        ProgramElementName                       : Math


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Math <createObject> (){     Math __NEW__;     __NEW__ = Math.<allocate>();     __NEW__.<create>()@java.lang.Math;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Math;
        ProgramElementName                       : Math


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Math __NEW__;   __NEW__ = Math.<allocate>();   __NEW__.<create>()@java.lang.Math;   return __NEW__; }
        LocalVariableDeclaration                 : Math __NEW__;
          TypeRef                                  : Math;
            ProgramElementName                       : Math


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Math.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Math.<allocate>();
            TypeRef                                  : Math;
              ProgramElementName                       : Math


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Math;
          TypeRef                                  : java.lang.Math;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Math


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/NegativeArraySizeException.java ======================================================
CompilationUnit                          :  package java.lang;  public class NegativeArraySizeException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.NegativeArraySizeException::<classPrepared>     static       private boolean java.lang.NegativeArraySizeException::<classInitialized>     static       private boolean java.lang.NegativeArraySizeException::<classErroneous>     static       private boolean java.lang.NegativeArraySizeException::<classInitializationInProgress>     NegativeArraySizeException     NegativeArraySizeException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class NegativeArraySizeException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.NegativeArraySizeException::<classPrepared>     static       private boolean java.lang.NegativeArraySizeException::<classInitialized>     static       private boolean java.lang.NegativeArraySizeException::<classErroneous>     static       private boolean java.lang.NegativeArraySizeException::<classInitializationInProgress>     NegativeArraySizeException     NegativeArraySizeException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : NegativeArraySizeException

    Extends                                  : extends java.lang.RuntimeException;
      TypeRef                                  : java.lang.RuntimeException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : RuntimeException



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.RuntimeException.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.RuntimeException.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.NegativeArraySizeException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.NegativeArraySizeException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.NegativeArraySizeException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.NegativeArraySizeException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.NegativeArraySizeException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.RuntimeException.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.RuntimeException.<clinit>()); }
                        PassiveExpression                        : @(java.lang.RuntimeException.<clinit>());
                          MethodReference                          : java.lang.RuntimeException.<clinit>();
                            TypeRef                                  : java.lang.RuntimeException;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : RuntimeException


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.NegativeArraySizeException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.NegativeArraySizeException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.NegativeArraySizeException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.NegativeArraySizeException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.NegativeArraySizeException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.NegativeArraySizeException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.NegativeArraySizeException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.NegativeArraySizeException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.NegativeArraySizeException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.NegativeArraySizeException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.NegativeArraySizeException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.NegativeArraySizeException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.NegativeArraySizeException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NegativeArraySizeException::<classPrepared>;
        LocationVariable                         : java.lang.NegativeArraySizeException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.NegativeArraySizeException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NegativeArraySizeException::<classInitialized>;
        LocationVariable                         : java.lang.NegativeArraySizeException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.NegativeArraySizeException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NegativeArraySizeException::<classErroneous>;
        LocationVariable                         : java.lang.NegativeArraySizeException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.NegativeArraySizeException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NegativeArraySizeException::<classInitializationInProgress>;
        LocationVariable                         : java.lang.NegativeArraySizeException::<classInitializationInProgress>



    ConstructorDeclaration                   : public NegativeArraySizeException (){     super();   }
      Public                                   : public;

      ProgramElementName                       : NegativeArraySizeException

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public NegativeArraySizeException (     java.lang.String arg0   ){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : NegativeArraySizeException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : NegativeArraySizeException;
        ProgramElementName                       : NegativeArraySizeException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public NegativeArraySizeException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : NegativeArraySizeException;
        ProgramElementName                       : NegativeArraySizeException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static NegativeArraySizeException <createObject> (){     NegativeArraySizeException __NEW__;     __NEW__ = NegativeArraySizeException.<allocate>();     __NEW__.<create>()@java.lang.NegativeArraySizeException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : NegativeArraySizeException;
        ProgramElementName                       : NegativeArraySizeException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   NegativeArraySizeException __NEW__;   __NEW__ = NegativeArraySizeException.<allocate>();   __NEW__.<create>()@java.lang.NegativeArraySizeException;   return __NEW__; }
        LocalVariableDeclaration                 : NegativeArraySizeException __NEW__;
          TypeRef                                  : NegativeArraySizeException;
            ProgramElementName                       : NegativeArraySizeException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = NegativeArraySizeException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : NegativeArraySizeException.<allocate>();
            TypeRef                                  : NegativeArraySizeException;
              ProgramElementName                       : NegativeArraySizeException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.NegativeArraySizeException;
          TypeRef                                  : java.lang.NegativeArraySizeException;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : NegativeArraySizeException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/NoClassDefFoundError.java ======================================================
CompilationUnit                          :  package java.lang;  public class NoClassDefFoundError extends java.lang.LinkageError {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.NoClassDefFoundError::<classPrepared>     static       private boolean java.lang.NoClassDefFoundError::<classInitialized>     static       private boolean java.lang.NoClassDefFoundError::<classErroneous>     static       private boolean java.lang.NoClassDefFoundError::<classInitializationInProgress>     NoClassDefFoundError     NoClassDefFoundError     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class NoClassDefFoundError extends java.lang.LinkageError {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.NoClassDefFoundError::<classPrepared>     static       private boolean java.lang.NoClassDefFoundError::<classInitialized>     static       private boolean java.lang.NoClassDefFoundError::<classErroneous>     static       private boolean java.lang.NoClassDefFoundError::<classInitializationInProgress>     NoClassDefFoundError     NoClassDefFoundError     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : NoClassDefFoundError

    Extends                                  : extends java.lang.LinkageError;
      TypeRef                                  : java.lang.LinkageError;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : LinkageError



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.LinkageError.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.LinkageError.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.LinkageError.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.NoClassDefFoundError::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.LinkageError.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.LinkageError.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.LinkageError.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.NoClassDefFoundError::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.LinkageError.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.LinkageError.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.NoClassDefFoundError::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.NoClassDefFoundError::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.NoClassDefFoundError::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.LinkageError.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.LinkageError.<clinit>()); }
                        PassiveExpression                        : @(java.lang.LinkageError.<clinit>());
                          MethodReference                          : java.lang.LinkageError.<clinit>();
                            TypeRef                                  : java.lang.LinkageError;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : LinkageError


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.NoClassDefFoundError::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.NoClassDefFoundError::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.NoClassDefFoundError::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.NoClassDefFoundError::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.NoClassDefFoundError::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.NoClassDefFoundError::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.NoClassDefFoundError::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.NoClassDefFoundError::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.NoClassDefFoundError::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.NoClassDefFoundError::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.NoClassDefFoundError::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.NoClassDefFoundError::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.NoClassDefFoundError::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NoClassDefFoundError::<classPrepared>;
        LocationVariable                         : java.lang.NoClassDefFoundError::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.NoClassDefFoundError::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NoClassDefFoundError::<classInitialized>;
        LocationVariable                         : java.lang.NoClassDefFoundError::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.NoClassDefFoundError::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NoClassDefFoundError::<classErroneous>;
        LocationVariable                         : java.lang.NoClassDefFoundError::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.NoClassDefFoundError::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NoClassDefFoundError::<classInitializationInProgress>;
        LocationVariable                         : java.lang.NoClassDefFoundError::<classInitializationInProgress>



    ConstructorDeclaration                   : public NoClassDefFoundError (){     super();   }
      Public                                   : public;

      ProgramElementName                       : NoClassDefFoundError

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public NoClassDefFoundError (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : NoClassDefFoundError

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : NoClassDefFoundError;
        ProgramElementName                       : NoClassDefFoundError


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public NoClassDefFoundError <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : NoClassDefFoundError;
        ProgramElementName                       : NoClassDefFoundError


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static NoClassDefFoundError <createObject> (){     NoClassDefFoundError __NEW__;     __NEW__ = NoClassDefFoundError.<allocate>();     __NEW__.<create>()@java.lang.NoClassDefFoundError;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : NoClassDefFoundError;
        ProgramElementName                       : NoClassDefFoundError


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   NoClassDefFoundError __NEW__;   __NEW__ = NoClassDefFoundError.<allocate>();   __NEW__.<create>()@java.lang.NoClassDefFoundError;   return __NEW__; }
        LocalVariableDeclaration                 : NoClassDefFoundError __NEW__;
          TypeRef                                  : NoClassDefFoundError;
            ProgramElementName                       : NoClassDefFoundError


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = NoClassDefFoundError.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : NoClassDefFoundError.<allocate>();
            TypeRef                                  : NoClassDefFoundError;
              ProgramElementName                       : NoClassDefFoundError


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.NoClassDefFoundError;
          TypeRef                                  : java.lang.NoClassDefFoundError;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : NoClassDefFoundError


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/NullPointerException.java ======================================================
CompilationUnit                          :  package java.lang;  public class NullPointerException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.NullPointerException::<classPrepared>     static       private boolean java.lang.NullPointerException::<classInitialized>     static       private boolean java.lang.NullPointerException::<classErroneous>     static       private boolean java.lang.NullPointerException::<classInitializationInProgress>     NullPointerException     NullPointerException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class NullPointerException extends java.lang.RuntimeException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.NullPointerException::<classPrepared>     static       private boolean java.lang.NullPointerException::<classInitialized>     static       private boolean java.lang.NullPointerException::<classErroneous>     static       private boolean java.lang.NullPointerException::<classInitializationInProgress>     NullPointerException     NullPointerException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : NullPointerException

    Extends                                  : extends java.lang.RuntimeException;
      TypeRef                                  : java.lang.RuntimeException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : RuntimeException



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.RuntimeException.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.RuntimeException.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.NullPointerException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.RuntimeException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.NullPointerException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.RuntimeException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.NullPointerException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.NullPointerException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.NullPointerException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.RuntimeException.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.RuntimeException.<clinit>()); }
                        PassiveExpression                        : @(java.lang.RuntimeException.<clinit>());
                          MethodReference                          : java.lang.RuntimeException.<clinit>();
                            TypeRef                                  : java.lang.RuntimeException;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : RuntimeException


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.NullPointerException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.NullPointerException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.NullPointerException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.NullPointerException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.NullPointerException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.NullPointerException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.NullPointerException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.NullPointerException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.NullPointerException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.NullPointerException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.NullPointerException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.NullPointerException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.NullPointerException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NullPointerException::<classPrepared>;
        LocationVariable                         : java.lang.NullPointerException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.NullPointerException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NullPointerException::<classInitialized>;
        LocationVariable                         : java.lang.NullPointerException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.NullPointerException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NullPointerException::<classErroneous>;
        LocationVariable                         : java.lang.NullPointerException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.NullPointerException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NullPointerException::<classInitializationInProgress>;
        LocationVariable                         : java.lang.NullPointerException::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : NullPointerException

      StatementBlock                           : {}


    ConstructorDeclaration                   : public NullPointerException (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : NullPointerException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : NullPointerException;
        ProgramElementName                       : NullPointerException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public NullPointerException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : NullPointerException;
        ProgramElementName                       : NullPointerException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static NullPointerException <createObject> (){     NullPointerException __NEW__;     __NEW__ = NullPointerException.<allocate>();     __NEW__.<create>()@java.lang.NullPointerException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : NullPointerException;
        ProgramElementName                       : NullPointerException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   NullPointerException __NEW__;   __NEW__ = NullPointerException.<allocate>();   __NEW__.<create>()@java.lang.NullPointerException;   return __NEW__; }
        LocalVariableDeclaration                 : NullPointerException __NEW__;
          TypeRef                                  : NullPointerException;
            ProgramElementName                       : NullPointerException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = NullPointerException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : NullPointerException.<allocate>();
            TypeRef                                  : NullPointerException;
              ProgramElementName                       : NullPointerException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.NullPointerException;
          TypeRef                                  : java.lang.NullPointerException;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : NullPointerException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Number.java ======================================================
CompilationUnit                          :  package java.lang;  public   abstract class Number extends java.lang.Object implements java.io.Serializable {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Number::<classPrepared>     static       private boolean java.lang.Number::<classInitialized>     static       private boolean java.lang.Number::<classErroneous>     static       private boolean java.lang.Number::<classInitializationInProgress>     Number     intValue     longValue     byteValue     shortValue     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public   abstract class Number extends java.lang.Object implements java.io.Serializable {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Number::<classPrepared>     static       private boolean java.lang.Number::<classInitialized>     static       private boolean java.lang.Number::<classErroneous>     static       private boolean java.lang.Number::<classInitializationInProgress>     Number     intValue     longValue     byteValue     shortValue     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Abstract                                 : abstract;

    ProgramElementName                       : Number

    Extends                                  : extends java.lang.Object;
      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object



    Implements                               : implements java.io.Serializable;
      TypeRef                                  : java.io.Serializable;
        PackageReference                         : java.io
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : io


        ProgramElementName                       : Serializable



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Number::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Number::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Number::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Number::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Number::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Number::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Number::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Number::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Number::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Number::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Number::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Number::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Number::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Number::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Number::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Number::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Number::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>


    FieldDeclaration                         : static   private boolean java.lang.Number::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Number::<classPrepared>;
        LocationVariable                         : java.lang.Number::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Number::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Number::<classInitialized>;
        LocationVariable                         : java.lang.Number::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.Number::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Number::<classErroneous>;
        LocationVariable                         : java.lang.Number::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Number::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Number::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Number::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : Number


    MethodDeclaration                        : 
      Public                                   : public;

      Abstract                                 : abstract;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : intValue


    MethodDeclaration                        : 
      Public                                   : public;

      Abstract                                 : abstract;

      TypeRef                                  : long;
        ProgramElementName                       : long


      ProgramElementName                       : longValue


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : byte;
        ProgramElementName                       : byte


      ProgramElementName                       : byteValue


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : short;
        ProgramElementName                       : short


      ProgramElementName                       : shortValue


    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Number;
        ProgramElementName                       : Number


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Number <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Number;
        ProgramElementName                       : Number


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Number <createObject> (){     Number __NEW__;     __NEW__ = Number.<allocate>();     __NEW__.<create>()@java.lang.Number;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Number;
        ProgramElementName                       : Number


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Number __NEW__;   __NEW__ = Number.<allocate>();   __NEW__.<create>()@java.lang.Number;   return __NEW__; }
        LocalVariableDeclaration                 : Number __NEW__;
          TypeRef                                  : Number;
            ProgramElementName                       : Number


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Number.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Number.<allocate>();
            TypeRef                                  : Number;
              ProgramElementName                       : Number


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Number;
          TypeRef                                  : java.lang.Number;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Number


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/NumberFormatException.java ======================================================
CompilationUnit                          :  package java.lang;  public class NumberFormatException extends java.lang.IllegalArgumentException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.NumberFormatException::<classPrepared>     static       private boolean java.lang.NumberFormatException::<classInitialized>     static       private boolean java.lang.NumberFormatException::<classErroneous>     static       private boolean java.lang.NumberFormatException::<classInitializationInProgress>     NumberFormatException     NumberFormatException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class NumberFormatException extends java.lang.IllegalArgumentException {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.NumberFormatException::<classPrepared>     static       private boolean java.lang.NumberFormatException::<classInitialized>     static       private boolean java.lang.NumberFormatException::<classErroneous>     static       private boolean java.lang.NumberFormatException::<classInitializationInProgress>     NumberFormatException     NumberFormatException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : NumberFormatException

    Extends                                  : extends java.lang.IllegalArgumentException;
      TypeRef                                  : java.lang.IllegalArgumentException;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : IllegalArgumentException



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.IllegalArgumentException.<clinit>(                        ));         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.IllegalArgumentException.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.IllegalArgumentException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.NumberFormatException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.IllegalArgumentException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.IllegalArgumentException.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.IllegalArgumentException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.NumberFormatException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.IllegalArgumentException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.IllegalArgumentException.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.NumberFormatException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.NumberFormatException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.NumberFormatException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.IllegalArgumentException.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.IllegalArgumentException.<clinit>()); }
                        PassiveExpression                        : @(java.lang.IllegalArgumentException.<clinit>());
                          MethodReference                          : java.lang.IllegalArgumentException.<clinit>();
                            TypeRef                                  : java.lang.IllegalArgumentException;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : IllegalArgumentException


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.NumberFormatException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.NumberFormatException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.NumberFormatException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.NumberFormatException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.NumberFormatException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.NumberFormatException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.NumberFormatException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.NumberFormatException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.NumberFormatException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.NumberFormatException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.NumberFormatException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.NumberFormatException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.NumberFormatException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NumberFormatException::<classPrepared>;
        LocationVariable                         : java.lang.NumberFormatException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.NumberFormatException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NumberFormatException::<classInitialized>;
        LocationVariable                         : java.lang.NumberFormatException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.NumberFormatException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NumberFormatException::<classErroneous>;
        LocationVariable                         : java.lang.NumberFormatException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.NumberFormatException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.NumberFormatException::<classInitializationInProgress>;
        LocationVariable                         : java.lang.NumberFormatException::<classInitializationInProgress>



    ConstructorDeclaration                   : public NumberFormatException (){     super();   }
      Public                                   : public;

      ProgramElementName                       : NumberFormatException

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public NumberFormatException (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : NumberFormatException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : NumberFormatException;
        ProgramElementName                       : NumberFormatException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public NumberFormatException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : NumberFormatException;
        ProgramElementName                       : NumberFormatException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static NumberFormatException <createObject> (){     NumberFormatException __NEW__;     __NEW__ = NumberFormatException.<allocate>();     __NEW__.<create>()@java.lang.NumberFormatException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : NumberFormatException;
        ProgramElementName                       : NumberFormatException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   NumberFormatException __NEW__;   __NEW__ = NumberFormatException.<allocate>();   __NEW__.<create>()@java.lang.NumberFormatException;   return __NEW__; }
        LocalVariableDeclaration                 : NumberFormatException __NEW__;
          TypeRef                                  : NumberFormatException;
            ProgramElementName                       : NumberFormatException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = NumberFormatException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : NumberFormatException.<allocate>();
            TypeRef                                  : NumberFormatException;
              ProgramElementName                       : NumberFormatException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.NumberFormatException;
          TypeRef                                  : java.lang.NumberFormatException;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : NumberFormatException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/VirtualMachineError.java ======================================================
CompilationUnit                          :  package java.lang;  public   abstract class VirtualMachineError extends java.lang.Error {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.VirtualMachineError::<classPrepared>     static       private boolean java.lang.VirtualMachineError::<classInitialized>     static       private boolean java.lang.VirtualMachineError::<classErroneous>     static       private boolean java.lang.VirtualMachineError::<classInitializationInProgress>     VirtualMachineError     VirtualMachineError     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public   abstract class VirtualMachineError extends java.lang.Error {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.VirtualMachineError::<classPrepared>     static       private boolean java.lang.VirtualMachineError::<classInitialized>     static       private boolean java.lang.VirtualMachineError::<classErroneous>     static       private boolean java.lang.VirtualMachineError::<classInitializationInProgress>     VirtualMachineError     VirtualMachineError     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Abstract                                 : abstract;

    ProgramElementName                       : VirtualMachineError

    Extends                                  : extends java.lang.Error;
      TypeRef                                  : java.lang.Error;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Error



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Error.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Error.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Error.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.VirtualMachineError::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Error.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Error.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Error.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.VirtualMachineError::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Error.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Error.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.VirtualMachineError::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.VirtualMachineError::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.VirtualMachineError::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Error.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Error.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Error.<clinit>());
                          MethodReference                          : java.lang.Error.<clinit>();
                            TypeRef                                  : java.lang.Error;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Error


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.VirtualMachineError::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.VirtualMachineError::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.VirtualMachineError::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.VirtualMachineError::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.VirtualMachineError::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.VirtualMachineError::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.VirtualMachineError::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.VirtualMachineError::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.VirtualMachineError::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.VirtualMachineError::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.VirtualMachineError::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.VirtualMachineError::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.VirtualMachineError::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.VirtualMachineError::<classPrepared>;
        LocationVariable                         : java.lang.VirtualMachineError::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.VirtualMachineError::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.VirtualMachineError::<classInitialized>;
        LocationVariable                         : java.lang.VirtualMachineError::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.VirtualMachineError::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.VirtualMachineError::<classErroneous>;
        LocationVariable                         : java.lang.VirtualMachineError::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.VirtualMachineError::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.VirtualMachineError::<classInitializationInProgress>;
        LocationVariable                         : java.lang.VirtualMachineError::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : VirtualMachineError

      StatementBlock                           : {}


    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : VirtualMachineError

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {}


    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : VirtualMachineError;
        ProgramElementName                       : VirtualMachineError


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public VirtualMachineError <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : VirtualMachineError;
        ProgramElementName                       : VirtualMachineError


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static VirtualMachineError <createObject> (){     VirtualMachineError __NEW__;     __NEW__ = VirtualMachineError.<allocate>();     __NEW__.<create>()@java.lang.VirtualMachineError;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : VirtualMachineError;
        ProgramElementName                       : VirtualMachineError


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   VirtualMachineError __NEW__;   __NEW__ = VirtualMachineError.<allocate>();   __NEW__.<create>()@java.lang.VirtualMachineError;   return __NEW__; }
        LocalVariableDeclaration                 : VirtualMachineError __NEW__;
          TypeRef                                  : VirtualMachineError;
            ProgramElementName                       : VirtualMachineError


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = VirtualMachineError.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : VirtualMachineError.<allocate>();
            TypeRef                                  : VirtualMachineError;
              ProgramElementName                       : VirtualMachineError


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.VirtualMachineError;
          TypeRef                                  : java.lang.VirtualMachineError;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : VirtualMachineError


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/OutOfMemoryError.java ======================================================
CompilationUnit                          :  package java.lang;  public class OutOfMemoryError extends java.lang.VirtualMachineError {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.OutOfMemoryError::<classPrepared>     static       private boolean java.lang.OutOfMemoryError::<classInitialized>     static       private boolean java.lang.OutOfMemoryError::<classErroneous>     static       private boolean java.lang.OutOfMemoryError::<classInitializationInProgress>     OutOfMemoryError     OutOfMemoryError     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class OutOfMemoryError extends java.lang.VirtualMachineError {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.lang.OutOfMemoryError::<classPrepared>     static       private boolean java.lang.OutOfMemoryError::<classInitialized>     static       private boolean java.lang.OutOfMemoryError::<classErroneous>     static       private boolean java.lang.OutOfMemoryError::<classInitializationInProgress>     OutOfMemoryError     OutOfMemoryError     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : OutOfMemoryError

    Extends                                  : extends java.lang.VirtualMachineError;
      TypeRef                                  : java.lang.VirtualMachineError;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : VirtualMachineError



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.VirtualMachineError.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.VirtualMachineError.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.VirtualMachineError.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.OutOfMemoryError::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.VirtualMachineError.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.VirtualMachineError.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.VirtualMachineError.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.OutOfMemoryError::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.VirtualMachineError.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.VirtualMachineError.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.OutOfMemoryError::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.OutOfMemoryError::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.OutOfMemoryError::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.VirtualMachineError.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.VirtualMachineError.<clinit>()); }
                        PassiveExpression                        : @(java.lang.VirtualMachineError.<clinit>());
                          MethodReference                          : java.lang.VirtualMachineError.<clinit>();
                            TypeRef                                  : java.lang.VirtualMachineError;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : VirtualMachineError


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.OutOfMemoryError::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.OutOfMemoryError::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.OutOfMemoryError::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.OutOfMemoryError::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.OutOfMemoryError::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.OutOfMemoryError::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.OutOfMemoryError::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.OutOfMemoryError::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.OutOfMemoryError::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.OutOfMemoryError::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.OutOfMemoryError::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.OutOfMemoryError::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.OutOfMemoryError::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.OutOfMemoryError::<classPrepared>;
        LocationVariable                         : java.lang.OutOfMemoryError::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.OutOfMemoryError::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.OutOfMemoryError::<classInitialized>;
        LocationVariable                         : java.lang.OutOfMemoryError::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.OutOfMemoryError::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.OutOfMemoryError::<classErroneous>;
        LocationVariable                         : java.lang.OutOfMemoryError::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.OutOfMemoryError::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.OutOfMemoryError::<classInitializationInProgress>;
        LocationVariable                         : java.lang.OutOfMemoryError::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : OutOfMemoryError

      StatementBlock                           : {}


    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : OutOfMemoryError

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {}


    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : OutOfMemoryError;
        ProgramElementName                       : OutOfMemoryError


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public OutOfMemoryError <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : OutOfMemoryError;
        ProgramElementName                       : OutOfMemoryError


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static OutOfMemoryError <createObject> (){     OutOfMemoryError __NEW__;     __NEW__ = OutOfMemoryError.<allocate>();     __NEW__.<create>()@java.lang.OutOfMemoryError;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : OutOfMemoryError;
        ProgramElementName                       : OutOfMemoryError


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   OutOfMemoryError __NEW__;   __NEW__ = OutOfMemoryError.<allocate>();   __NEW__.<create>()@java.lang.OutOfMemoryError;   return __NEW__; }
        LocalVariableDeclaration                 : OutOfMemoryError __NEW__;
          TypeRef                                  : OutOfMemoryError;
            ProgramElementName                       : OutOfMemoryError


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = OutOfMemoryError.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : OutOfMemoryError.<allocate>();
            TypeRef                                  : OutOfMemoryError;
              ProgramElementName                       : OutOfMemoryError


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.OutOfMemoryError;
          TypeRef                                  : java.lang.OutOfMemoryError;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : OutOfMemoryError


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Runnable.java ======================================================
CompilationUnit                          :  package java.lang;  public interface Runnable {     run   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  InterfaceDeclaration                     : public interface Runnable {     run   };
    Public                                   : public;

    ProgramElementName                       : Runnable

    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : run





=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/RuntimeException.java ======================================================
CompilationUnit                          :  package java.lang;  public class RuntimeException extends java.lang.Exception {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     static       private boolean java.lang.RuntimeException::<classPrepared>     static       private boolean java.lang.RuntimeException::<classInitialized>     static       private boolean java.lang.RuntimeException::<classErroneous>     static       private boolean java.lang.RuntimeException::<classInitializationInProgress>     RuntimeException     RuntimeException     RuntimeException     RuntimeException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class RuntimeException extends java.lang.Exception {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     static       private boolean java.lang.RuntimeException::<classPrepared>     static       private boolean java.lang.RuntimeException::<classInitialized>     static       private boolean java.lang.RuntimeException::<classErroneous>     static       private boolean java.lang.RuntimeException::<classInitializationInProgress>     RuntimeException     RuntimeException     RuntimeException     RuntimeException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : RuntimeException

    Extends                                  : extends java.lang.Exception;
      TypeRef                                  : java.lang.Exception;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Exception



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Exception.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Exception.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Exception.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.RuntimeException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Exception.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Exception.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Exception.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.RuntimeException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Exception.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Exception.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.RuntimeException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.RuntimeException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.RuntimeException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Exception.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Exception.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Exception.<clinit>());
                          MethodReference                          : java.lang.Exception.<clinit>();
                            TypeRef                                  : java.lang.Exception;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Exception


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.RuntimeException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.RuntimeException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.RuntimeException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.RuntimeException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.RuntimeException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.RuntimeException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.RuntimeException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.RuntimeException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.RuntimeException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.RuntimeException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.RuntimeException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.RuntimeException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.Throwable arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (     java.lang.String arg0,     java.lang.Throwable arg1   ){     super.<init>(arg0, arg1);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Throwable arg1;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      StatementBlock                           : {   super.<init>(arg0, arg1); }
        MethodReference                          : super.<init>(arg0, arg1);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0

          LocationVariable                         : arg1




    MethodDeclaration                        : public void <init> (java.lang.String arg0){     super.<init>(arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super.<init>(arg0); }
        MethodReference                          : super.<init>(arg0);
          SuperReference                           : super;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.RuntimeException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.RuntimeException::<classPrepared>;
        LocationVariable                         : java.lang.RuntimeException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.RuntimeException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.RuntimeException::<classInitialized>;
        LocationVariable                         : java.lang.RuntimeException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.RuntimeException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.RuntimeException::<classErroneous>;
        LocationVariable                         : java.lang.RuntimeException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.RuntimeException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.RuntimeException::<classInitializationInProgress>;
        LocationVariable                         : java.lang.RuntimeException::<classInitializationInProgress>



    ConstructorDeclaration                   : public RuntimeException (){     super();   }
      Public                                   : public;

      ProgramElementName                       : RuntimeException

      StatementBlock                           : {   super(); }
        SuperConstructorReference                : super();



    ConstructorDeclaration                   : public RuntimeException (java.lang.String arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : RuntimeException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    ConstructorDeclaration                   : public RuntimeException (     java.lang.String arg0,     java.lang.Throwable arg1   ){     super(arg0, arg1);   }
      Public                                   : public;

      ProgramElementName                       : RuntimeException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Throwable arg1;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      StatementBlock                           : {   super(arg0, arg1); }
        SuperConstructorReference                : super(arg0, arg1);
          LocationVariable                         : arg0

          LocationVariable                         : arg1




    ConstructorDeclaration                   : public RuntimeException (java.lang.Throwable arg0){     super(arg0);   }
      Public                                   : public;

      ProgramElementName                       : RuntimeException

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   super(arg0); }
        SuperConstructorReference                : super(arg0);
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : RuntimeException;
        ProgramElementName                       : RuntimeException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public RuntimeException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : RuntimeException;
        ProgramElementName                       : RuntimeException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static RuntimeException <createObject> (){     RuntimeException __NEW__;     __NEW__ = RuntimeException.<allocate>();     __NEW__.<create>()@java.lang.RuntimeException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : RuntimeException;
        ProgramElementName                       : RuntimeException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   RuntimeException __NEW__;   __NEW__ = RuntimeException.<allocate>();   __NEW__.<create>()@java.lang.RuntimeException;   return __NEW__; }
        LocalVariableDeclaration                 : RuntimeException __NEW__;
          TypeRef                                  : RuntimeException;
            ProgramElementName                       : RuntimeException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = RuntimeException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : RuntimeException.<allocate>();
            TypeRef                                  : RuntimeException;
              ProgramElementName                       : RuntimeException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.RuntimeException;
          TypeRef                                  : java.lang.RuntimeException;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : RuntimeException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/String.java ======================================================
CompilationUnit                          :  package java.lang;  public   final class String extends java.lang.Object implements java.io.Serializable,   java.lang.Comparable {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     <init>     <init>     <init>     <init>     <init>     static       private boolean java.lang.String::<classPrepared>     static       private boolean java.lang.String::<classInitialized>     static       private boolean java.lang.String::<classErroneous>     static       private boolean java.lang.String::<classInitializationInProgress>     length     String     String     String     String     String     String     String     String     String     length     isEmpty     charAt     codePointAt     codePointBefore     codePointCount     offsetByCodePoints     getChars     getBytes     getBytes     equals     equalsIgnoreCase     compareTo     compareToIgnoreCase     regionMatches     regionMatches     startsWith     startsWith     endsWith     hashCode     indexOf     indexOf     lastIndexOf     lastIndexOf     indexOf     indexOf     lastIndexOf     lastIndexOf     substring     substring     concat     replace     matches     replaceFirst     replaceAll     split     split     toLowerCase     toUpperCase     trim     toString     toCharArray     format     valueOf     valueOf     valueOf     copyValueOf     copyValueOf     valueOf     valueOf     valueOf     valueOf     intern     compareTo     compareTo     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public   final class String extends java.lang.Object implements java.io.Serializable,   java.lang.Comparable {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     <init>     <init>     <init>     <init>     <init>     static       private boolean java.lang.String::<classPrepared>     static       private boolean java.lang.String::<classInitialized>     static       private boolean java.lang.String::<classErroneous>     static       private boolean java.lang.String::<classInitializationInProgress>     length     String     String     String     String     String     String     String     String     String     length     isEmpty     charAt     codePointAt     codePointBefore     codePointCount     offsetByCodePoints     getChars     getBytes     getBytes     equals     equalsIgnoreCase     compareTo     compareToIgnoreCase     regionMatches     regionMatches     startsWith     startsWith     endsWith     hashCode     indexOf     indexOf     lastIndexOf     lastIndexOf     indexOf     indexOf     lastIndexOf     lastIndexOf     substring     substring     concat     replace     matches     replaceFirst     replaceAll     split     split     toLowerCase     toUpperCase     trim     toString     toCharArray     format     valueOf     valueOf     valueOf     copyValueOf     copyValueOf     valueOf     valueOf     valueOf     valueOf     intern     compareTo     compareTo     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : String

    Extends                                  : extends java.lang.Object;
      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object



    Implements                               : implements java.io.Serializable, java.lang.Comparable;
      TypeRef                                  : java.io.Serializable;
        PackageReference                         : java.io
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : io


        ProgramElementName                       : Serializable


      TypeRef                                  : java.lang.Comparable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Comparable



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.String::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.String::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.String::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.String::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.String::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.String::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.String::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.String::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.String::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.String::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.String::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.String::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.String::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.String::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.String::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.String::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.String::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : byte[] arg0;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : byte[] arg0;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      ParameterDeclaration                     : int arg2;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg2;
          LocationVariable                         : arg2




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : byte[] arg0;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : public void <init> (     byte[] arg0,     int arg1,     int arg2,     int arg3   );
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : byte[] arg0;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      ParameterDeclaration                     : int arg2;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg2;
          LocationVariable                         : arg2



      ParameterDeclaration                     : int arg3;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg3;
          LocationVariable                         : arg3




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : int[] arg0;
        TypeRef                                  : int[];
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      ParameterDeclaration                     : int arg2;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg2;
          LocationVariable                         : arg2




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : char[] v;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : v;
          LocationVariable                         : v



      ParameterDeclaration                     : int offset;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : offset;
          LocationVariable                         : offset



      ParameterDeclaration                     : int count;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : count;
          LocationVariable                         : count




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : char[] v;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : v;
          LocationVariable                         : v




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String other;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : other;
          LocationVariable                         : other




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>


    FieldDeclaration                         : static   private boolean java.lang.String::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.String::<classPrepared>;
        LocationVariable                         : java.lang.String::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.String::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.String::<classInitialized>;
        LocationVariable                         : java.lang.String::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.String::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.String::<classErroneous>;
        LocationVariable                         : java.lang.String::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.String::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.String::<classInitializationInProgress>;
        LocationVariable                         : java.lang.String::<classInitializationInProgress>



    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : length


    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : String


    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : String

      ParameterDeclaration                     : java.lang.String other;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : other;
          LocationVariable                         : other




    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : String

      ParameterDeclaration                     : char[] v;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : v;
          LocationVariable                         : v




    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : String

      ParameterDeclaration                     : char[] v;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : v;
          LocationVariable                         : v



      ParameterDeclaration                     : int offset;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : offset;
          LocationVariable                         : offset



      ParameterDeclaration                     : int count;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : count;
          LocationVariable                         : count




    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : String

      ParameterDeclaration                     : int[] arg0;
        TypeRef                                  : int[];
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      ParameterDeclaration                     : int arg2;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg2;
          LocationVariable                         : arg2




    ConstructorDeclaration                   : public String (     byte[] arg0,     int arg1,     int arg2,     int arg3   );
      Public                                   : public;

      ProgramElementName                       : String

      ParameterDeclaration                     : byte[] arg0;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      ParameterDeclaration                     : int arg2;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg2;
          LocationVariable                         : arg2



      ParameterDeclaration                     : int arg3;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg3;
          LocationVariable                         : arg3




    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : String

      ParameterDeclaration                     : byte[] arg0;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : String

      ParameterDeclaration                     : byte[] arg0;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      ParameterDeclaration                     : int arg2;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg2;
          LocationVariable                         : arg2




    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : String

      ParameterDeclaration                     : byte[] arg0;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : length


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : isEmpty


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : char;
        ProgramElementName                       : char


      ProgramElementName                       : charAt

      ParameterDeclaration                     : int charIdx;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : charIdx;
          LocationVariable                         : charIdx




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : codePointAt

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : codePointBefore

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : codePointCount

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : offsetByCodePoints

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : public void getChars (     int srcBegin,     int srcEnd,     char[] dst,     int dstBegin   );
      Public                                   : public;

      ProgramElementName                       : getChars

      ParameterDeclaration                     : int srcBegin;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : srcBegin;
          LocationVariable                         : srcBegin



      ParameterDeclaration                     : int srcEnd;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : srcEnd;
          LocationVariable                         : srcEnd



      ParameterDeclaration                     : char[] dst;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : dst;
          LocationVariable                         : dst



      ParameterDeclaration                     : int dstBegin;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : dstBegin;
          LocationVariable                         : dstBegin




    MethodDeclaration                        : public void getBytes (     int arg0,     int arg1,     byte[] arg2,     int arg3   );
      Public                                   : public;

      ProgramElementName                       : getBytes

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      ParameterDeclaration                     : byte[] arg2;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : arg2;
          LocationVariable                         : arg2



      ParameterDeclaration                     : int arg3;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg3;
          LocationVariable                         : arg3




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : byte[];
        ProgramElementName                       : byte


      ProgramElementName                       : getBytes


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : equals

      ParameterDeclaration                     : java.lang.Object obj;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : obj;
          LocationVariable                         : obj




    MethodDeclaration                        : public boolean equalsIgnoreCase (java.lang.String arg0);
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : equalsIgnoreCase

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : compareTo

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : compareToIgnoreCase

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : public boolean regionMatches (     int arg0,     java.lang.String arg1,     int arg2,     int arg3   );
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : regionMatches

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.String arg1;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      ParameterDeclaration                     : int arg2;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg2;
          LocationVariable                         : arg2



      ParameterDeclaration                     : int arg3;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg3;
          LocationVariable                         : arg3




    MethodDeclaration                        : public boolean regionMatches (     boolean arg0,     int arg1,     java.lang.String arg2,     int arg3,     int arg4   );
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : regionMatches

      ParameterDeclaration                     : boolean arg0;
        TypeRef                                  : boolean;
          ProgramElementName                       : boolean


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      ParameterDeclaration                     : java.lang.String arg2;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg2;
          LocationVariable                         : arg2



      ParameterDeclaration                     : int arg3;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg3;
          LocationVariable                         : arg3



      ParameterDeclaration                     : int arg4;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg4;
          LocationVariable                         : arg4




    MethodDeclaration                        : public boolean startsWith (     java.lang.String other,     int startIdx   );
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : startsWith

      ParameterDeclaration                     : java.lang.String other;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : other;
          LocationVariable                         : other



      ParameterDeclaration                     : int startIdx;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : startIdx;
          LocationVariable                         : startIdx




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : startsWith

      ParameterDeclaration                     : java.lang.String other;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : other;
          LocationVariable                         : other




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : endsWith

      ParameterDeclaration                     : java.lang.String other;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : other;
          LocationVariable                         : other




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : hashCode


    MethodDeclaration                        : public int indexOf (int charVal){     return indexOf(charVal, 0);   }
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : indexOf

      ParameterDeclaration                     : int charVal;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : charVal;
          LocationVariable                         : charVal



      StatementBlock                           : {   return indexOf(charVal, 0); }
        Return                                   : return indexOf(charVal, 0);
          MethodReference                          : indexOf(charVal, 0);
            ProgramElementName                       : indexOf

            LocationVariable                         : charVal

            IntLiteral                               : 0





    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : indexOf

      ParameterDeclaration                     : int charVal;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : charVal;
          LocationVariable                         : charVal



      ParameterDeclaration                     : int from;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : from;
          LocationVariable                         : from




    MethodDeclaration                        : public int lastIndexOf (int charVal){     return lastIndexOf(charVal, 0);   }
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : lastIndexOf

      ParameterDeclaration                     : int charVal;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : charVal;
          LocationVariable                         : charVal



      StatementBlock                           : {   return lastIndexOf(charVal, 0); }
        Return                                   : return lastIndexOf(charVal, 0);
          MethodReference                          : lastIndexOf(charVal, 0);
            ProgramElementName                       : lastIndexOf

            LocationVariable                         : charVal

            IntLiteral                               : 0





    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : lastIndexOf

      ParameterDeclaration                     : int charVal;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : charVal;
          LocationVariable                         : charVal



      ParameterDeclaration                     : int from;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : from;
          LocationVariable                         : from




    MethodDeclaration                        : public int indexOf (java.lang.String other){     return indexOf(other, 0);   }
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : indexOf

      ParameterDeclaration                     : java.lang.String other;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : other;
          LocationVariable                         : other



      StatementBlock                           : {   return indexOf(other, 0); }
        Return                                   : return indexOf(other, 0);
          MethodReference                          : indexOf(other, 0);
            ProgramElementName                       : indexOf

            LocationVariable                         : other

            IntLiteral                               : 0





    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : indexOf

      ParameterDeclaration                     : java.lang.String t;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : t;
          LocationVariable                         : t



      ParameterDeclaration                     : int from;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : from;
          LocationVariable                         : from




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : lastIndexOf

      ParameterDeclaration                     : java.lang.String other;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : other;
          LocationVariable                         : other




    MethodDeclaration                        : public int lastIndexOf (     java.lang.String other,     int from   );
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : lastIndexOf

      ParameterDeclaration                     : java.lang.String other;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : other;
          LocationVariable                         : other



      ParameterDeclaration                     : int from;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : from;
          LocationVariable                         : from




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : substring

      ParameterDeclaration                     : int startIdx;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : startIdx;
          LocationVariable                         : startIdx




    MethodDeclaration                        : public java.lang.String substring (     int startIdx,     int endIdx   );
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : substring

      ParameterDeclaration                     : int startIdx;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : startIdx;
          LocationVariable                         : startIdx



      ParameterDeclaration                     : int endIdx;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : endIdx;
          LocationVariable                         : endIdx




    MethodDeclaration                        : public java.lang.String concat (java.lang.String other);
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : concat

      ParameterDeclaration                     : java.lang.String other;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : other;
          LocationVariable                         : other




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : replace

      ParameterDeclaration                     : char c1;
        TypeRef                                  : char;
          ProgramElementName                       : char


        VariableSpecification                    : c1;
          LocationVariable                         : c1



      ParameterDeclaration                     : char c2;
        TypeRef                                  : char;
          ProgramElementName                       : char


        VariableSpecification                    : c2;
          LocationVariable                         : c2




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : matches

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : public java.lang.String replaceFirst (     java.lang.String arg0,     java.lang.String arg1   );
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : replaceFirst

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.String arg1;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : public java.lang.String replaceAll (     java.lang.String arg0,     java.lang.String arg1   );
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : replaceAll

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.String arg1;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : public java.lang.String[] split (     java.lang.String arg0,     int arg1   );
      Public                                   : public;

      TypeRef                                  : java.lang.String[];
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : split

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : public java.lang.String[] split (java.lang.String arg0);
      Public                                   : public;

      TypeRef                                  : java.lang.String[];
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : split

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : toLowerCase


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : toUpperCase


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : trim


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : toString


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : char[];
        ProgramElementName                       : char


      ProgramElementName                       : toCharArray


    MethodDeclaration                        : public   static java.lang.String format (     java.lang.String arg0,     java.lang.Object[] arg1   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : format

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Object[] arg1;
        TypeRef                                  : java.lang.Object[];
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : public   static java.lang.String valueOf (java.lang.Object obj);
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : valueOf

      ParameterDeclaration                     : java.lang.Object obj;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : obj;
          LocationVariable                         : obj




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : valueOf

      ParameterDeclaration                     : char[] data;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : data;
          LocationVariable                         : data




    MethodDeclaration                        : public   static java.lang.String valueOf (     char[] data,     int offset,     int count   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : valueOf

      ParameterDeclaration                     : char[] data;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : data;
          LocationVariable                         : data



      ParameterDeclaration                     : int offset;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : offset;
          LocationVariable                         : offset



      ParameterDeclaration                     : int count;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : count;
          LocationVariable                         : count




    MethodDeclaration                        : public   static java.lang.String copyValueOf (     char[] data,     int offset,     int count   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : copyValueOf

      ParameterDeclaration                     : char[] data;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : data;
          LocationVariable                         : data



      ParameterDeclaration                     : int offset;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : offset;
          LocationVariable                         : offset



      ParameterDeclaration                     : int count;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : count;
          LocationVariable                         : count




    MethodDeclaration                        : public   static java.lang.String copyValueOf (char[] data);
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : copyValueOf

      ParameterDeclaration                     : char[] data;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : data;
          LocationVariable                         : data




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : valueOf

      ParameterDeclaration                     : boolean arg0;
        TypeRef                                  : boolean;
          ProgramElementName                       : boolean


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : valueOf

      ParameterDeclaration                     : char arg0;
        TypeRef                                  : char;
          ProgramElementName                       : char


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : valueOf

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : valueOf

      ParameterDeclaration                     : long arg0;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : intern


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : compareTo

      ParameterDeclaration                     : java.lang.String other;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : other;
          LocationVariable                         : other




    MethodDeclaration                        : public int compareTo (java.lang.Object other){     if (other instanceof String) {       return compareTo((String) other);     }     throw     new java.lang.IllegalArgumentException(       "No string given."     );   }
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : compareTo

      ParameterDeclaration                     : java.lang.Object other;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : other;
          LocationVariable                         : other



      StatementBlock                           : {   if (other instanceof String) {     return compareTo((String) other);   }   throw   new java.lang.IllegalArgumentException(     "No string given."   ); }
        If                                       : if (other instanceof String) {   return compareTo((String) other); }
          Instanceof                               : other instanceof String;
            LocationVariable                         : other

            TypeRef                                  : String;
              ProgramElementName                       : String



          Then                                     :  {   return compareTo((String) other); }
            StatementBlock                           : {   return compareTo((String) other); }
              Return                                   : return compareTo((String) other);
                MethodReference                          : compareTo((String) other);
                  ProgramElementName                       : compareTo

                  TypeCast                                 : (String) other;
                    TypeRef                                  : String;
                      ProgramElementName                       : String


                    LocationVariable                         : other







        Throw                                    : throw new java.lang.IllegalArgumentException(   "No string given." );
          New                                      : new java.lang.IllegalArgumentException(   "No string given." );
            TypeRef                                  : java.lang.IllegalArgumentException;
              PackageReference                         : java.lang
                PackageReference                         : java
                  ProgramElementName                       : java


                ProgramElementName                       : lang


              ProgramElementName                       : IllegalArgumentException


            StringLiteral                            : "No string given.";





    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : String;
        ProgramElementName                       : String


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public String <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : String;
        ProgramElementName                       : String


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static String <createObject> (){     String __NEW__;     __NEW__ = String.<allocate>();     __NEW__.<create>()@java.lang.String;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : String;
        ProgramElementName                       : String


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   String __NEW__;   __NEW__ = String.<allocate>();   __NEW__.<create>()@java.lang.String;   return __NEW__; }
        LocalVariableDeclaration                 : String __NEW__;
          TypeRef                                  : String;
            ProgramElementName                       : String


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = String.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : String.<allocate>();
            TypeRef                                  : String;
              ProgramElementName                       : String


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.String;
          TypeRef                                  : java.lang.String;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : String


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/StringBuffer.java ======================================================
CompilationUnit                          :  package java.lang;  public class StringBuffer extends java.lang.Object implements java.io.Serializable {     <clinit>     <clprepare>     <init>     <init>     <init>     static       private boolean java.lang.StringBuffer::<classPrepared>     static       private boolean java.lang.StringBuffer::<classInitialized>     static       private boolean java.lang.StringBuffer::<classErroneous>     static       private boolean java.lang.StringBuffer::<classInitializationInProgress>     StringBuffer     StringBuffer     StringBuffer     append     append     append     append     append     append     charAt     length     toString     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class StringBuffer extends java.lang.Object implements java.io.Serializable {     <clinit>     <clprepare>     <init>     <init>     <init>     static       private boolean java.lang.StringBuffer::<classPrepared>     static       private boolean java.lang.StringBuffer::<classInitialized>     static       private boolean java.lang.StringBuffer::<classErroneous>     static       private boolean java.lang.StringBuffer::<classInitializationInProgress>     StringBuffer     StringBuffer     StringBuffer     append     append     append     append     append     append     charAt     length     toString     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : StringBuffer

    Extends                                  : extends java.lang.Object;
      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object



    Implements                               : implements java.io.Serializable;
      TypeRef                                  : java.io.Serializable;
        PackageReference                         : java.io
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : io


        ProgramElementName                       : Serializable



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.StringBuffer::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.StringBuffer::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.StringBuffer::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.StringBuffer::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.StringBuffer::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.StringBuffer::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.StringBuffer::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.StringBuffer::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.StringBuffer::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.StringBuffer::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.StringBuffer::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.StringBuffer::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.StringBuffer::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.StringBuffer::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.StringBuffer::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.StringBuffer::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.StringBuffer::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String s;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : s;
          LocationVariable                         : s




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : int n;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : n;
          LocationVariable                         : n




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>


    FieldDeclaration                         : static   private boolean java.lang.StringBuffer::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.StringBuffer::<classPrepared>;
        LocationVariable                         : java.lang.StringBuffer::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.StringBuffer::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.StringBuffer::<classInitialized>;
        LocationVariable                         : java.lang.StringBuffer::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.StringBuffer::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.StringBuffer::<classErroneous>;
        LocationVariable                         : java.lang.StringBuffer::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.StringBuffer::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.StringBuffer::<classInitializationInProgress>;
        LocationVariable                         : java.lang.StringBuffer::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : StringBuffer


    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : StringBuffer

      ParameterDeclaration                     : int n;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : n;
          LocationVariable                         : n




    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : StringBuffer

      ParameterDeclaration                     : java.lang.String s;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : s;
          LocationVariable                         : s




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : StringBuffer;
        ProgramElementName                       : StringBuffer


      ProgramElementName                       : append

      ParameterDeclaration                     : boolean b;
        TypeRef                                  : boolean;
          ProgramElementName                       : boolean


        VariableSpecification                    : b;
          LocationVariable                         : b




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : StringBuffer;
        ProgramElementName                       : StringBuffer


      ProgramElementName                       : append

      ParameterDeclaration                     : char c;
        TypeRef                                  : char;
          ProgramElementName                       : char


        VariableSpecification                    : c;
          LocationVariable                         : c




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : StringBuffer;
        ProgramElementName                       : StringBuffer


      ProgramElementName                       : append

      ParameterDeclaration                     : int i;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : i;
          LocationVariable                         : i




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : StringBuffer;
        ProgramElementName                       : StringBuffer


      ProgramElementName                       : append

      ParameterDeclaration                     : long l;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : l;
          LocationVariable                         : l




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : StringBuffer;
        ProgramElementName                       : StringBuffer


      ProgramElementName                       : append

      ParameterDeclaration                     : java.lang.Object obj;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : obj;
          LocationVariable                         : obj




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : StringBuffer;
        ProgramElementName                       : StringBuffer


      ProgramElementName                       : append

      ParameterDeclaration                     : java.lang.StringBuffer sb;
        TypeRef                                  : java.lang.StringBuffer;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : StringBuffer


        VariableSpecification                    : sb;
          LocationVariable                         : sb




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : char;
        ProgramElementName                       : char


      ProgramElementName                       : charAt

      ParameterDeclaration                     : int index;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : index;
          LocationVariable                         : index




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : length


    MethodDeclaration                        : 
      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : toString


    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : StringBuffer;
        ProgramElementName                       : StringBuffer


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public StringBuffer <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : StringBuffer;
        ProgramElementName                       : StringBuffer


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static StringBuffer <createObject> (){     StringBuffer __NEW__;     __NEW__ = StringBuffer.<allocate>();     __NEW__.<create>()@java.lang.StringBuffer;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : StringBuffer;
        ProgramElementName                       : StringBuffer


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   StringBuffer __NEW__;   __NEW__ = StringBuffer.<allocate>();   __NEW__.<create>()@java.lang.StringBuffer;   return __NEW__; }
        LocalVariableDeclaration                 : StringBuffer __NEW__;
          TypeRef                                  : StringBuffer;
            ProgramElementName                       : StringBuffer


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = StringBuffer.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : StringBuffer.<allocate>();
            TypeRef                                  : StringBuffer;
              ProgramElementName                       : StringBuffer


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.StringBuffer;
          TypeRef                                  : java.lang.StringBuffer;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : StringBuffer


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/System.java ======================================================
CompilationUnit                          :  package java.lang;  public   final class System {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.System::<classPrepared>     static       private boolean java.lang.System::<classInitialized>     static       private boolean java.lang.System::<classErroneous>     static       private boolean java.lang.System::<classInitializationInProgress>     public static       final java.io.InputStream java.lang.System::in     public static       final java.io.PrintStream java.lang.System::out     public static       final java.io.PrintStream java.lang.System::err     arraycopy     exit     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public   final class System {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.System::<classPrepared>     static       private boolean java.lang.System::<classInitialized>     static       private boolean java.lang.System::<classErroneous>     static       private boolean java.lang.System::<classInitializationInProgress>     public static       final java.io.InputStream java.lang.System::in     public static       final java.io.PrintStream java.lang.System::out     public static       final java.io.PrintStream java.lang.System::err     arraycopy     exit     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : System

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.System::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.System::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.System::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.System::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.System::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.System::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.System::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.System::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.System::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.System::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.System::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.System::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(err) = null;     @(in) = null;     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(out) = null;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(err) = null;   @(in) = null;   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(out) = null;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(err) = null;
          PassiveExpression                        : @(err);
            FieldReference                           : err;
              LocationVariable                         : java.lang.System::err



          NullLiteral                              : null;


        CopyAssignment                           : @(in) = null;
          PassiveExpression                        : @(in);
            FieldReference                           : in;
              LocationVariable                         : java.lang.System::in



          NullLiteral                              : null;


        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.System::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.System::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.System::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.System::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(out) = null;
          PassiveExpression                        : @(out);
            FieldReference                           : out;
              LocationVariable                         : java.lang.System::out



          NullLiteral                              : null;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.System::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.System::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.System::<classPrepared>;
        LocationVariable                         : java.lang.System::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.System::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.System::<classInitialized>;
        LocationVariable                         : java.lang.System::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.System::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.System::<classErroneous>;
        LocationVariable                         : java.lang.System::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.System::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.System::<classInitializationInProgress>;
        LocationVariable                         : java.lang.System::<classInitializationInProgress>



    FieldDeclaration                         : public static   final java.io.InputStream java.lang.System::in;
      Public                                   : public;

      Static                                   : static;

      Final                                    : final;

      TypeRef                                  : java.io.InputStream;
        PackageReference                         : java.io
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : io


        ProgramElementName                       : InputStream


      FieldSpecification                       : java.lang.System::in;
        LocationVariable                         : java.lang.System::in



    FieldDeclaration                         : public static   final java.io.PrintStream java.lang.System::out;
      Public                                   : public;

      Static                                   : static;

      Final                                    : final;

      TypeRef                                  : java.io.PrintStream;
        PackageReference                         : java.io
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : io


        ProgramElementName                       : PrintStream


      FieldSpecification                       : java.lang.System::out;
        LocationVariable                         : java.lang.System::out



    FieldDeclaration                         : public static   final java.io.PrintStream java.lang.System::err;
      Public                                   : public;

      Static                                   : static;

      Final                                    : final;

      TypeRef                                  : java.io.PrintStream;
        PackageReference                         : java.io
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : io


        ProgramElementName                       : PrintStream


      FieldSpecification                       : java.lang.System::err;
        LocationVariable                         : java.lang.System::err



    MethodDeclaration                        : public   static   native void arraycopy (     java.lang.Object src,     int srcPos,     java.lang.Object dest,     int destPos,     int length   );
      Public                                   : public;

      Static                                   : static;

      Native                                   : native;

      ProgramElementName                       : arraycopy

      ParameterDeclaration                     : java.lang.Object src;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : src;
          LocationVariable                         : src



      ParameterDeclaration                     : int srcPos;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : srcPos;
          LocationVariable                         : srcPos



      ParameterDeclaration                     : java.lang.Object dest;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : dest;
          LocationVariable                         : dest



      ParameterDeclaration                     : int destPos;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : destPos;
          LocationVariable                         : destPos



      ParameterDeclaration                     : int length;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : length;
          LocationVariable                         : length




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : exit

      ParameterDeclaration                     : int code;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : code;
          LocationVariable                         : code




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : System;
        ProgramElementName                       : System


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public System <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : System;
        ProgramElementName                       : System


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static System <createObject> (){     System __NEW__;     __NEW__ = System.<allocate>();     __NEW__.<create>()@java.lang.System;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : System;
        ProgramElementName                       : System


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   System __NEW__;   __NEW__ = System.<allocate>();   __NEW__.<create>()@java.lang.System;   return __NEW__; }
        LocalVariableDeclaration                 : System __NEW__;
          TypeRef                                  : System;
            ProgramElementName                       : System


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = System.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : System.<allocate>();
            TypeRef                                  : System;
              ProgramElementName                       : System


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.System;
          TypeRef                                  : java.lang.System;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : System


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Thread.java ======================================================
CompilationUnit                          :  package java.lang;  public class Thread {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Thread::<classPrepared>     static       private boolean java.lang.Thread::<classInitialized>     static       private boolean java.lang.Thread::<classErroneous>     static       private boolean java.lang.Thread::<classInitializationInProgress>     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class Thread {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Thread::<classPrepared>     static       private boolean java.lang.Thread::<classInitialized>     static       private boolean java.lang.Thread::<classErroneous>     static       private boolean java.lang.Thread::<classInitializationInProgress>     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : Thread

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Thread::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Thread::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Thread::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Thread::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Thread::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Thread::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Thread::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Thread::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Thread::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Thread::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Thread::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Thread::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Thread::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Thread::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Thread::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Thread::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Thread::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.Thread::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Thread::<classPrepared>;
        LocationVariable                         : java.lang.Thread::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Thread::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Thread::<classInitialized>;
        LocationVariable                         : java.lang.Thread::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.Thread::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Thread::<classErroneous>;
        LocationVariable                         : java.lang.Thread::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Thread::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Thread::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Thread::<classInitializationInProgress>



    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Thread;
        ProgramElementName                       : Thread


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Thread <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Thread;
        ProgramElementName                       : Thread


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Thread <createObject> (){     Thread __NEW__;     __NEW__ = Thread.<allocate>();     __NEW__.<create>()@java.lang.Thread;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Thread;
        ProgramElementName                       : Thread


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Thread __NEW__;   __NEW__ = Thread.<allocate>();   __NEW__.<create>()@java.lang.Thread;   return __NEW__; }
        LocalVariableDeclaration                 : Thread __NEW__;
          TypeRef                                  : Thread;
            ProgramElementName                       : Thread


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Thread.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Thread.<allocate>();
            TypeRef                                  : Thread;
              ProgramElementName                       : Thread


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Thread;
          TypeRef                                  : java.lang.Thread;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Thread


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Throwable.java ======================================================
CompilationUnit                          :  package java.lang;  public class Throwable extends java.lang.Object implements java.io.Serializable {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     static       private boolean java.lang.Throwable::<classPrepared>     static       private boolean java.lang.Throwable::<classInitialized>     static       private boolean java.lang.Throwable::<classErroneous>     static       private boolean java.lang.Throwable::<classInitializationInProgress>     protected       ghost Throwable java.lang.Throwable::cause = null     protected       ghost String java.lang.Throwable::message = null     Throwable     Throwable     Throwable     Throwable     getMessage     getLocalizedMessage     getCause     initCause     toString     printStackTrace     fillInStackTrace     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class Throwable extends java.lang.Object implements java.io.Serializable {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     static       private boolean java.lang.Throwable::<classPrepared>     static       private boolean java.lang.Throwable::<classInitialized>     static       private boolean java.lang.Throwable::<classErroneous>     static       private boolean java.lang.Throwable::<classInitializationInProgress>     protected       ghost Throwable java.lang.Throwable::cause = null     protected       ghost String java.lang.Throwable::message = null     Throwable     Throwable     Throwable     Throwable     getMessage     getLocalizedMessage     getCause     initCause     toString     printStackTrace     fillInStackTrace     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : Throwable

    Extends                                  : extends java.lang.Object;
      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object



    Implements                               : implements java.io.Serializable;
      TypeRef                                  : java.io.Serializable;
        PackageReference                         : java.io
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : io


        ProgramElementName                       : Serializable



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Throwable::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Throwable::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Throwable::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Throwable::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Throwable::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Throwable::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Throwable::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Throwable::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Throwable::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Throwable::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Throwable::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Throwable::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Throwable::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Throwable::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Throwable::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Throwable::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Throwable::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (java.lang.Throwable arg0){     this.<init>(null, arg0);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   this.<init>(null, arg0); }
        MethodReference                          : this.<init>(null, arg0);
          ThisReference                            : this;

          ProgramElementName                       : <init>

          NullLiteral                              : null;

          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (     java.lang.String arg0,     java.lang.Throwable arg1   ){     super.<init>();     this.cause = null;     this.message = null;     //@ set message = arg0;     ;     //@ set cause = arg1;     ;   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Throwable arg1;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      StatementBlock                           : {   super.<init>();   this.cause = null;   this.message = null;   //@ set message = arg0;   ;   //@ set cause = arg1;   ; }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>


        CopyAssignment                           : this.cause = null;
          FieldReference                           : this.cause;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Throwable::cause


          NullLiteral                              : null;


        CopyAssignment                           : this.message = null;
          FieldReference                           : this.message;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Throwable::message


          NullLiteral                              : null;


        SetStatement                             : //@ set message = arg0;

        EmptyStatement                           : ;

        SetStatement                             : //@ set cause = arg1;

        EmptyStatement                           : ;



    MethodDeclaration                        : public void <init> (java.lang.String arg0){     this.<init>(arg0, null);   }
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   this.<init>(arg0, null); }
        MethodReference                          : this.<init>(arg0, null);
          ThisReference                            : this;

          ProgramElementName                       : <init>

          LocationVariable                         : arg0

          NullLiteral                              : null;




    MethodDeclaration                        : public void <init> (){     super.<init>();     this.cause = null;     this.message = null;   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>();   this.cause = null;   this.message = null; }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>


        CopyAssignment                           : this.cause = null;
          FieldReference                           : this.cause;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Throwable::cause


          NullLiteral                              : null;


        CopyAssignment                           : this.message = null;
          FieldReference                           : this.message;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Throwable::message


          NullLiteral                              : null;




    FieldDeclaration                         : static   private boolean java.lang.Throwable::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Throwable::<classPrepared>;
        LocationVariable                         : java.lang.Throwable::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Throwable::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Throwable::<classInitialized>;
        LocationVariable                         : java.lang.Throwable::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.Throwable::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Throwable::<classErroneous>;
        LocationVariable                         : java.lang.Throwable::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Throwable::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Throwable::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Throwable::<classInitializationInProgress>



    FieldDeclaration                         : protected   ghost Throwable java.lang.Throwable::cause = null;
      Protected                                : protected;

      Ghost                                    : ghost;

      TypeRef                                  : Throwable;
        ProgramElementName                       : Throwable


      FieldSpecification                       : java.lang.Throwable::cause = null;
        LocationVariable                         : java.lang.Throwable::cause

        NullLiteral                              : null;



    FieldDeclaration                         : protected   ghost String java.lang.Throwable::message = null;
      Protected                                : protected;

      Ghost                                    : ghost;

      TypeRef                                  : String;
        ProgramElementName                       : String


      FieldSpecification                       : java.lang.Throwable::message = null;
        LocationVariable                         : java.lang.Throwable::message

        NullLiteral                              : null;



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : Throwable

      StatementBlock                           : {}


    ConstructorDeclaration                   : public Throwable (java.lang.String arg0){     this(arg0, null);   }
      Public                                   : public;

      ProgramElementName                       : Throwable

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   this(arg0, null); }
        ThisConstructorReference                 : this(arg0, null);
          LocationVariable                         : arg0

          NullLiteral                              : null;




    ConstructorDeclaration                   : public Throwable (     java.lang.String arg0,     java.lang.Throwable arg1   ){     //@ set message = arg0;     ;     //@ set cause = arg1;     ;   }
      Public                                   : public;

      ProgramElementName                       : Throwable

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Throwable arg1;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1



      StatementBlock                           : {   //@ set message = arg0;   ;   //@ set cause = arg1;   ; }
        SetStatement                             : //@ set message = arg0;

        EmptyStatement                           : ;

        SetStatement                             : //@ set cause = arg1;

        EmptyStatement                           : ;



    ConstructorDeclaration                   : public Throwable (java.lang.Throwable arg0){     this(null, arg0);   }
      Public                                   : public;

      ProgramElementName                       : Throwable

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   this(null, arg0); }
        ThisConstructorReference                 : this(null, arg0);
          NullLiteral                              : null;

          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : getMessage


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : getLocalizedMessage


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.Throwable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Throwable


      ProgramElementName                       : getCause


    MethodDeclaration                        : public java.lang.Throwable initCause (     java.lang.Throwable arg0   ){     //@ set cause = arg0;     return this;   }
      Public                                   : public;

      TypeRef                                  : java.lang.Throwable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Throwable


      ProgramElementName                       : initCause

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      StatementBlock                           : {   //@ set cause = arg0;   return this; }
        SetStatement                             : //@ set cause = arg0;

        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.String;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : String


      ProgramElementName                       : toString


    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : printStackTrace


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.Throwable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Throwable


      ProgramElementName                       : fillInStackTrace


    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Throwable;
        ProgramElementName                       : Throwable


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();     this.cause = null;     this.message = null;   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>();   this.cause = null;   this.message = null; }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>


        CopyAssignment                           : this.cause = null;
          FieldReference                           : this.cause;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Throwable::cause


          NullLiteral                              : null;


        CopyAssignment                           : this.message = null;
          FieldReference                           : this.message;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Throwable::message


          NullLiteral                              : null;




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();     this.cause = null;     this.message = null;   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>();   this.cause = null;   this.message = null; }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>


        CopyAssignment                           : this.cause = null;
          FieldReference                           : this.cause;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Throwable::cause


          NullLiteral                              : null;


        CopyAssignment                           : this.message = null;
          FieldReference                           : this.message;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Throwable::message


          NullLiteral                              : null;




    MethodDeclaration                        : public Throwable <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Throwable;
        ProgramElementName                       : Throwable


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Throwable <createObject> (){     Throwable __NEW__;     __NEW__ = Throwable.<allocate>();     __NEW__.<create>()@java.lang.Throwable;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Throwable;
        ProgramElementName                       : Throwable


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Throwable __NEW__;   __NEW__ = Throwable.<allocate>();   __NEW__.<create>()@java.lang.Throwable;   return __NEW__; }
        LocalVariableDeclaration                 : Throwable __NEW__;
          TypeRef                                  : Throwable;
            ProgramElementName                       : Throwable


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Throwable.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Throwable.<allocate>();
            TypeRef                                  : Throwable;
              ProgramElementName                       : Throwable


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Throwable;
          TypeRef                                  : java.lang.Throwable;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Throwable


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/util/Collection.java ======================================================
CompilationUnit                          :  package java.util;  public interface Collection extends java.lang.Iterable {     public ghost \seq java.util.Collection::seq     size     isEmpty     add     remove     addAll     removeAll     retainAll     clear     contains     containsAll     iterator     toArray     toArray   };
  PackageSpecification                     :  package java.util;;
    PackageReference                         : java.util
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : util



  InterfaceDeclaration                     : public interface Collection extends java.lang.Iterable {     public ghost \seq java.util.Collection::seq     size     isEmpty     add     remove     addAll     removeAll     retainAll     clear     contains     containsAll     iterator     toArray     toArray   };
    Public                                   : public;

    ProgramElementName                       : Collection

    Extends                                  : extends java.lang.Iterable;
      TypeRef                                  : java.lang.Iterable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Iterable



    FieldDeclaration                         : public ghost \seq java.util.Collection::seq;
      Public                                   : public;

      Ghost                                    : ghost;

      TypeRef                                  : \seq;
        ProgramElementName                       : \seq


      FieldSpecification                       : java.util.Collection::seq;
        LocationVariable                         : java.util.Collection::seq



    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : size


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : isEmpty


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : add

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : remove

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : addAll

      ParameterDeclaration                     : java.util.Collection arg0;
        TypeRef                                  : java.util.Collection;
          PackageReference                         : java.util
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : util


          ProgramElementName                       : Collection


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : removeAll

      ParameterDeclaration                     : java.util.Collection arg0;
        TypeRef                                  : java.util.Collection;
          PackageReference                         : java.util
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : util


          ProgramElementName                       : Collection


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : retainAll

      ParameterDeclaration                     : java.util.Collection arg0;
        TypeRef                                  : java.util.Collection;
          PackageReference                         : java.util
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : util


          ProgramElementName                       : Collection


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : clear


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : contains

      ParameterDeclaration                     : String arg0;
        TypeRef                                  : String;
          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : containsAll

      ParameterDeclaration                     : java.util.Collection arg0;
        TypeRef                                  : java.util.Collection;
          PackageReference                         : java.util
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : util


          ProgramElementName                       : Collection


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.util.Iterator;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : Iterator


      ProgramElementName                       : iterator


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.Object[];
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object


      ProgramElementName                       : toArray


    MethodDeclaration                        : public java.lang.Object[] toArray (     java.lang.Object[] arg0   );
      Public                                   : public;

      TypeRef                                  : java.lang.Object[];
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object


      ProgramElementName                       : toArray

      ParameterDeclaration                     : java.lang.Object[] arg0;
        TypeRef                                  : java.lang.Object[];
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/util/Iterator.java ======================================================
CompilationUnit                          :  package java.util;  public interface Iterator {     hasNext     next     remove   };
  PackageSpecification                     :  package java.util;;
    PackageReference                         : java.util
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : util



  InterfaceDeclaration                     : public interface Iterator {     hasNext     next     remove   };
    Public                                   : public;

    ProgramElementName                       : Iterator

    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : hasNext


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : Object;
        ProgramElementName                       : Object


      ProgramElementName                       : next


    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : remove





=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/util/List.java ======================================================
CompilationUnit                          :  package java.util;  public interface List extends java.util.Collection {     add     addAll     get     set     indexOf     lastIndexOf     listIterator     listIterator     subList   };
  PackageSpecification                     :  package java.util;;
    PackageReference                         : java.util
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : util



  InterfaceDeclaration                     : public interface List extends java.util.Collection {     add     addAll     get     set     indexOf     lastIndexOf     listIterator     listIterator     subList   };
    Public                                   : public;

    ProgramElementName                       : List

    Extends                                  : extends java.util.Collection;
      TypeRef                                  : java.util.Collection;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : Collection



    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : add

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Object arg1;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : public boolean addAll (     int arg0,     java.util.Collection arg1   );
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : addAll

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.util.Collection arg1;
        TypeRef                                  : java.util.Collection;
          PackageReference                         : java.util
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : util


          ProgramElementName                       : Collection


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object


      ProgramElementName                       : get

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : public java.lang.Object set (     int arg0,     java.lang.Object arg1   );
      Public                                   : public;

      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object


      ProgramElementName                       : set

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Object arg1;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : indexOf

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : lastIndexOf

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.util.ListIterator;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : ListIterator


      ProgramElementName                       : listIterator


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.util.ListIterator;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : ListIterator


      ProgramElementName                       : listIterator

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.util.List;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : List


      ProgramElementName                       : subList

      ParameterDeclaration                     : int arg0;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : int arg1;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/util/ListIterator.java ======================================================
CompilationUnit                          :  package java.util;  public interface ListIterator extends java.util.Iterator {     public ghost \bigint java.util.ListIterator::index     public ghost \seq java.util.ListIterator::seq     hasNext     next     hasPrevious     previous     nextIndex     previousIndex     remove     set     add   };
  PackageSpecification                     :  package java.util;;
    PackageReference                         : java.util
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : util



  InterfaceDeclaration                     : public interface ListIterator extends java.util.Iterator {     public ghost \bigint java.util.ListIterator::index     public ghost \seq java.util.ListIterator::seq     hasNext     next     hasPrevious     previous     nextIndex     previousIndex     remove     set     add   };
    Public                                   : public;

    ProgramElementName                       : ListIterator

    Extends                                  : extends java.util.Iterator;
      TypeRef                                  : java.util.Iterator;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : Iterator



    FieldDeclaration                         : public ghost \bigint java.util.ListIterator::index;
      Public                                   : public;

      Ghost                                    : ghost;

      TypeRef                                  : \bigint;
        ProgramElementName                       : \bigint


      FieldSpecification                       : java.util.ListIterator::index;
        LocationVariable                         : java.util.ListIterator::index



    FieldDeclaration                         : public ghost \seq java.util.ListIterator::seq;
      Public                                   : public;

      Ghost                                    : ghost;

      TypeRef                                  : \seq;
        ProgramElementName                       : \seq


      FieldSpecification                       : java.util.ListIterator::seq;
        LocationVariable                         : java.util.ListIterator::seq



    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : hasNext


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : Object;
        ProgramElementName                       : Object


      ProgramElementName                       : next


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : hasPrevious


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object


      ProgramElementName                       : previous


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : nextIndex


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : previousIndex


    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : remove


    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : set

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : add

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Long.java ======================================================
CompilationUnit                          :  package java.lang;  public   final class Long implements java.lang.Comparable {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Long::<classPrepared>     static       private boolean java.lang.Long::<classInitialized>     static       private boolean java.lang.Long::<classErroneous>     static       private boolean java.lang.Long::<classInitializationInProgress>     public final       static long java.lang.Long::MIN_VALUE = -9223372036854775808L     public final       static long java.lang.Long::MAX_VALUE = 9223372036854775807L     public final       static java.lang.Class java.lang.Long::TYPE     public final static int java.lang.Long::SIZE = 64     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public   final class Long implements java.lang.Comparable {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Long::<classPrepared>     static       private boolean java.lang.Long::<classInitialized>     static       private boolean java.lang.Long::<classErroneous>     static       private boolean java.lang.Long::<classInitializationInProgress>     public final       static long java.lang.Long::MIN_VALUE = -9223372036854775808L     public final       static long java.lang.Long::MAX_VALUE = 9223372036854775807L     public final       static java.lang.Class java.lang.Long::TYPE     public final static int java.lang.Long::SIZE = 64     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : Long

    Implements                               : implements java.lang.Comparable;
      TypeRef                                  : java.lang.Comparable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Comparable



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Long::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Long::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Long::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Long::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Long::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Long::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Long::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Long::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Long::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Long::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Long::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Long::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(TYPE) = null;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(TYPE) = null;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Long::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Long::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(TYPE) = null;
          PassiveExpression                        : @(TYPE);
            FieldReference                           : TYPE;
              LocationVariable                         : java.lang.Long::TYPE



          NullLiteral                              : null;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Long::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Long::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Long::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static private boolean java.lang.Long::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Long::<classPrepared>;
        LocationVariable                         : java.lang.Long::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Long::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Long::<classInitialized>;
        LocationVariable                         : java.lang.Long::<classInitialized>



    FieldDeclaration                         : static private boolean java.lang.Long::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Long::<classErroneous>;
        LocationVariable                         : java.lang.Long::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Long::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Long::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Long::<classInitializationInProgress>



    FieldDeclaration                         : public final   static long java.lang.Long::MIN_VALUE = -9223372036854775808L;
      Public                                   : public;

      Final                                    : final;

      Static                                   : static;

      TypeRef                                  : long;
        ProgramElementName                       : long


      FieldSpecification                       : java.lang.Long::MIN_VALUE = -9223372036854775808L;
        ProgramConstant                          : java.lang.Long::MIN_VALUE

        LongLiteral                              : -9223372036854775808L



    FieldDeclaration                         : public final   static long java.lang.Long::MAX_VALUE = 9223372036854775807L;
      Public                                   : public;

      Final                                    : final;

      Static                                   : static;

      TypeRef                                  : long;
        ProgramElementName                       : long


      FieldSpecification                       : java.lang.Long::MAX_VALUE = 9223372036854775807L;
        ProgramConstant                          : java.lang.Long::MAX_VALUE

        LongLiteral                              : 9223372036854775807L



    FieldDeclaration                         : public final   static java.lang.Class java.lang.Long::TYPE;
      Public                                   : public;

      Final                                    : final;

      Static                                   : static;

      TypeRef                                  : java.lang.Class;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Class


      FieldSpecification                       : java.lang.Long::TYPE;
        LocationVariable                         : java.lang.Long::TYPE



    FieldDeclaration                         : public final static int java.lang.Long::SIZE = 64;
      Public                                   : public;

      Final                                    : final;

      Static                                   : static;

      TypeRef                                  : int;
        ProgramElementName                       : int


      FieldSpecification                       : java.lang.Long::SIZE = 64;
        ProgramConstant                          : java.lang.Long::SIZE

        IntLiteral                               : 64



    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Long;
        ProgramElementName                       : Long


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Long <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Long;
        ProgramElementName                       : Long


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Long <createObject> (){     Long __NEW__;     __NEW__ = Long.<allocate>();     __NEW__.<create>()@java.lang.Long;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Long;
        ProgramElementName                       : Long


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Long __NEW__;   __NEW__ = Long.<allocate>();   __NEW__.<create>()@java.lang.Long;   return __NEW__; }
        LocalVariableDeclaration                 : Long __NEW__;
          TypeRef                                  : Long;
            ProgramElementName                       : Long


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Long.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Long.<allocate>();
            TypeRef                                  : Long;
              ProgramElementName                       : Long


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Long;
          TypeRef                                  : java.lang.Long;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Long


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/lang/Boolean.java ======================================================
CompilationUnit                          :  package java.lang;  public class Boolean {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Boolean::<classPrepared>     static       private boolean java.lang.Boolean::<classInitialized>     static       private boolean java.lang.Boolean::<classErroneous>     static       private boolean java.lang.Boolean::<classInitializationInProgress>     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.lang;;
    PackageReference                         : java.lang
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : lang



  ClassDeclaration                         : public class Boolean {     <clinit>     <clprepare>     <init>     static       private boolean java.lang.Boolean::<classPrepared>     static       private boolean java.lang.Boolean::<classInitialized>     static       private boolean java.lang.Boolean::<classErroneous>     static       private boolean java.lang.Boolean::<classInitializationInProgress>     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : Boolean

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.lang.Boolean::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.lang.Boolean::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.lang.Boolean::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Boolean::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Boolean::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Boolean::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Boolean::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.lang.Boolean::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.lang.Boolean::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.lang.Boolean::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.lang.Boolean::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.lang.Boolean::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.lang.Boolean::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.lang.Boolean::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Boolean::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.lang.Boolean::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.lang.Boolean::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.lang.Boolean::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Boolean::<classPrepared>;
        LocationVariable                         : java.lang.Boolean::<classPrepared>



    FieldDeclaration                         : static   private boolean java.lang.Boolean::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Boolean::<classInitialized>;
        LocationVariable                         : java.lang.Boolean::<classInitialized>



    FieldDeclaration                         : static   private boolean java.lang.Boolean::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Boolean::<classErroneous>;
        LocationVariable                         : java.lang.Boolean::<classErroneous>



    FieldDeclaration                         : static   private boolean java.lang.Boolean::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.lang.Boolean::<classInitializationInProgress>;
        LocationVariable                         : java.lang.Boolean::<classInitializationInProgress>



    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Boolean;
        ProgramElementName                       : Boolean


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Boolean <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Boolean;
        ProgramElementName                       : Boolean


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Boolean <createObject> (){     Boolean __NEW__;     __NEW__ = Boolean.<allocate>();     __NEW__.<create>()@java.lang.Boolean;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Boolean;
        ProgramElementName                       : Boolean


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Boolean __NEW__;   __NEW__ = Boolean.<allocate>();   __NEW__.<create>()@java.lang.Boolean;   return __NEW__; }
        LocalVariableDeclaration                 : Boolean __NEW__;
          TypeRef                                  : Boolean;
            ProgramElementName                       : Boolean


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Boolean.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Boolean.<allocate>();
            TypeRef                                  : Boolean;
              ProgramElementName                       : Boolean


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.lang.Boolean;
          TypeRef                                  : java.lang.Boolean;
            PackageReference                         : java.lang
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : lang


            ProgramElementName                       : Boolean


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/util/Map.java ======================================================
CompilationUnit                          :  package java.util;  public interface Map {     public ghost \seq java.util.Map::value_seq     public ghost \seq java.util.Map::key_seq     keySet     size     isEmpty     containsKey     containsValue     get     put     remove     putAll     clear     values     entrySet     equals     hashCode   };
  PackageSpecification                     :  package java.util;;
    PackageReference                         : java.util
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : util



  InterfaceDeclaration                     : public interface Map {     public ghost \seq java.util.Map::value_seq     public ghost \seq java.util.Map::key_seq     keySet     size     isEmpty     containsKey     containsValue     get     put     remove     putAll     clear     values     entrySet     equals     hashCode   };
    Public                                   : public;

    ProgramElementName                       : Map

    FieldDeclaration                         : public ghost \seq java.util.Map::value_seq;
      Public                                   : public;

      Ghost                                    : ghost;

      TypeRef                                  : \seq;
        ProgramElementName                       : \seq


      FieldSpecification                       : java.util.Map::value_seq;
        LocationVariable                         : java.util.Map::value_seq



    FieldDeclaration                         : public ghost \seq java.util.Map::key_seq;
      Public                                   : public;

      Ghost                                    : ghost;

      TypeRef                                  : \seq;
        ProgramElementName                       : \seq


      FieldSpecification                       : java.util.Map::key_seq;
        LocationVariable                         : java.util.Map::key_seq



    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.util.Set;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : Set


      ProgramElementName                       : keySet


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : size


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : isEmpty


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : containsKey

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : containsValue

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object


      ProgramElementName                       : get

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : public java.lang.Object put (     java.lang.Object arg0,     java.lang.Object arg1   );
      Public                                   : public;

      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object


      ProgramElementName                       : put

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Object arg1;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.Object;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object


      ProgramElementName                       : remove

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : putAll

      ParameterDeclaration                     : java.util.Map arg0;
        TypeRef                                  : java.util.Map;
          PackageReference                         : java.util
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : util


          ProgramElementName                       : Map


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : clear


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.util.Collection;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : Collection


      ProgramElementName                       : values


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.util.Set;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : Set


      ProgramElementName                       : entrySet


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : equals

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : hashCode





=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/util/Set.java ======================================================
CompilationUnit                          :  package java.util;  public interface Set extends java.util.Collection {     size     isEmpty     contains     iterator     toArray     toArray     add     remove     containsAll     addAll     retainAll     removeAll     clear     equals     hashCode   };
  PackageSpecification                     :  package java.util;;
    PackageReference                         : java.util
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : util



  InterfaceDeclaration                     : public interface Set extends java.util.Collection {     size     isEmpty     contains     iterator     toArray     toArray     add     remove     containsAll     addAll     retainAll     removeAll     clear     equals     hashCode   };
    Public                                   : public;

    ProgramElementName                       : Set

    Extends                                  : extends java.util.Collection;
      TypeRef                                  : java.util.Collection;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : Collection



    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : size


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : isEmpty


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : contains

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.util.Iterator;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : Iterator


      ProgramElementName                       : iterator


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : java.lang.Object[];
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object


      ProgramElementName                       : toArray


    MethodDeclaration                        : public java.lang.Object[] toArray (     java.lang.Object[] arg0   );
      Public                                   : public;

      TypeRef                                  : java.lang.Object[];
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Object


      ProgramElementName                       : toArray

      ParameterDeclaration                     : java.lang.Object[] arg0;
        TypeRef                                  : java.lang.Object[];
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : add

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : remove

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : containsAll

      ParameterDeclaration                     : java.util.Collection arg0;
        TypeRef                                  : java.util.Collection;
          PackageReference                         : java.util
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : util


          ProgramElementName                       : Collection


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : addAll

      ParameterDeclaration                     : java.util.Collection arg0;
        TypeRef                                  : java.util.Collection;
          PackageReference                         : java.util
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : util


          ProgramElementName                       : Collection


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : retainAll

      ParameterDeclaration                     : java.util.Collection arg0;
        TypeRef                                  : java.util.Collection;
          PackageReference                         : java.util
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : util


          ProgramElementName                       : Collection


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : removeAll

      ParameterDeclaration                     : java.util.Collection arg0;
        TypeRef                                  : java.util.Collection;
          PackageReference                         : java.util
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : util


          ProgramElementName                       : Collection


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : clear


    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : equals

      ParameterDeclaration                     : java.lang.Object arg0;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : hashCode





=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/io/FilterOutputStream.java ======================================================
CompilationUnit                          :  package java.io;  public class FilterOutputStream extends java.io.OutputStream {     <clinit>     <clprepare>     <init>     static       private boolean java.io.FilterOutputStream::<classPrepared>     static       private boolean java.io.FilterOutputStream::<classInitialized>     static       private boolean java.io.FilterOutputStream::<classErroneous>     static       private boolean java.io.FilterOutputStream::<classInitializationInProgress>     protected java.io.OutputStream java.io.FilterOutputStream::out     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.io;;
    PackageReference                         : java.io
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : io



  ClassDeclaration                         : public class FilterOutputStream extends java.io.OutputStream {     <clinit>     <clprepare>     <init>     static       private boolean java.io.FilterOutputStream::<classPrepared>     static       private boolean java.io.FilterOutputStream::<classInitialized>     static       private boolean java.io.FilterOutputStream::<classErroneous>     static       private boolean java.io.FilterOutputStream::<classInitializationInProgress>     protected java.io.OutputStream java.io.FilterOutputStream::out     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : FilterOutputStream

    Extends                                  : extends java.io.OutputStream;
      TypeRef                                  : java.io.OutputStream;
        PackageReference                         : java.io
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : io


        ProgramElementName                       : OutputStream



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.io.OutputStream.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.io.OutputStream.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.io.OutputStream.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.io.FilterOutputStream::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.io.OutputStream.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.io.OutputStream.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.io.OutputStream.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.io.FilterOutputStream::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.io.OutputStream.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.io.OutputStream.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.io.FilterOutputStream::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.io.FilterOutputStream::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.io.FilterOutputStream::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.io.OutputStream.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.io.OutputStream.<clinit>()); }
                        PassiveExpression                        : @(java.io.OutputStream.<clinit>());
                          MethodReference                          : java.io.OutputStream.<clinit>();
                            TypeRef                                  : java.io.OutputStream;
                              PackageReference                         : java.io
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : io


                              ProgramElementName                       : OutputStream


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.io.FilterOutputStream::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.io.FilterOutputStream::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.io.FilterOutputStream::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.io.FilterOutputStream::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.io.FilterOutputStream::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.io.FilterOutputStream::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.io.FilterOutputStream::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.io.FilterOutputStream::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.io.FilterOutputStream::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.io.FilterOutputStream::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.io.FilterOutputStream::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.io.FilterOutputStream::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.io.FilterOutputStream::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.FilterOutputStream::<classPrepared>;
        LocationVariable                         : java.io.FilterOutputStream::<classPrepared>



    FieldDeclaration                         : static   private boolean java.io.FilterOutputStream::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.FilterOutputStream::<classInitialized>;
        LocationVariable                         : java.io.FilterOutputStream::<classInitialized>



    FieldDeclaration                         : static   private boolean java.io.FilterOutputStream::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.FilterOutputStream::<classErroneous>;
        LocationVariable                         : java.io.FilterOutputStream::<classErroneous>



    FieldDeclaration                         : static   private boolean java.io.FilterOutputStream::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.FilterOutputStream::<classInitializationInProgress>;
        LocationVariable                         : java.io.FilterOutputStream::<classInitializationInProgress>



    FieldDeclaration                         : protected java.io.OutputStream java.io.FilterOutputStream::out;
      Protected                                : protected;

      TypeRef                                  : java.io.OutputStream;
        PackageReference                         : java.io
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : io


        ProgramElementName                       : OutputStream


      FieldSpecification                       : java.io.FilterOutputStream::out;
        LocationVariable                         : java.io.FilterOutputStream::out



    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : FilterOutputStream;
        ProgramElementName                       : FilterOutputStream


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();     this.out = null;   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>();   this.out = null; }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>


        CopyAssignment                           : this.out = null;
          FieldReference                           : this.out;
            ThisReference                            : this;

            LocationVariable                         : java.io.FilterOutputStream::out


          NullLiteral                              : null;




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();     this.out = null;   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>();   this.out = null; }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>


        CopyAssignment                           : this.out = null;
          FieldReference                           : this.out;
            ThisReference                            : this;

            LocationVariable                         : java.io.FilterOutputStream::out


          NullLiteral                              : null;




    MethodDeclaration                        : public FilterOutputStream <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : FilterOutputStream;
        ProgramElementName                       : FilterOutputStream


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static FilterOutputStream <createObject> (){     FilterOutputStream __NEW__;     __NEW__ = FilterOutputStream.<allocate>();     __NEW__.<create>()@java.io.FilterOutputStream;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : FilterOutputStream;
        ProgramElementName                       : FilterOutputStream


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   FilterOutputStream __NEW__;   __NEW__ = FilterOutputStream.<allocate>();   __NEW__.<create>()@java.io.FilterOutputStream;   return __NEW__; }
        LocalVariableDeclaration                 : FilterOutputStream __NEW__;
          TypeRef                                  : FilterOutputStream;
            ProgramElementName                       : FilterOutputStream


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = FilterOutputStream.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : FilterOutputStream.<allocate>();
            TypeRef                                  : FilterOutputStream;
              ProgramElementName                       : FilterOutputStream


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.io.FilterOutputStream;
          TypeRef                                  : java.io.FilterOutputStream;
            PackageReference                         : java.io
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : io


            ProgramElementName                       : FilterOutputStream


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/io/InputStream.java ======================================================
CompilationUnit                          :  package java.io;  public class InputStream {     <clinit>     <clprepare>     <init>     static       private boolean java.io.InputStream::<classPrepared>     static       private boolean java.io.InputStream::<classInitialized>     static       private boolean java.io.InputStream::<classErroneous>     static       private boolean java.io.InputStream::<classInitializationInProgress>     InputStream     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.io;;
    PackageReference                         : java.io
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : io



  ClassDeclaration                         : public class InputStream {     <clinit>     <clprepare>     <init>     static       private boolean java.io.InputStream::<classPrepared>     static       private boolean java.io.InputStream::<classInitialized>     static       private boolean java.io.InputStream::<classErroneous>     static       private boolean java.io.InputStream::<classInitializationInProgress>     InputStream     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : InputStream

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.io.InputStream::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.io.InputStream::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.io.InputStream::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.io.InputStream::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.io.InputStream::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.io.InputStream::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.io.InputStream::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.io.InputStream::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.io.InputStream::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.io.InputStream::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.io.InputStream::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.io.InputStream::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.io.InputStream::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.io.InputStream::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.io.InputStream::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.io.InputStream::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.io.InputStream::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>


    FieldDeclaration                         : static   private boolean java.io.InputStream::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.InputStream::<classPrepared>;
        LocationVariable                         : java.io.InputStream::<classPrepared>



    FieldDeclaration                         : static   private boolean java.io.InputStream::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.InputStream::<classInitialized>;
        LocationVariable                         : java.io.InputStream::<classInitialized>



    FieldDeclaration                         : static   private boolean java.io.InputStream::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.InputStream::<classErroneous>;
        LocationVariable                         : java.io.InputStream::<classErroneous>



    FieldDeclaration                         : static   private boolean java.io.InputStream::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.InputStream::<classInitializationInProgress>;
        LocationVariable                         : java.io.InputStream::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : InputStream


    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : InputStream;
        ProgramElementName                       : InputStream


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public InputStream <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : InputStream;
        ProgramElementName                       : InputStream


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static InputStream <createObject> (){     InputStream __NEW__;     __NEW__ = InputStream.<allocate>();     __NEW__.<create>()@java.io.InputStream;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : InputStream;
        ProgramElementName                       : InputStream


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   InputStream __NEW__;   __NEW__ = InputStream.<allocate>();   __NEW__.<create>()@java.io.InputStream;   return __NEW__; }
        LocalVariableDeclaration                 : InputStream __NEW__;
          TypeRef                                  : InputStream;
            ProgramElementName                       : InputStream


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = InputStream.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : InputStream.<allocate>();
            TypeRef                                  : InputStream;
              ProgramElementName                       : InputStream


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.io.InputStream;
          TypeRef                                  : java.io.InputStream;
            PackageReference                         : java.io
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : io


            ProgramElementName                       : InputStream


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/io/IOException.java ======================================================
CompilationUnit                          :  package java.io;  public class IOException extends java.lang.Exception {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     static       private boolean java.io.IOException::<classPrepared>     static       private boolean java.io.IOException::<classInitialized>     static       private boolean java.io.IOException::<classErroneous>     static       private boolean java.io.IOException::<classInitializationInProgress>     IOException     IOException     IOException     IOException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.io;;
    PackageReference                         : java.io
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : io



  ClassDeclaration                         : public class IOException extends java.lang.Exception {     <clinit>     <clprepare>     <init>     <init>     <init>     <init>     static       private boolean java.io.IOException::<classPrepared>     static       private boolean java.io.IOException::<classInitialized>     static       private boolean java.io.IOException::<classErroneous>     static       private boolean java.io.IOException::<classInitializationInProgress>     IOException     IOException     IOException     IOException     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : IOException

    Extends                                  : extends java.lang.Exception;
      TypeRef                                  : java.lang.Exception;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Exception



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Exception.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Exception.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Exception.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.io.IOException::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Exception.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Exception.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Exception.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.io.IOException::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Exception.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Exception.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.io.IOException::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.io.IOException::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.io.IOException::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Exception.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Exception.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Exception.<clinit>());
                          MethodReference                          : java.lang.Exception.<clinit>();
                            TypeRef                                  : java.lang.Exception;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Exception


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.io.IOException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.io.IOException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.io.IOException::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.io.IOException::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.io.IOException::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.io.IOException::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.io.IOException::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.io.IOException::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.io.IOException::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.io.IOException::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.io.IOException::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.io.IOException::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : public void <init> (     java.lang.String arg0,     java.lang.Throwable arg1   );
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Throwable arg1;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>


    FieldDeclaration                         : static   private boolean java.io.IOException::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.IOException::<classPrepared>;
        LocationVariable                         : java.io.IOException::<classPrepared>



    FieldDeclaration                         : static   private boolean java.io.IOException::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.IOException::<classInitialized>;
        LocationVariable                         : java.io.IOException::<classInitialized>



    FieldDeclaration                         : static   private boolean java.io.IOException::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.IOException::<classErroneous>;
        LocationVariable                         : java.io.IOException::<classErroneous>



    FieldDeclaration                         : static   private boolean java.io.IOException::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.IOException::<classInitializationInProgress>;
        LocationVariable                         : java.io.IOException::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : IOException


    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : IOException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    ConstructorDeclaration                   : public IOException (     java.lang.String arg0,     java.lang.Throwable arg1   );
      Public                                   : public;

      ProgramElementName                       : IOException

      ParameterDeclaration                     : java.lang.String arg0;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0



      ParameterDeclaration                     : java.lang.Throwable arg1;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg1;
          LocationVariable                         : arg1




    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : IOException

      ParameterDeclaration                     : java.lang.Throwable arg0;
        TypeRef                                  : java.lang.Throwable;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Throwable


        VariableSpecification                    : arg0;
          LocationVariable                         : arg0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : IOException;
        ProgramElementName                       : IOException


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public IOException <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : IOException;
        ProgramElementName                       : IOException


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static IOException <createObject> (){     IOException __NEW__;     __NEW__ = IOException.<allocate>();     __NEW__.<create>()@java.io.IOException;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : IOException;
        ProgramElementName                       : IOException


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   IOException __NEW__;   __NEW__ = IOException.<allocate>();   __NEW__.<create>()@java.io.IOException;   return __NEW__; }
        LocalVariableDeclaration                 : IOException __NEW__;
          TypeRef                                  : IOException;
            ProgramElementName                       : IOException


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = IOException.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : IOException.<allocate>();
            TypeRef                                  : IOException;
              ProgramElementName                       : IOException


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.io.IOException;
          TypeRef                                  : java.io.IOException;
            PackageReference                         : java.io
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : io


            ProgramElementName                       : IOException


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/io/OutputStream.java ======================================================
CompilationUnit                          :  package java.io;  public class OutputStream {     <clinit>     <clprepare>     <init>     static       private boolean java.io.OutputStream::<classPrepared>     static       private boolean java.io.OutputStream::<classInitialized>     static       private boolean java.io.OutputStream::<classErroneous>     static       private boolean java.io.OutputStream::<classInitializationInProgress>     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.io;;
    PackageReference                         : java.io
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : io



  ClassDeclaration                         : public class OutputStream {     <clinit>     <clprepare>     <init>     static       private boolean java.io.OutputStream::<classPrepared>     static       private boolean java.io.OutputStream::<classInitialized>     static       private boolean java.io.OutputStream::<classErroneous>     static       private boolean java.io.OutputStream::<classInitializationInProgress>     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : OutputStream

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.io.OutputStream::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.io.OutputStream::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.io.OutputStream::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.io.OutputStream::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.io.OutputStream::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.io.OutputStream::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.io.OutputStream::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.io.OutputStream::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.io.OutputStream::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.io.OutputStream::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.io.OutputStream::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.io.OutputStream::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.io.OutputStream::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.io.OutputStream::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.io.OutputStream::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.io.OutputStream::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.io.OutputStream::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.io.OutputStream::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.OutputStream::<classPrepared>;
        LocationVariable                         : java.io.OutputStream::<classPrepared>



    FieldDeclaration                         : static   private boolean java.io.OutputStream::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.OutputStream::<classInitialized>;
        LocationVariable                         : java.io.OutputStream::<classInitialized>



    FieldDeclaration                         : static   private boolean java.io.OutputStream::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.OutputStream::<classErroneous>;
        LocationVariable                         : java.io.OutputStream::<classErroneous>



    FieldDeclaration                         : static   private boolean java.io.OutputStream::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.OutputStream::<classInitializationInProgress>;
        LocationVariable                         : java.io.OutputStream::<classInitializationInProgress>



    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : OutputStream;
        ProgramElementName                       : OutputStream


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public OutputStream <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : OutputStream;
        ProgramElementName                       : OutputStream


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static OutputStream <createObject> (){     OutputStream __NEW__;     __NEW__ = OutputStream.<allocate>();     __NEW__.<create>()@java.io.OutputStream;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : OutputStream;
        ProgramElementName                       : OutputStream


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   OutputStream __NEW__;   __NEW__ = OutputStream.<allocate>();   __NEW__.<create>()@java.io.OutputStream;   return __NEW__; }
        LocalVariableDeclaration                 : OutputStream __NEW__;
          TypeRef                                  : OutputStream;
            ProgramElementName                       : OutputStream


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = OutputStream.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : OutputStream.<allocate>();
            TypeRef                                  : OutputStream;
              ProgramElementName                       : OutputStream


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.io.OutputStream;
          TypeRef                                  : java.io.OutputStream;
            PackageReference                         : java.io
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : io


            ProgramElementName                       : OutputStream


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/io/PrintStream.java ======================================================
CompilationUnit                          :  package java.io;  public class PrintStream extends java.io.FilterOutputStream {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.io.PrintStream::<classPrepared>     static       private boolean java.io.PrintStream::<classInitialized>     static       private boolean java.io.PrintStream::<classErroneous>     static       private boolean java.io.PrintStream::<classInitializationInProgress>     PrintStream     PrintStream     print     print     print     print     print     print     print     printf     println     println     println     println     println     println     println     println     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.io;;
    PackageReference                         : java.io
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : io



  ClassDeclaration                         : public class PrintStream extends java.io.FilterOutputStream {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.io.PrintStream::<classPrepared>     static       private boolean java.io.PrintStream::<classInitialized>     static       private boolean java.io.PrintStream::<classErroneous>     static       private boolean java.io.PrintStream::<classInitializationInProgress>     PrintStream     PrintStream     print     print     print     print     print     print     print     printf     println     println     println     println     println     println     println     println     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : PrintStream

    Extends                                  : extends java.io.FilterOutputStream;
      TypeRef                                  : java.io.FilterOutputStream;
        PackageReference                         : java.io
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : io


        ProgramElementName                       : FilterOutputStream



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.io.FilterOutputStream.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.io.FilterOutputStream.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.io.FilterOutputStream.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.io.PrintStream::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.io.FilterOutputStream.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.io.FilterOutputStream.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.io.FilterOutputStream.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.io.PrintStream::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.io.FilterOutputStream.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.io.FilterOutputStream.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.io.PrintStream::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.io.PrintStream::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.io.PrintStream::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.io.FilterOutputStream.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.io.FilterOutputStream.<clinit>()); }
                        PassiveExpression                        : @(java.io.FilterOutputStream.<clinit>());
                          MethodReference                          : java.io.FilterOutputStream.<clinit>();
                            TypeRef                                  : java.io.FilterOutputStream;
                              PackageReference                         : java.io
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : io


                              ProgramElementName                       : FilterOutputStream


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.io.PrintStream::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.io.PrintStream::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.io.PrintStream::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.io.PrintStream::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.io.PrintStream::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.io.PrintStream::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.io.PrintStream::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.io.PrintStream::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.io.PrintStream::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.io.PrintStream::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.io.PrintStream::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.io.PrintStream::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (     java.io.OutputStream out,     boolean autoFlush   );
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.io.OutputStream out;
        TypeRef                                  : java.io.OutputStream;
          PackageReference                         : java.io
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : io


          ProgramElementName                       : OutputStream


        VariableSpecification                    : out;
          LocationVariable                         : out



      ParameterDeclaration                     : boolean autoFlush;
        TypeRef                                  : boolean;
          ProgramElementName                       : boolean


        VariableSpecification                    : autoFlush;
          LocationVariable                         : autoFlush




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : java.io.OutputStream out;
        TypeRef                                  : java.io.OutputStream;
          PackageReference                         : java.io
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : io


          ProgramElementName                       : OutputStream


        VariableSpecification                    : out;
          LocationVariable                         : out




    FieldDeclaration                         : static   private boolean java.io.PrintStream::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.PrintStream::<classPrepared>;
        LocationVariable                         : java.io.PrintStream::<classPrepared>



    FieldDeclaration                         : static   private boolean java.io.PrintStream::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.PrintStream::<classInitialized>;
        LocationVariable                         : java.io.PrintStream::<classInitialized>



    FieldDeclaration                         : static   private boolean java.io.PrintStream::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.PrintStream::<classErroneous>;
        LocationVariable                         : java.io.PrintStream::<classErroneous>



    FieldDeclaration                         : static   private boolean java.io.PrintStream::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.io.PrintStream::<classInitializationInProgress>;
        LocationVariable                         : java.io.PrintStream::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : PrintStream

      ParameterDeclaration                     : java.io.OutputStream out;
        TypeRef                                  : java.io.OutputStream;
          PackageReference                         : java.io
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : io


          ProgramElementName                       : OutputStream


        VariableSpecification                    : out;
          LocationVariable                         : out




    ConstructorDeclaration                   : public PrintStream (     java.io.OutputStream out,     boolean autoFlush   );
      Public                                   : public;

      ProgramElementName                       : PrintStream

      ParameterDeclaration                     : java.io.OutputStream out;
        TypeRef                                  : java.io.OutputStream;
          PackageReference                         : java.io
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : io


          ProgramElementName                       : OutputStream


        VariableSpecification                    : out;
          LocationVariable                         : out



      ParameterDeclaration                     : boolean autoFlush;
        TypeRef                                  : boolean;
          ProgramElementName                       : boolean


        VariableSpecification                    : autoFlush;
          LocationVariable                         : autoFlush




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : print

      ParameterDeclaration                     : boolean b;
        TypeRef                                  : boolean;
          ProgramElementName                       : boolean


        VariableSpecification                    : b;
          LocationVariable                         : b




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : print

      ParameterDeclaration                     : char c;
        TypeRef                                  : char;
          ProgramElementName                       : char


        VariableSpecification                    : c;
          LocationVariable                         : c




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : print

      ParameterDeclaration                     : int i;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : i;
          LocationVariable                         : i




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : print

      ParameterDeclaration                     : long l;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : l;
          LocationVariable                         : l




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : print

      ParameterDeclaration                     : char[] s;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : s;
          LocationVariable                         : s




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : print

      ParameterDeclaration                     : java.lang.String s;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : s;
          LocationVariable                         : s




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : print

      ParameterDeclaration                     : java.lang.Object obj;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : obj;
          LocationVariable                         : obj




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : printf

      ParameterDeclaration                     : java.lang.String s;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : s;
          LocationVariable                         : s



      ParameterDeclaration                     : Object args;
        TypeRef                                  : Object;
          ProgramElementName                       : Object


        VariableSpecification                    : args;
          LocationVariable                         : args




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : println


    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : println

      ParameterDeclaration                     : boolean x;
        TypeRef                                  : boolean;
          ProgramElementName                       : boolean


        VariableSpecification                    : x;
          LocationVariable                         : x




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : println

      ParameterDeclaration                     : char x;
        TypeRef                                  : char;
          ProgramElementName                       : char


        VariableSpecification                    : x;
          LocationVariable                         : x




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : println

      ParameterDeclaration                     : int x;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : x;
          LocationVariable                         : x




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : println

      ParameterDeclaration                     : long x;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : x;
          LocationVariable                         : x




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : println

      ParameterDeclaration                     : char[] x;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : x;
          LocationVariable                         : x




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : println

      ParameterDeclaration                     : java.lang.String x;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : x;
          LocationVariable                         : x




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : println

      ParameterDeclaration                     : java.lang.Object x;
        TypeRef                                  : java.lang.Object;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : Object


        VariableSpecification                    : x;
          LocationVariable                         : x




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : PrintStream;
        ProgramElementName                       : PrintStream


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public PrintStream <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : PrintStream;
        ProgramElementName                       : PrintStream


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static PrintStream <createObject> (){     PrintStream __NEW__;     __NEW__ = PrintStream.<allocate>();     __NEW__.<create>()@java.io.PrintStream;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : PrintStream;
        ProgramElementName                       : PrintStream


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   PrintStream __NEW__;   __NEW__ = PrintStream.<allocate>();   __NEW__.<create>()@java.io.PrintStream;   return __NEW__; }
        LocalVariableDeclaration                 : PrintStream __NEW__;
          TypeRef                                  : PrintStream;
            ProgramElementName                       : PrintStream


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = PrintStream.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : PrintStream.<allocate>();
            TypeRef                                  : PrintStream;
              ProgramElementName                       : PrintStream


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.io.PrintStream;
          TypeRef                                  : java.io.PrintStream;
            PackageReference                         : java.io
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : io


            ProgramElementName                       : PrintStream


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/io/Serializable.java ======================================================
CompilationUnit                          :  package java.io;  public interface Serializable {   };
  PackageSpecification                     :  package java.io;;
    PackageReference                         : java.io
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : io



  InterfaceDeclaration                     : public interface Serializable {   };
    Public                                   : public;

    ProgramElementName                       : Serializable




=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/math/BigInteger.java ======================================================
CompilationUnit                          :  package java.math;  public   final class BigInteger extends java.lang.Number implements java.lang.Comparable {     <clinit>     <clprepare>     <init>     static       private boolean java.math.BigInteger::<classPrepared>     static       private boolean java.math.BigInteger::<classInitialized>     static       private boolean java.math.BigInteger::<classErroneous>     static       private boolean java.math.BigInteger::<classInitializationInProgress>     public final       ghost \bigint java.math.BigInteger::value     public static       final java.math.BigInteger java.math.BigInteger::ZERO = BigInteger.valueOf(         0       )     valueOf     compareTo     mod     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.math;;
    PackageReference                         : java.math
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : math



  ClassDeclaration                         : public   final class BigInteger extends java.lang.Number implements java.lang.Comparable {     <clinit>     <clprepare>     <init>     static       private boolean java.math.BigInteger::<classPrepared>     static       private boolean java.math.BigInteger::<classInitialized>     static       private boolean java.math.BigInteger::<classErroneous>     static       private boolean java.math.BigInteger::<classInitializationInProgress>     public final       ghost \bigint java.math.BigInteger::value     public static       final java.math.BigInteger java.math.BigInteger::ZERO = BigInteger.valueOf(         0       )     valueOf     compareTo     mod     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : BigInteger

    Extends                                  : extends java.lang.Number;
      TypeRef                                  : java.lang.Number;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Number



    Implements                               : implements java.lang.Comparable;
      TypeRef                                  : java.lang.Comparable;
        PackageReference                         : java.lang
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : lang


        ProgramElementName                       : Comparable



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Number.<clinit>());           @(ZERO) = BigInteger.valueOf(0);         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Number.<clinit>());         @(ZERO) = BigInteger.valueOf(0);       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Number.<clinit>());       @(ZERO) = BigInteger.valueOf(0);     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.math.BigInteger::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Number.<clinit>());       @(ZERO) = BigInteger.valueOf(0);     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Number.<clinit>());       @(ZERO) = BigInteger.valueOf(0);     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Number.<clinit>());     @(ZERO) = BigInteger.valueOf(0);   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.math.BigInteger::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Number.<clinit>());     @(ZERO) = BigInteger.valueOf(0);   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Number.<clinit>());     @(ZERO) = BigInteger.valueOf(0);   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.math.BigInteger::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.math.BigInteger::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.math.BigInteger::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Number.<clinit>());   @(ZERO) = BigInteger.valueOf(0); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Number.<clinit>());   @(ZERO) = BigInteger.valueOf(0); }
                        PassiveExpression                        : @(java.lang.Number.<clinit>());
                          MethodReference                          : java.lang.Number.<clinit>();
                            TypeRef                                  : java.lang.Number;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Number


                            ProgramElementName                       : <clinit>



                        CopyAssignment                           : @(ZERO) = BigInteger.valueOf(0);
                          PassiveExpression                        : @(ZERO);
                            FieldReference                           : ZERO;
                              LocationVariable                         : java.math.BigInteger::ZERO



                          MethodReference                          : BigInteger.valueOf(0);
                            TypeRef                                  : BigInteger;
                              ProgramElementName                       : BigInteger


                            ProgramElementName                       : valueOf

                            IntLiteral                               : 0




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.math.BigInteger::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.math.BigInteger::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.math.BigInteger::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.math.BigInteger::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.math.BigInteger::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.math.BigInteger::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.math.BigInteger::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(ZERO) = null;     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(ZERO) = null;   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(ZERO) = null;
          PassiveExpression                        : @(ZERO);
            FieldReference                           : ZERO;
              LocationVariable                         : java.math.BigInteger::ZERO



          NullLiteral                              : null;


        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.math.BigInteger::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.math.BigInteger::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.math.BigInteger::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.math.BigInteger::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.math.BigInteger::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.math.BigInteger::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.math.BigInteger::<classPrepared>;
        LocationVariable                         : java.math.BigInteger::<classPrepared>



    FieldDeclaration                         : static   private boolean java.math.BigInteger::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.math.BigInteger::<classInitialized>;
        LocationVariable                         : java.math.BigInteger::<classInitialized>



    FieldDeclaration                         : static   private boolean java.math.BigInteger::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.math.BigInteger::<classErroneous>;
        LocationVariable                         : java.math.BigInteger::<classErroneous>



    FieldDeclaration                         : static   private boolean java.math.BigInteger::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.math.BigInteger::<classInitializationInProgress>;
        LocationVariable                         : java.math.BigInteger::<classInitializationInProgress>



    FieldDeclaration                         : public final ghost \bigint java.math.BigInteger::value;
      Public                                   : public;

      Final                                    : final;

      Ghost                                    : ghost;

      TypeRef                                  : \bigint;
        ProgramElementName                       : \bigint


      FieldSpecification                       : java.math.BigInteger::value;
        LocationVariable                         : java.math.BigInteger::value



    FieldDeclaration                         : public static   final java.math.BigInteger java.math.BigInteger::ZERO = BigInteger.valueOf(     0   );
      Public                                   : public;

      Static                                   : static;

      Final                                    : final;

      TypeRef                                  : java.math.BigInteger;
        PackageReference                         : java.math
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : math


        ProgramElementName                       : BigInteger


      FieldSpecification                       : java.math.BigInteger::ZERO = BigInteger.valueOf(0);
        LocationVariable                         : java.math.BigInteger::ZERO

        MethodReference                          : BigInteger.valueOf(0);
          TypeRef                                  : BigInteger;
            ProgramElementName                       : BigInteger


          ProgramElementName                       : valueOf

          IntLiteral                               : 0




    MethodDeclaration                        : public   static BigInteger valueOf (long v){     BigInteger result = new BigInteger();     //@ set result.value = (\bigint) v;     return result;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : BigInteger;
        ProgramElementName                       : BigInteger


      ProgramElementName                       : valueOf

      ParameterDeclaration                     : long v;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : v;
          LocationVariable                         : v



      StatementBlock                           : {   BigInteger result = new BigInteger();   //@ set result.value = (\bigint) v;   return result; }
        LocalVariableDeclaration                 : BigInteger result = new BigInteger();
          TypeRef                                  : BigInteger;
            ProgramElementName                       : BigInteger


          VariableSpecification                    : result = new BigInteger();
            LocationVariable                         : result

            New                                      : new BigInteger();
              TypeRef                                  : BigInteger;
                ProgramElementName                       : BigInteger





        SetStatement                             : //@ set result.value = (\bigint) v;

        Return                                   : return result;
          LocationVariable                         : result




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : int;
        ProgramElementName                       : int


      ProgramElementName                       : compareTo

      ParameterDeclaration                     : java.math.BigInteger param0;
        TypeRef                                  : java.math.BigInteger;
          PackageReference                         : java.math
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : math


          ProgramElementName                       : BigInteger


        VariableSpecification                    : param0;
          LocationVariable                         : param0




    MethodDeclaration                        : public java.math.BigInteger mod (     java.math.BigInteger param0   );
      Public                                   : public;

      TypeRef                                  : java.math.BigInteger;
        PackageReference                         : java.math
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : math


        ProgramElementName                       : BigInteger


      ProgramElementName                       : mod

      ParameterDeclaration                     : java.math.BigInteger param0;
        TypeRef                                  : java.math.BigInteger;
          PackageReference                         : java.math
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : math


          ProgramElementName                       : BigInteger


        VariableSpecification                    : param0;
          LocationVariable                         : param0




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : BigInteger;
        ProgramElementName                       : BigInteger


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();     this.value = 0;   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>();   this.value = 0; }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>


        CopyAssignment                           : this.value = 0;
          FieldReference                           : this.value;
            ThisReference                            : this;

            LocationVariable                         : java.math.BigInteger::value


          IntLiteral                               : 0




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();     this.value = 0;   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>();   this.value = 0; }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>


        CopyAssignment                           : this.value = 0;
          FieldReference                           : this.value;
            ThisReference                            : this;

            LocationVariable                         : java.math.BigInteger::value


          IntLiteral                               : 0




    MethodDeclaration                        : public BigInteger <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : BigInteger;
        ProgramElementName                       : BigInteger


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static BigInteger <createObject> (){     BigInteger __NEW__;     __NEW__ = BigInteger.<allocate>();     __NEW__.<create>()@java.math.BigInteger;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : BigInteger;
        ProgramElementName                       : BigInteger


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   BigInteger __NEW__;   __NEW__ = BigInteger.<allocate>();   __NEW__.<create>()@java.math.BigInteger;   return __NEW__; }
        LocalVariableDeclaration                 : BigInteger __NEW__;
          TypeRef                                  : BigInteger;
            ProgramElementName                       : BigInteger


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = BigInteger.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : BigInteger.<allocate>();
            TypeRef                                  : BigInteger;
              ProgramElementName                       : BigInteger


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.math.BigInteger;
          TypeRef                                  : java.math.BigInteger;
            PackageReference                         : java.math
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : math


            ProgramElementName                       : BigInteger


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/util/ArrayList.java ======================================================
CompilationUnit                          :  package java.util;  public   final class ArrayList implements java.util.List {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.util.ArrayList::<classPrepared>     static       private boolean java.util.ArrayList::<classInitialized>     static       private boolean java.util.ArrayList::<classErroneous>     static       private boolean java.util.ArrayList::<classInitializationInProgress>     ArrayList     ArrayList     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.util;;
    PackageReference                         : java.util
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : util



  ClassDeclaration                         : public   final class ArrayList implements java.util.List {     <clinit>     <clprepare>     <init>     <init>     static       private boolean java.util.ArrayList::<classPrepared>     static       private boolean java.util.ArrayList::<classInitialized>     static       private boolean java.util.ArrayList::<classErroneous>     static       private boolean java.util.ArrayList::<classInitializationInProgress>     ArrayList     ArrayList     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : ArrayList

    Implements                               : implements java.util.List;
      TypeRef                                  : java.util.List;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : List



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.util.ArrayList::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.util.ArrayList::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.util.ArrayList::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.util.ArrayList::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.util.ArrayList::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.util.ArrayList::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.util.ArrayList::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.util.ArrayList::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.util.ArrayList::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.util.ArrayList::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.util.ArrayList::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.util.ArrayList::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.util.ArrayList::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.util.ArrayList::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.util.ArrayList::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.util.ArrayList::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.util.ArrayList::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : Collection c;
        TypeRef                                  : Collection;
          ProgramElementName                       : Collection


        VariableSpecification                    : c;
          LocationVariable                         : c




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>


    FieldDeclaration                         : static   private boolean java.util.ArrayList::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.ArrayList::<classPrepared>;
        LocationVariable                         : java.util.ArrayList::<classPrepared>



    FieldDeclaration                         : static   private boolean java.util.ArrayList::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.ArrayList::<classInitialized>;
        LocationVariable                         : java.util.ArrayList::<classInitialized>



    FieldDeclaration                         : static   private boolean java.util.ArrayList::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.ArrayList::<classErroneous>;
        LocationVariable                         : java.util.ArrayList::<classErroneous>



    FieldDeclaration                         : static   private boolean java.util.ArrayList::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.ArrayList::<classInitializationInProgress>;
        LocationVariable                         : java.util.ArrayList::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : ArrayList


    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : ArrayList

      ParameterDeclaration                     : Collection c;
        TypeRef                                  : Collection;
          ProgramElementName                       : Collection


        VariableSpecification                    : c;
          LocationVariable                         : c




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ArrayList;
        ProgramElementName                       : ArrayList


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public ArrayList <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : ArrayList;
        ProgramElementName                       : ArrayList


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static ArrayList <createObject> (){     ArrayList __NEW__;     __NEW__ = ArrayList.<allocate>();     __NEW__.<create>()@java.util.ArrayList;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ArrayList;
        ProgramElementName                       : ArrayList


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   ArrayList __NEW__;   __NEW__ = ArrayList.<allocate>();   __NEW__.<create>()@java.util.ArrayList;   return __NEW__; }
        LocalVariableDeclaration                 : ArrayList __NEW__;
          TypeRef                                  : ArrayList;
            ProgramElementName                       : ArrayList


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = ArrayList.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : ArrayList.<allocate>();
            TypeRef                                  : ArrayList;
              ProgramElementName                       : ArrayList


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.util.ArrayList;
          TypeRef                                  : java.util.ArrayList;
            PackageReference                         : java.util
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : util


            ProgramElementName                       : ArrayList


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/util/Arrays.java ======================================================
CompilationUnit                          :  package java.util;  public   final class Arrays {     <clinit>     <clprepare>     <init>     static       private boolean java.util.Arrays::<classPrepared>     static       private boolean java.util.Arrays::<classInitialized>     static       private boolean java.util.Arrays::<classErroneous>     static       private boolean java.util.Arrays::<classInitializationInProgress>     asList     asList     asList     asList     copyOf     copyOf     copyOf     copyOf     copyOf     copyOf     copyOf     copyOf     copyOfRange     copyOfRange     copyOfRange     copyOfRange     copyOfRange     copyOfRange     copyOfRange     equals     equals     equals     equals     equals     fill     fill     fill     fill     fill     fill     fill     fill     fill     fill     fill     fill     sort     sort     sort     sort     sort     sort     sort     sort     sort     sort     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.util;;
    PackageReference                         : java.util
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : util



  ClassDeclaration                         : public   final class Arrays {     <clinit>     <clprepare>     <init>     static       private boolean java.util.Arrays::<classPrepared>     static       private boolean java.util.Arrays::<classInitialized>     static       private boolean java.util.Arrays::<classErroneous>     static       private boolean java.util.Arrays::<classInitializationInProgress>     asList     asList     asList     asList     copyOf     copyOf     copyOf     copyOf     copyOf     copyOf     copyOf     copyOf     copyOfRange     copyOfRange     copyOfRange     copyOfRange     copyOfRange     copyOfRange     copyOfRange     equals     equals     equals     equals     equals     fill     fill     fill     fill     fill     fill     fill     fill     fill     fill     fill     fill     sort     sort     sort     sort     sort     sort     sort     sort     sort     sort     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : Arrays

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.util.Arrays::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.util.Arrays::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.util.Arrays::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.util.Arrays::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.util.Arrays::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.util.Arrays::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.util.Arrays::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.util.Arrays::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.util.Arrays::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.util.Arrays::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.util.Arrays::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.util.Arrays::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.util.Arrays::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.util.Arrays::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.util.Arrays::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.util.Arrays::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.util.Arrays::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.util.Arrays::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.Arrays::<classPrepared>;
        LocationVariable                         : java.util.Arrays::<classPrepared>



    FieldDeclaration                         : static   private boolean java.util.Arrays::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.Arrays::<classInitialized>;
        LocationVariable                         : java.util.Arrays::<classInitialized>



    FieldDeclaration                         : static   private boolean java.util.Arrays::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.Arrays::<classErroneous>;
        LocationVariable                         : java.util.Arrays::<classErroneous>



    FieldDeclaration                         : static   private boolean java.util.Arrays::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.Arrays::<classInitializationInProgress>;
        LocationVariable                         : java.util.Arrays::<classInitializationInProgress>



    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.util.ArrayList;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : ArrayList


      ProgramElementName                       : asList

      ParameterDeclaration                     : int[] arr;
        TypeRef                                  : int[];
          ProgramElementName                       : int


        VariableSpecification                    : arr;
          LocationVariable                         : arr




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.util.ArrayList;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : ArrayList


      ProgramElementName                       : asList

      ParameterDeclaration                     : char[] arr;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : arr;
          LocationVariable                         : arr




    MethodDeclaration                        : public   static java.util.ArrayList asList (     java.lang.String str   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.util.ArrayList;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : ArrayList


      ProgramElementName                       : asList

      ParameterDeclaration                     : java.lang.String str;
        TypeRef                                  : java.lang.String;
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : str;
          LocationVariable                         : str




    MethodDeclaration                        : public   static java.util.ArrayList asList (     java.lang.String[] arr   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : java.util.ArrayList;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : ArrayList


      ProgramElementName                       : asList

      ParameterDeclaration                     : java.lang.String[] arr;
        TypeRef                                  : java.lang.String[];
          PackageReference                         : java.lang
            PackageReference                         : java
              ProgramElementName                       : java


            ProgramElementName                       : lang


          ProgramElementName                       : String


        VariableSpecification                    : arr;
          LocationVariable                         : arr




    MethodDeclaration                        : public   static boolean[] copyOf (     boolean[] original,     int newLength   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : boolean[];
        ProgramElementName                       : boolean


      ProgramElementName                       : copyOf

      ParameterDeclaration                     : boolean[] original;
        TypeRef                                  : boolean[];
          ProgramElementName                       : boolean


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int newLength;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : newLength;
          LocationVariable                         : newLength




    MethodDeclaration                        : public   static byte[] copyOf (byte[] original, int newLength);
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : byte[];
        ProgramElementName                       : byte


      ProgramElementName                       : copyOf

      ParameterDeclaration                     : byte[] original;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int newLength;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : newLength;
          LocationVariable                         : newLength




    MethodDeclaration                        : public   static char[] copyOf (char[] original, int newLength);
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : char[];
        ProgramElementName                       : char


      ProgramElementName                       : copyOf

      ParameterDeclaration                     : char[] original;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int newLength;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : newLength;
          LocationVariable                         : newLength




    MethodDeclaration                        : public   static int[] copyOf (int[] original, int newLength);
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int[];
        ProgramElementName                       : int


      ProgramElementName                       : copyOf

      ParameterDeclaration                     : int[] original;
        TypeRef                                  : int[];
          ProgramElementName                       : int


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int newLength;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : newLength;
          LocationVariable                         : newLength




    MethodDeclaration                        : public   static short[] copyOf (     short[] original,     int newLength   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : short[];
        ProgramElementName                       : short


      ProgramElementName                       : copyOf

      ParameterDeclaration                     : short[] original;
        TypeRef                                  : short[];
          ProgramElementName                       : short


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int newLength;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : newLength;
          LocationVariable                         : newLength




    MethodDeclaration                        : public   static long[] copyOf (long[] original, int newLength);
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : long[];
        ProgramElementName                       : long


      ProgramElementName                       : copyOf

      ParameterDeclaration                     : long[] original;
        TypeRef                                  : long[];
          ProgramElementName                       : long


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int newLength;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : newLength;
          LocationVariable                         : newLength




    MethodDeclaration                        : public   static float[] copyOf (     float[] original,     int newLength   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : float[];
        ProgramElementName                       : float


      ProgramElementName                       : copyOf

      ParameterDeclaration                     : float[] original;
        TypeRef                                  : float[];
          ProgramElementName                       : float


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int newLength;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : newLength;
          LocationVariable                         : newLength




    MethodDeclaration                        : public   static double[] copyOf (     double[] original,     int newLength   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double[];
        ProgramElementName                       : double


      ProgramElementName                       : copyOf

      ParameterDeclaration                     : double[] original;
        TypeRef                                  : double[];
          ProgramElementName                       : double


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int newLength;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : newLength;
          LocationVariable                         : newLength




    MethodDeclaration                        : public   static boolean[] copyOfRange (     boolean[] original,     int from,     int to   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : boolean[];
        ProgramElementName                       : boolean


      ProgramElementName                       : copyOfRange

      ParameterDeclaration                     : boolean[] original;
        TypeRef                                  : boolean[];
          ProgramElementName                       : boolean


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int from;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : from;
          LocationVariable                         : from



      ParameterDeclaration                     : int to;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : to;
          LocationVariable                         : to




    MethodDeclaration                        : public   static char[] copyOfRange (     char[] original,     int from,     int to   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : char[];
        ProgramElementName                       : char


      ProgramElementName                       : copyOfRange

      ParameterDeclaration                     : char[] original;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int from;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : from;
          LocationVariable                         : from



      ParameterDeclaration                     : int to;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : to;
          LocationVariable                         : to




    MethodDeclaration                        : public   static short[] copyOfRange (     short[] original,     int from,     int to   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : short[];
        ProgramElementName                       : short


      ProgramElementName                       : copyOfRange

      ParameterDeclaration                     : short[] original;
        TypeRef                                  : short[];
          ProgramElementName                       : short


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int from;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : from;
          LocationVariable                         : from



      ParameterDeclaration                     : int to;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : to;
          LocationVariable                         : to




    MethodDeclaration                        : public   static int[] copyOfRange (     int[] original,     int from,     int to   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : int[];
        ProgramElementName                       : int


      ProgramElementName                       : copyOfRange

      ParameterDeclaration                     : int[] original;
        TypeRef                                  : int[];
          ProgramElementName                       : int


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int from;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : from;
          LocationVariable                         : from



      ParameterDeclaration                     : int to;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : to;
          LocationVariable                         : to




    MethodDeclaration                        : public   static long[] copyOfRange (     long[] original,     int from,     int to   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : long[];
        ProgramElementName                       : long


      ProgramElementName                       : copyOfRange

      ParameterDeclaration                     : long[] original;
        TypeRef                                  : long[];
          ProgramElementName                       : long


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int from;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : from;
          LocationVariable                         : from



      ParameterDeclaration                     : int to;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : to;
          LocationVariable                         : to




    MethodDeclaration                        : public   static float[] copyOfRange (     float[] original,     int from,     int to   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : float[];
        ProgramElementName                       : float


      ProgramElementName                       : copyOfRange

      ParameterDeclaration                     : float[] original;
        TypeRef                                  : float[];
          ProgramElementName                       : float


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int from;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : from;
          LocationVariable                         : from



      ParameterDeclaration                     : int to;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : to;
          LocationVariable                         : to




    MethodDeclaration                        : public   static double[] copyOfRange (     double[] original,     int from,     int to   );
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : double[];
        ProgramElementName                       : double


      ProgramElementName                       : copyOfRange

      ParameterDeclaration                     : double[] original;
        TypeRef                                  : double[];
          ProgramElementName                       : double


        VariableSpecification                    : original;
          LocationVariable                         : original



      ParameterDeclaration                     : int from;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : from;
          LocationVariable                         : from



      ParameterDeclaration                     : int to;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : to;
          LocationVariable                         : to




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : equals

      ParameterDeclaration                     : byte[] a;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : byte[] a2;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : a2;
          LocationVariable                         : a2




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : equals

      ParameterDeclaration                     : int[] a;
        TypeRef                                  : int[];
          ProgramElementName                       : int


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int[] a2;
        TypeRef                                  : int[];
          ProgramElementName                       : int


        VariableSpecification                    : a2;
          LocationVariable                         : a2




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : equals

      ParameterDeclaration                     : short[] a;
        TypeRef                                  : short[];
          ProgramElementName                       : short


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : short[] a2;
        TypeRef                                  : short[];
          ProgramElementName                       : short


        VariableSpecification                    : a2;
          LocationVariable                         : a2




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : equals

      ParameterDeclaration                     : long[] a;
        TypeRef                                  : long[];
          ProgramElementName                       : long


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : long[] a2;
        TypeRef                                  : long[];
          ProgramElementName                       : long


        VariableSpecification                    : a2;
          LocationVariable                         : a2




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ProgramElementName                       : equals

      ParameterDeclaration                     : char[] a;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : char[] a2;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : a2;
          LocationVariable                         : a2




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : fill

      ParameterDeclaration                     : boolean[] a;
        TypeRef                                  : boolean[];
          ProgramElementName                       : boolean


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : boolean val;
        TypeRef                                  : boolean;
          ProgramElementName                       : boolean


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : public   static void fill (     boolean[] a,     int fromIndex,     int toIndex,     boolean val   );
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : fill

      ParameterDeclaration                     : boolean[] a;
        TypeRef                                  : boolean[];
          ProgramElementName                       : boolean


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int fromIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : fromIndex;
          LocationVariable                         : fromIndex



      ParameterDeclaration                     : int toIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : toIndex;
          LocationVariable                         : toIndex



      ParameterDeclaration                     : boolean val;
        TypeRef                                  : boolean;
          ProgramElementName                       : boolean


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : fill

      ParameterDeclaration                     : int[] a;
        TypeRef                                  : int[];
          ProgramElementName                       : int


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int val;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : public   static void fill (     int[] a,     int fromIndex,     int toIndex,     int val   );
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : fill

      ParameterDeclaration                     : int[] a;
        TypeRef                                  : int[];
          ProgramElementName                       : int


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int fromIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : fromIndex;
          LocationVariable                         : fromIndex



      ParameterDeclaration                     : int toIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : toIndex;
          LocationVariable                         : toIndex



      ParameterDeclaration                     : int val;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : fill

      ParameterDeclaration                     : long[] a;
        TypeRef                                  : long[];
          ProgramElementName                       : long


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : long val;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : public   static void fill (     long[] a,     int fromIndex,     int toIndex,     long val   );
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : fill

      ParameterDeclaration                     : long[] a;
        TypeRef                                  : long[];
          ProgramElementName                       : long


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int fromIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : fromIndex;
          LocationVariable                         : fromIndex



      ParameterDeclaration                     : int toIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : toIndex;
          LocationVariable                         : toIndex



      ParameterDeclaration                     : long val;
        TypeRef                                  : long;
          ProgramElementName                       : long


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : fill

      ParameterDeclaration                     : byte[] a;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : byte val;
        TypeRef                                  : byte;
          ProgramElementName                       : byte


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : public   static void fill (     byte[] a,     int fromIndex,     int toIndex,     byte val   );
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : fill

      ParameterDeclaration                     : byte[] a;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int fromIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : fromIndex;
          LocationVariable                         : fromIndex



      ParameterDeclaration                     : int toIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : toIndex;
          LocationVariable                         : toIndex



      ParameterDeclaration                     : byte val;
        TypeRef                                  : byte;
          ProgramElementName                       : byte


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : fill

      ParameterDeclaration                     : double[] a;
        TypeRef                                  : double[];
          ProgramElementName                       : double


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : double val;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : public   static void fill (     double[] a,     int fromIndex,     int toIndex,     double val   );
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : fill

      ParameterDeclaration                     : double[] a;
        TypeRef                                  : double[];
          ProgramElementName                       : double


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int fromIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : fromIndex;
          LocationVariable                         : fromIndex



      ParameterDeclaration                     : int toIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : toIndex;
          LocationVariable                         : toIndex



      ParameterDeclaration                     : double val;
        TypeRef                                  : double;
          ProgramElementName                       : double


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : fill

      ParameterDeclaration                     : float[] a;
        TypeRef                                  : float[];
          ProgramElementName                       : float


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : float val;
        TypeRef                                  : float;
          ProgramElementName                       : float


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : public   static void fill (     float[] a,     int fromIndex,     int toIndex,     float val   );
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : fill

      ParameterDeclaration                     : float[] a;
        TypeRef                                  : float[];
          ProgramElementName                       : float


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int fromIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : fromIndex;
          LocationVariable                         : fromIndex



      ParameterDeclaration                     : int toIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : toIndex;
          LocationVariable                         : toIndex



      ParameterDeclaration                     : float val;
        TypeRef                                  : float;
          ProgramElementName                       : float


        VariableSpecification                    : val;
          LocationVariable                         : val




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : sort

      ParameterDeclaration                     : int[] a;
        TypeRef                                  : int[];
          ProgramElementName                       : int


        VariableSpecification                    : a;
          LocationVariable                         : a




    MethodDeclaration                        : public   static void sort (int[] a, int fromIndex, int toIndex);
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : sort

      ParameterDeclaration                     : int[] a;
        TypeRef                                  : int[];
          ProgramElementName                       : int


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int fromIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : fromIndex;
          LocationVariable                         : fromIndex



      ParameterDeclaration                     : int toIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : toIndex;
          LocationVariable                         : toIndex




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : sort

      ParameterDeclaration                     : short[] a;
        TypeRef                                  : short[];
          ProgramElementName                       : short


        VariableSpecification                    : a;
          LocationVariable                         : a




    MethodDeclaration                        : public   static void sort (     short[] a,     int fromIndex,     int toIndex   );
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : sort

      ParameterDeclaration                     : short[] a;
        TypeRef                                  : short[];
          ProgramElementName                       : short


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int fromIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : fromIndex;
          LocationVariable                         : fromIndex



      ParameterDeclaration                     : int toIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : toIndex;
          LocationVariable                         : toIndex




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : sort

      ParameterDeclaration                     : long[] a;
        TypeRef                                  : long[];
          ProgramElementName                       : long


        VariableSpecification                    : a;
          LocationVariable                         : a




    MethodDeclaration                        : public   static void sort (     long[] a,     int fromIndex,     int toIndex   );
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : sort

      ParameterDeclaration                     : long[] a;
        TypeRef                                  : long[];
          ProgramElementName                       : long


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int fromIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : fromIndex;
          LocationVariable                         : fromIndex



      ParameterDeclaration                     : int toIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : toIndex;
          LocationVariable                         : toIndex




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : sort

      ParameterDeclaration                     : byte[] a;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : a;
          LocationVariable                         : a




    MethodDeclaration                        : public   static void sort (     byte[] a,     int fromIndex,     int toIndex   );
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : sort

      ParameterDeclaration                     : byte[] a;
        TypeRef                                  : byte[];
          ProgramElementName                       : byte


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int fromIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : fromIndex;
          LocationVariable                         : fromIndex



      ParameterDeclaration                     : int toIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : toIndex;
          LocationVariable                         : toIndex




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : sort

      ParameterDeclaration                     : char[] a;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : a;
          LocationVariable                         : a




    MethodDeclaration                        : public   static void sort (     char[] a,     int fromIndex,     int toIndex   );
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : sort

      ParameterDeclaration                     : char[] a;
        TypeRef                                  : char[];
          ProgramElementName                       : char


        VariableSpecification                    : a;
          LocationVariable                         : a



      ParameterDeclaration                     : int fromIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : fromIndex;
          LocationVariable                         : fromIndex



      ParameterDeclaration                     : int toIndex;
        TypeRef                                  : int;
          ProgramElementName                       : int


        VariableSpecification                    : toIndex;
          LocationVariable                         : toIndex




    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Arrays;
        ProgramElementName                       : Arrays


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Arrays <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Arrays;
        ProgramElementName                       : Arrays


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Arrays <createObject> (){     Arrays __NEW__;     __NEW__ = Arrays.<allocate>();     __NEW__.<create>()@java.util.Arrays;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Arrays;
        ProgramElementName                       : Arrays


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Arrays __NEW__;   __NEW__ = Arrays.<allocate>();   __NEW__.<create>()@java.util.Arrays;   return __NEW__; }
        LocalVariableDeclaration                 : Arrays __NEW__;
          TypeRef                                  : Arrays;
            ProgramElementName                       : Arrays


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Arrays.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Arrays.<allocate>();
            TypeRef                                  : Arrays;
              ProgramElementName                       : Arrays


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.util.Arrays;
          TypeRef                                  : java.util.Arrays;
            PackageReference                         : java.util
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : util


            ProgramElementName                       : Arrays


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/util/ListIteratorImpl.java ======================================================
CompilationUnit                          :  package java.util;  public   final class ListIteratorImpl implements ListIterator {     <clinit>     <clprepare>     <init>     static       private boolean java.util.ListIteratorImpl::<classPrepared>     static       private boolean java.util.ListIteratorImpl::<classInitialized>     static       private boolean java.util.ListIteratorImpl::<classErroneous>     static       private boolean java.util.ListIteratorImpl::<classInitializationInProgress>     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.util;;
    PackageReference                         : java.util
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : util



  ClassDeclaration                         : public   final class ListIteratorImpl implements ListIterator {     <clinit>     <clprepare>     <init>     static       private boolean java.util.ListIteratorImpl::<classPrepared>     static       private boolean java.util.ListIteratorImpl::<classInitialized>     static       private boolean java.util.ListIteratorImpl::<classErroneous>     static       private boolean java.util.ListIteratorImpl::<classInitializationInProgress>     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : ListIteratorImpl

    Implements                               : implements ListIterator;
      TypeRef                                  : ListIterator;
        ProgramElementName                       : ListIterator



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.util.ListIteratorImpl::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.util.ListIteratorImpl::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.util.ListIteratorImpl::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.util.ListIteratorImpl::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.util.ListIteratorImpl::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.util.ListIteratorImpl::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.util.ListIteratorImpl::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.util.ListIteratorImpl::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.util.ListIteratorImpl::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.util.ListIteratorImpl::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.util.ListIteratorImpl::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.util.ListIteratorImpl::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.util.ListIteratorImpl::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.util.ListIteratorImpl::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.util.ListIteratorImpl::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.util.ListIteratorImpl::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.util.ListIteratorImpl::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static   private boolean java.util.ListIteratorImpl::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.ListIteratorImpl::<classPrepared>;
        LocationVariable                         : java.util.ListIteratorImpl::<classPrepared>



    FieldDeclaration                         : static   private boolean java.util.ListIteratorImpl::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.ListIteratorImpl::<classInitialized>;
        LocationVariable                         : java.util.ListIteratorImpl::<classInitialized>



    FieldDeclaration                         : static   private boolean java.util.ListIteratorImpl::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.ListIteratorImpl::<classErroneous>;
        LocationVariable                         : java.util.ListIteratorImpl::<classErroneous>



    FieldDeclaration                         : static   private boolean java.util.ListIteratorImpl::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.ListIteratorImpl::<classInitializationInProgress>;
        LocationVariable                         : java.util.ListIteratorImpl::<classInitializationInProgress>



    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ListIteratorImpl;
        ProgramElementName                       : ListIteratorImpl


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public ListIteratorImpl <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : ListIteratorImpl;
        ProgramElementName                       : ListIteratorImpl


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static ListIteratorImpl <createObject> (){     ListIteratorImpl __NEW__;     __NEW__ = ListIteratorImpl.<allocate>();     __NEW__.<create>()@java.util.ListIteratorImpl;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : ListIteratorImpl;
        ProgramElementName                       : ListIteratorImpl


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   ListIteratorImpl __NEW__;   __NEW__ = ListIteratorImpl.<allocate>();   __NEW__.<create>()@java.util.ListIteratorImpl;   return __NEW__; }
        LocalVariableDeclaration                 : ListIteratorImpl __NEW__;
          TypeRef                                  : ListIteratorImpl;
            ProgramElementName                       : ListIteratorImpl


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = ListIteratorImpl.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : ListIteratorImpl.<allocate>();
            TypeRef                                  : ListIteratorImpl;
              ProgramElementName                       : ListIteratorImpl


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.util.ListIteratorImpl;
          TypeRef                                  : java.util.ListIteratorImpl;
            PackageReference                         : java.util
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : util


            ProgramElementName                       : ListIteratorImpl


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/util/Date.java ======================================================
CompilationUnit                          :  package java.util;  public   final class Date {     <clinit>     <clprepare>     <init>     static       private boolean java.util.Date::<classPrepared>     static       private boolean java.util.Date::<classInitialized>     static       private boolean java.util.Date::<classErroneous>     static       private boolean java.util.Date::<classInitializationInProgress>     Date     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.util;;
    PackageReference                         : java.util
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : util



  ClassDeclaration                         : public   final class Date {     <clinit>     <clprepare>     <init>     static       private boolean java.util.Date::<classPrepared>     static       private boolean java.util.Date::<classInitialized>     static       private boolean java.util.Date::<classErroneous>     static       private boolean java.util.Date::<classInitializationInProgress>     Date     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : Date

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.util.Date::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.util.Date::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.util.Date::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.util.Date::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.util.Date::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.util.Date::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.util.Date::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.util.Date::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.util.Date::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.util.Date::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.util.Date::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.util.Date::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.util.Date::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.util.Date::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.util.Date::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.util.Date::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.util.Date::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static private boolean java.util.Date::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.Date::<classPrepared>;
        LocationVariable                         : java.util.Date::<classPrepared>



    FieldDeclaration                         : static   private boolean java.util.Date::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.Date::<classInitialized>;
        LocationVariable                         : java.util.Date::<classInitialized>



    FieldDeclaration                         : static private boolean java.util.Date::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.Date::<classErroneous>;
        LocationVariable                         : java.util.Date::<classErroneous>



    FieldDeclaration                         : static   private boolean java.util.Date::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.Date::<classInitializationInProgress>;
        LocationVariable                         : java.util.Date::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : Date

      StatementBlock                           : {}


    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Date;
        ProgramElementName                       : Date


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public Date <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : Date;
        ProgramElementName                       : Date


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static Date <createObject> (){     Date __NEW__;     __NEW__ = Date.<allocate>();     __NEW__.<create>()@java.util.Date;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : Date;
        ProgramElementName                       : Date


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   Date __NEW__;   __NEW__ = Date.<allocate>();   __NEW__.<create>()@java.util.Date;   return __NEW__; }
        LocalVariableDeclaration                 : Date __NEW__;
          TypeRef                                  : Date;
            ProgramElementName                       : Date


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = Date.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : Date.<allocate>();
            TypeRef                                  : Date;
              ProgramElementName                       : Date


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.util.Date;
          TypeRef                                  : java.util.Date;
            PackageReference                         : java.util
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : util


            ProgramElementName                       : Date


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/util/LinkedHashMap.java ======================================================
CompilationUnit                          :  package java.util;  public   final class LinkedHashMap implements java.util.Map {     <clinit>     <clprepare>     <init>     static       private boolean java.util.LinkedHashMap::<classPrepared>     static       private boolean java.util.LinkedHashMap::<classInitialized>     static       private boolean java.util.LinkedHashMap::<classErroneous>     static       private boolean java.util.LinkedHashMap::<classInitializationInProgress>     LinkedHashMap     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.util;;
    PackageReference                         : java.util
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : util



  ClassDeclaration                         : public   final class LinkedHashMap implements java.util.Map {     <clinit>     <clprepare>     <init>     static       private boolean java.util.LinkedHashMap::<classPrepared>     static       private boolean java.util.LinkedHashMap::<classInitialized>     static       private boolean java.util.LinkedHashMap::<classErroneous>     static       private boolean java.util.LinkedHashMap::<classInitializationInProgress>     LinkedHashMap     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : LinkedHashMap

    Implements                               : implements java.util.Map;
      TypeRef                                  : java.util.Map;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : Map



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.util.LinkedHashMap::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.util.LinkedHashMap::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.util.LinkedHashMap::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.util.LinkedHashMap::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.util.LinkedHashMap::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.util.LinkedHashMap::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.util.LinkedHashMap::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.util.LinkedHashMap::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.util.LinkedHashMap::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.util.LinkedHashMap::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.util.LinkedHashMap::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.util.LinkedHashMap::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.util.LinkedHashMap::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.util.LinkedHashMap::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.util.LinkedHashMap::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.util.LinkedHashMap::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.util.LinkedHashMap::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>


    FieldDeclaration                         : static   private boolean java.util.LinkedHashMap::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.LinkedHashMap::<classPrepared>;
        LocationVariable                         : java.util.LinkedHashMap::<classPrepared>



    FieldDeclaration                         : static   private boolean java.util.LinkedHashMap::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.LinkedHashMap::<classInitialized>;
        LocationVariable                         : java.util.LinkedHashMap::<classInitialized>



    FieldDeclaration                         : static   private boolean java.util.LinkedHashMap::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.LinkedHashMap::<classErroneous>;
        LocationVariable                         : java.util.LinkedHashMap::<classErroneous>



    FieldDeclaration                         : static   private boolean java.util.LinkedHashMap::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.LinkedHashMap::<classInitializationInProgress>;
        LocationVariable                         : java.util.LinkedHashMap::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : LinkedHashMap


    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : LinkedHashMap;
        ProgramElementName                       : LinkedHashMap


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public LinkedHashMap <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : LinkedHashMap;
        ProgramElementName                       : LinkedHashMap


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static LinkedHashMap <createObject> (){     LinkedHashMap __NEW__;     __NEW__ = LinkedHashMap.<allocate>();     __NEW__.<create>()@java.util.LinkedHashMap;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : LinkedHashMap;
        ProgramElementName                       : LinkedHashMap


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   LinkedHashMap __NEW__;   __NEW__ = LinkedHashMap.<allocate>();   __NEW__.<create>()@java.util.LinkedHashMap;   return __NEW__; }
        LocalVariableDeclaration                 : LinkedHashMap __NEW__;
          TypeRef                                  : LinkedHashMap;
            ProgramElementName                       : LinkedHashMap


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = LinkedHashMap.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : LinkedHashMap.<allocate>();
            TypeRef                                  : LinkedHashMap;
              ProgramElementName                       : LinkedHashMap


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.util.LinkedHashMap;
          TypeRef                                  : java.util.LinkedHashMap;
            PackageReference                         : java.util
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : util


            ProgramElementName                       : LinkedHashMap


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== jar:file:/home/weigl/work/key-main/key.core/build/libs/key.core-2.12.4-dev.jar!/de/uka/ilkd/key/java/JavaRedux/java/util/LinkedList.java ======================================================
CompilationUnit                          :  package java.util;  public   final class LinkedList implements java.util.List {     <clinit>     <clprepare>     <init>     static       private boolean java.util.LinkedList::<classPrepared>     static       private boolean java.util.LinkedList::<classInitialized>     static       private boolean java.util.LinkedList::<classErroneous>     static       private boolean java.util.LinkedList::<classInitializationInProgress>     LinkedList     toString     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  PackageSpecification                     :  package java.util;;
    PackageReference                         : java.util
      PackageReference                         : java
        ProgramElementName                       : java


      ProgramElementName                       : util



  ClassDeclaration                         : public   final class LinkedList implements java.util.List {     <clinit>     <clprepare>     <init>     static       private boolean java.util.LinkedList::<classPrepared>     static       private boolean java.util.LinkedList::<classInitialized>     static       private boolean java.util.LinkedList::<classErroneous>     static       private boolean java.util.LinkedList::<classInitializationInProgress>     LinkedList     toString     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    Final                                    : final;

    ProgramElementName                       : LinkedList

    Implements                               : implements java.util.List;
      TypeRef                                  : java.util.List;
        PackageReference                         : java.util
          PackageReference                         : java
            ProgramElementName                       : java


          ProgramElementName                       : util


        ProgramElementName                       : List



    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : java.util.LinkedList::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : java.util.LinkedList::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : java.util.LinkedList::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.util.LinkedList::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.util.LinkedList::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.util.LinkedList::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.util.LinkedList::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : java.util.LinkedList::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : java.util.LinkedList::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : java.util.LinkedList::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : java.util.LinkedList::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : java.util.LinkedList::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : java.util.LinkedList::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : java.util.LinkedList::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.util.LinkedList::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : java.util.LinkedList::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : java.util.LinkedList::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : 
      Public                                   : public;

      ProgramElementName                       : <init>

      ParameterDeclaration                     : Collection param0;
        TypeRef                                  : Collection;
          ProgramElementName                       : Collection


        VariableSpecification                    : param0;
          LocationVariable                         : param0




    FieldDeclaration                         : static   private boolean java.util.LinkedList::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.LinkedList::<classPrepared>;
        LocationVariable                         : java.util.LinkedList::<classPrepared>



    FieldDeclaration                         : static   private boolean java.util.LinkedList::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.LinkedList::<classInitialized>;
        LocationVariable                         : java.util.LinkedList::<classInitialized>



    FieldDeclaration                         : static   private boolean java.util.LinkedList::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.LinkedList::<classErroneous>;
        LocationVariable                         : java.util.LinkedList::<classErroneous>



    FieldDeclaration                         : static   private boolean java.util.LinkedList::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : java.util.LinkedList::<classInitializationInProgress>;
        LocationVariable                         : java.util.LinkedList::<classInitializationInProgress>



    ConstructorDeclaration                   : 
      Public                                   : public;

      ProgramElementName                       : LinkedList

      ParameterDeclaration                     : Collection param0;
        TypeRef                                  : Collection;
          ProgramElementName                       : Collection


        VariableSpecification                    : param0;
          LocationVariable                         : param0




    MethodDeclaration                        : 
      Public                                   : public;

      TypeRef                                  : String;
        ProgramElementName                       : String


      ProgramElementName                       : toString


    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : LinkedList;
        ProgramElementName                       : LinkedList


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public LinkedList <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : LinkedList;
        ProgramElementName                       : LinkedList


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static LinkedList <createObject> (){     LinkedList __NEW__;     __NEW__ = LinkedList.<allocate>();     __NEW__.<create>()@java.util.LinkedList;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : LinkedList;
        ProgramElementName                       : LinkedList


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   LinkedList __NEW__;   __NEW__ = LinkedList.<allocate>();   __NEW__.<create>()@java.util.LinkedList;   return __NEW__; }
        LocalVariableDeclaration                 : LinkedList __NEW__;
          TypeRef                                  : LinkedList;
            ProgramElementName                       : LinkedList


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = LinkedList.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : LinkedList.<allocate>();
            TypeRef                                  : LinkedList;
              ProgramElementName                       : LinkedList


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@java.util.LinkedList;
          TypeRef                                  : java.util.LinkedList;
            PackageReference                         : java.util
              PackageReference                         : java
                ProgramElementName                       : java


              ProgramElementName                       : util


            ProgramElementName                       : LinkedList


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== null ======================================================
CompilationUnit                          :  public class <Default> {     <clinit>     <clprepare>     <init>     static private boolean <Default>::<classPrepared>     static       private boolean <Default>::<classInitialized>     static private boolean <Default>::<classErroneous>     static       private boolean <Default>::<classInitializationInProgress>     <defaultMethod>     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  ClassDeclaration                         : public class <Default> {     <clinit>     <clprepare>     <init>     static private boolean <Default>::<classPrepared>     static       private boolean <Default>::<classInitialized>     static private boolean <Default>::<classErroneous>     static       private boolean <Default>::<classInitializationInProgress>     <defaultMethod>     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    Public                                   : public;

    ProgramElementName                       : <Default>

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : <Default>::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : <Default>::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : <Default>::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : <Default>::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : <Default>::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : <Default>::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : <Default>::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : <Default>::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : <Default>::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : <Default>::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : <Default>::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : <Default>::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : <Default>::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : <Default>::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : <Default>::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : <Default>::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : <Default>::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static private boolean <Default>::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : <Default>::<classPrepared>;
        LocationVariable                         : <Default>::<classPrepared>



    FieldDeclaration                         : static private boolean <Default>::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : <Default>::<classInitialized>;
        LocationVariable                         : <Default>::<classInitialized>



    FieldDeclaration                         : static private boolean <Default>::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : <Default>::<classErroneous>;
        LocationVariable                         : <Default>::<classErroneous>



    FieldDeclaration                         : static   private boolean <Default>::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : <Default>::<classInitializationInProgress>;
        LocationVariable                         : <Default>::<classInitializationInProgress>



    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      ProgramElementName                       : <defaultMethod>

      StatementBlock                           : {}


    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : <Default>;
        ProgramElementName                       : <Default>


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>(); }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>




    MethodDeclaration                        : public <Default> <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : <Default>;
        ProgramElementName                       : <Default>


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static <Default> <createObject> (){     <Default> __NEW__;     __NEW__ = <Default>.<allocate>();     __NEW__.<create>()@<Default>;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : <Default>;
        ProgramElementName                       : <Default>


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   <Default> __NEW__;   __NEW__ = <Default>.<allocate>();   __NEW__.<create>()@<Default>;   return __NEW__; }
        LocalVariableDeclaration                 : <Default> __NEW__;
          TypeRef                                  : <Default>;
            ProgramElementName                       : <Default>


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = <Default>.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : <Default>.<allocate>();
            TypeRef                                  : <Default>;
              ProgramElementName                       : <Default>


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@<Default>;
          TypeRef                                  : <Default>;
            ProgramElementName                       : <Default>


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== file:/home/weigl/work/key-main/key.ui/examples/heap/vstte10_01_SumAndMax/src/SumAndMax.java ======================================================
CompilationUnit                          :  class SumAndMax {     <clinit>     <clprepare>     <init>     static private boolean SumAndMax::<classPrepared>     static       private boolean SumAndMax::<classInitialized>     static private boolean SumAndMax::<classErroneous>     static       private boolean SumAndMax::<classInitializationInProgress>     int SumAndMax::sum     int SumAndMax::max     sumAndMax     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
  ClassDeclaration                         : class SumAndMax {     <clinit>     <clprepare>     <init>     static private boolean SumAndMax::<classPrepared>     static       private boolean SumAndMax::<classInitialized>     static private boolean SumAndMax::<classErroneous>     static       private boolean SumAndMax::<classInitializationInProgress>     int SumAndMax::sum     int SumAndMax::max     sumAndMax     <allocate>     <prepare>     <prepareEnter>     <create>     <createObject>   };
    ProgramElementName                       : SumAndMax

    MethodDeclaration                        : static   public void <clinit> (){     if (!@(<classInitialized>)) {       if (!@(<classInitializationInProgress>)) {         if (!@(<classPrepared>)) {           @(<clprepare>());         }         if (@(<classErroneous>)) {           throw new java.lang.NoClassDefFoundError();         }         @(<classInitializationInProgress>) = true;         try {           @(java.lang.Object.<clinit>());         } catch (java.lang.Error err) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw err;         } catch (java.lang.Throwable twa) {           @(<classInitializationInProgress>) = false;           @(<classErroneous>) = true;           throw           new java.lang.ExceptionInInitializerError(twa);         }         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = false;         @(<classInitialized>) = true;       }     }   }
      Static                                   : static;

      Public                                   : public;

      ProgramElementName                       : <clinit>

      StatementBlock                           : {   if (!@(<classInitialized>)) {     if (!@(<classInitializationInProgress>)) {       if (!@(<classPrepared>)) {         @(<clprepare>());       }       if (@(<classErroneous>)) {         throw new java.lang.NoClassDefFoundError();       }       @(<classInitializationInProgress>) = true;       try {         @(java.lang.Object.<clinit>());       } catch (java.lang.Error err) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw err;       } catch (java.lang.Throwable twa) {         @(<classInitializationInProgress>) = false;         @(<classErroneous>) = true;         throw         new java.lang.ExceptionInInitializerError(twa);       }       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = false;       @(<classInitialized>) = true;     }   } }
        If                                       : if (!@(<classInitialized>)) {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
          LogicalNot                               : !@(<classInitialized>);
            PassiveExpression                        : @(<classInitialized>);
              FieldReference                           : <classInitialized>;
                LocationVariable                         : SumAndMax::<classInitialized>




          Then                                     :  {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
            StatementBlock                           : {   if (!@(<classInitializationInProgress>)) {     if (!@(<classPrepared>)) {       @(<clprepare>());     }     if (@(<classErroneous>)) {       throw new java.lang.NoClassDefFoundError();     }     @(<classInitializationInProgress>) = true;     try {       @(java.lang.Object.<clinit>());     } catch (java.lang.Error err) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw err;     } catch (java.lang.Throwable twa) {       @(<classInitializationInProgress>) = false;       @(<classErroneous>) = true;       throw       new java.lang.ExceptionInInitializerError(twa);     }     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = false;     @(<classInitialized>) = true;   } }
              If                                       : if (!@(<classInitializationInProgress>)) {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                LogicalNot                               : !@(<classInitializationInProgress>);
                  PassiveExpression                        : @(<classInitializationInProgress>);
                    FieldReference                           : <classInitializationInProgress>;
                      LocationVariable                         : SumAndMax::<classInitializationInProgress>




                Then                                     :  {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                  StatementBlock                           : {   if (!@(<classPrepared>)) {     @(<clprepare>());   }   if (@(<classErroneous>)) {     throw new java.lang.NoClassDefFoundError();   }   @(<classInitializationInProgress>) = true;   try {     @(java.lang.Object.<clinit>());   } catch (java.lang.Error err) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw err;   } catch (java.lang.Throwable twa) {     @(<classInitializationInProgress>) = false;     @(<classErroneous>) = true;     throw     new java.lang.ExceptionInInitializerError(twa);   }   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = false;   @(<classInitialized>) = true; }
                    If                                       : if (!@(<classPrepared>)) {   @(<clprepare>()); }
                      LogicalNot                               : !@(<classPrepared>);
                        PassiveExpression                        : @(<classPrepared>);
                          FieldReference                           : <classPrepared>;
                            LocationVariable                         : SumAndMax::<classPrepared>




                      Then                                     :  {   @(<clprepare>()); }
                        StatementBlock                           : {   @(<clprepare>()); }
                          PassiveExpression                        : @(<clprepare>());
                            MethodReference                          : <clprepare>();
                              ProgramElementName                       : <clprepare>






                    If                                       : if (@(<classErroneous>)) {   throw new java.lang.NoClassDefFoundError(); }
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : SumAndMax::<classErroneous>



                      Then                                     :  {   throw new java.lang.NoClassDefFoundError(); }
                        StatementBlock                           : {   throw new java.lang.NoClassDefFoundError(); }
                          Throw                                    : throw new java.lang.NoClassDefFoundError();
                            New                                      : new java.lang.NoClassDefFoundError();
                              TypeRef                                  : java.lang.NoClassDefFoundError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : NoClassDefFoundError







                    CopyAssignment                           : @(<classInitializationInProgress>) = true;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : SumAndMax::<classInitializationInProgress>



                      BooleanLiteral                           : true;


                    Try                                      : try {   @(java.lang.Object.<clinit>()); } catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; } catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                      StatementBlock                           : {   @(java.lang.Object.<clinit>()); }
                        PassiveExpression                        : @(java.lang.Object.<clinit>());
                          MethodReference                          : java.lang.Object.<clinit>();
                            TypeRef                                  : java.lang.Object;
                              PackageReference                         : java.lang
                                PackageReference                         : java
                                  ProgramElementName                       : java


                                ProgramElementName                       : lang


                              ProgramElementName                       : Object


                            ProgramElementName                       : <clinit>




                      Catch                                    :  catch (java.lang.Error err) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                        ParameterDeclaration                     : java.lang.Error err;
                          TypeRef                                  : java.lang.Error;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Error


                          VariableSpecification                    : err;
                            LocationVariable                         : err



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw err; }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : SumAndMax::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : SumAndMax::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw err;
                            LocationVariable                         : err




                      Catch                                    :  catch (java.lang.Throwable twa) {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                        ParameterDeclaration                     : java.lang.Throwable twa;
                          TypeRef                                  : java.lang.Throwable;
                            PackageReference                         : java.lang
                              PackageReference                         : java
                                ProgramElementName                       : java


                              ProgramElementName                       : lang


                            ProgramElementName                       : Throwable


                          VariableSpecification                    : twa;
                            LocationVariable                         : twa



                        StatementBlock                           : {   @(<classInitializationInProgress>) = false;   @(<classErroneous>) = true;   throw new java.lang.ExceptionInInitializerError(twa); }
                          CopyAssignment                           : @(<classInitializationInProgress>) = false;
                            PassiveExpression                        : @(<classInitializationInProgress>);
                              FieldReference                           : <classInitializationInProgress>;
                                LocationVariable                         : SumAndMax::<classInitializationInProgress>



                            BooleanLiteral                           : false;


                          CopyAssignment                           : @(<classErroneous>) = true;
                            PassiveExpression                        : @(<classErroneous>);
                              FieldReference                           : <classErroneous>;
                                LocationVariable                         : SumAndMax::<classErroneous>



                            BooleanLiteral                           : true;


                          Throw                                    : throw new java.lang.ExceptionInInitializerError(twa);
                            New                                      : new java.lang.ExceptionInInitializerError(twa);
                              TypeRef                                  : java.lang.ExceptionInInitializerError;
                                PackageReference                         : java.lang
                                  PackageReference                         : java
                                    ProgramElementName                       : java


                                  ProgramElementName                       : lang


                                ProgramElementName                       : ExceptionInInitializerError


                              LocationVariable                         : twa






                    CopyAssignment                           : @(<classInitializationInProgress>) = false;
                      PassiveExpression                        : @(<classInitializationInProgress>);
                        FieldReference                           : <classInitializationInProgress>;
                          LocationVariable                         : SumAndMax::<classInitializationInProgress>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classErroneous>) = false;
                      PassiveExpression                        : @(<classErroneous>);
                        FieldReference                           : <classErroneous>;
                          LocationVariable                         : SumAndMax::<classErroneous>



                      BooleanLiteral                           : false;


                    CopyAssignment                           : @(<classInitialized>) = true;
                      PassiveExpression                        : @(<classInitialized>);
                        FieldReference                           : <classInitialized>;
                          LocationVariable                         : SumAndMax::<classInitialized>



                      BooleanLiteral                           : true;










    MethodDeclaration                        : static   private void <clprepare> (){     @(<classInitialized>) = false;     @(<classInitializationInProgress>) = false;     @(<classPrepared>) = false;     @(<classErroneous>) = false;     @(<classPrepared>) = true;   }
      Static                                   : static;

      Private                                  : private;

      ProgramElementName                       : <clprepare>

      StatementBlock                           : {   @(<classInitialized>) = false;   @(<classInitializationInProgress>) = false;   @(<classPrepared>) = false;   @(<classErroneous>) = false;   @(<classPrepared>) = true; }
        CopyAssignment                           : @(<classInitialized>) = false;
          PassiveExpression                        : @(<classInitialized>);
            FieldReference                           : <classInitialized>;
              LocationVariable                         : SumAndMax::<classInitialized>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classInitializationInProgress>) = false;
          PassiveExpression                        : @(<classInitializationInProgress>);
            FieldReference                           : <classInitializationInProgress>;
              LocationVariable                         : SumAndMax::<classInitializationInProgress>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = false;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : SumAndMax::<classPrepared>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classErroneous>) = false;
          PassiveExpression                        : @(<classErroneous>);
            FieldReference                           : <classErroneous>;
              LocationVariable                         : SumAndMax::<classErroneous>



          BooleanLiteral                           : false;


        CopyAssignment                           : @(<classPrepared>) = true;
          PassiveExpression                        : @(<classPrepared>);
            FieldReference                           : <classPrepared>;
              LocationVariable                         : SumAndMax::<classPrepared>



          BooleanLiteral                           : true;




    MethodDeclaration                        : public void <init> (){     super.<init>();   }
      Public                                   : public;

      ProgramElementName                       : <init>

      StatementBlock                           : {   super.<init>(); }
        MethodReference                          : super.<init>();
          SuperReference                           : super;

          ProgramElementName                       : <init>




    FieldDeclaration                         : static private boolean SumAndMax::<classPrepared>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : SumAndMax::<classPrepared>;
        LocationVariable                         : SumAndMax::<classPrepared>



    FieldDeclaration                         : static private boolean SumAndMax::<classInitialized>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : SumAndMax::<classInitialized>;
        LocationVariable                         : SumAndMax::<classInitialized>



    FieldDeclaration                         : static private boolean SumAndMax::<classErroneous>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : SumAndMax::<classErroneous>;
        LocationVariable                         : SumAndMax::<classErroneous>



    FieldDeclaration                         : static   private boolean SumAndMax::<classInitializationInProgress>;
      Static                                   : static;

      Private                                  : private;

      TypeRef                                  : boolean;
        ProgramElementName                       : boolean


      ImplicitFieldSpecification               : SumAndMax::<classInitializationInProgress>;
        LocationVariable                         : SumAndMax::<classInitializationInProgress>



    FieldDeclaration                         : int SumAndMax::sum;
      TypeRef                                  : int;
        ProgramElementName                       : int


      FieldSpecification                       : SumAndMax::sum;
        LocationVariable                         : SumAndMax::sum



    FieldDeclaration                         : int SumAndMax::max;
      TypeRef                                  : int;
        ProgramElementName                       : int


      FieldSpecification                       : SumAndMax::max;
        LocationVariable                         : SumAndMax::max



    MethodDeclaration                        : void sumAndMax (int[] a){     this.sum = 0;     this.max = 0;     int k = 0;     while (k < a.length) {       if (this.max < a[k]) {         this.max = a[k];       }       this.sum += a[k];       k++;     }   }
      ProgramElementName                       : sumAndMax

      ParameterDeclaration                     : int[] a;
        TypeRef                                  : int[];
          ProgramElementName                       : int


        VariableSpecification                    : a;
          LocationVariable                         : a



      StatementBlock                           : {   this.sum = 0;   this.max = 0;   int k = 0;   while (k < a.length) {     if (this.max < a[k]) {       this.max = a[k];     }     this.sum += a[k];     k++;   } }
        CopyAssignment                           : this.sum = 0;
          FieldReference                           : this.sum;
            ThisReference                            : this;

            LocationVariable                         : SumAndMax::sum


          IntLiteral                               : 0


        CopyAssignment                           : this.max = 0;
          FieldReference                           : this.max;
            ThisReference                            : this;

            LocationVariable                         : SumAndMax::max


          IntLiteral                               : 0


        LocalVariableDeclaration                 : int k = 0;
          TypeRef                                  : int;
            ProgramElementName                       : int


          VariableSpecification                    : k = 0;
            LocationVariable                         : k

            IntLiteral                               : 0



        While                                    : while (k < a.length) {   if (this.max < a[k]) {     this.max = a[k];   }   this.sum += a[k];   k++; }
          Guard                                    : k < a.length;
            LessThan                                 : k < a.length;
              LocationVariable                         : k

              FieldReference                           : a.length;
                LocationVariable                         : a

                LocationVariable                         : length




          StatementBlock                           : {   if (this.max < a[k]) {     this.max = a[k];   }   this.sum += a[k];   k++; }
            If                                       : if (this.max < a[k]) {   this.max = a[k]; }
              LessThan                                 : this.max < a[k];
                FieldReference                           : this.max;
                  ThisReference                            : this;

                  LocationVariable                         : SumAndMax::max


                ArrayReference                           : a[k];
                  LocationVariable                         : a

                  LocationVariable                         : k



              Then                                     :  {   this.max = a[k]; }
                StatementBlock                           : {   this.max = a[k]; }
                  CopyAssignment                           : this.max = a[k];
                    FieldReference                           : this.max;
                      ThisReference                            : this;

                      LocationVariable                         : SumAndMax::max


                    ArrayReference                           : a[k];
                      LocationVariable                         : a

                      LocationVariable                         : k






            PlusAssignment                           : this.sum += a[k];
              FieldReference                           : this.sum;
                ThisReference                            : this;

                LocationVariable                         : SumAndMax::sum


              ArrayReference                           : a[k];
                LocationVariable                         : a

                LocationVariable                         : k



            PostIncrement                            : k++;
              LocationVariable                         : k






    MethodDeclaration                        : 
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : SumAndMax;
        ProgramElementName                       : SumAndMax


      ProgramElementName                       : <allocate>


    MethodDeclaration                        : protected void <prepare> (){     super.<prepare>();     this.sum = 0;     this.max = 0;   }
      Protected                                : protected;

      ProgramElementName                       : <prepare>

      StatementBlock                           : {   super.<prepare>();   this.sum = 0;   this.max = 0; }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>


        CopyAssignment                           : this.sum = 0;
          FieldReference                           : this.sum;
            ThisReference                            : this;

            LocationVariable                         : SumAndMax::sum


          IntLiteral                               : 0


        CopyAssignment                           : this.max = 0;
          FieldReference                           : this.max;
            ThisReference                            : this;

            LocationVariable                         : SumAndMax::max


          IntLiteral                               : 0




    MethodDeclaration                        : private void <prepareEnter> (){     super.<prepare>();     this.sum = 0;     this.max = 0;   }
      Private                                  : private;

      ProgramElementName                       : <prepareEnter>

      StatementBlock                           : {   super.<prepare>();   this.sum = 0;   this.max = 0; }
        MethodReference                          : super.<prepare>();
          SuperReference                           : super;

          ProgramElementName                       : <prepare>


        CopyAssignment                           : this.sum = 0;
          FieldReference                           : this.sum;
            ThisReference                            : this;

            LocationVariable                         : SumAndMax::sum


          IntLiteral                               : 0


        CopyAssignment                           : this.max = 0;
          FieldReference                           : this.max;
            ThisReference                            : this;

            LocationVariable                         : SumAndMax::max


          IntLiteral                               : 0




    MethodDeclaration                        : public SumAndMax <create> (){     this.<initialized> = false;     <prepareEnter>();     return this;   }
      Public                                   : public;

      TypeRef                                  : SumAndMax;
        ProgramElementName                       : SumAndMax


      ProgramElementName                       : <create>

      StatementBlock                           : {   this.<initialized> = false;   <prepareEnter>();   return this; }
        CopyAssignment                           : this.<initialized> = false;
          FieldReference                           : this.<initialized>;
            ThisReference                            : this;

            LocationVariable                         : java.lang.Object::<initialized>


          BooleanLiteral                           : false;


        MethodReference                          : <prepareEnter>();
          ProgramElementName                       : <prepareEnter>


        Return                                   : return this;
          ThisReference                            : this;




    MethodDeclaration                        : public   static SumAndMax <createObject> (){     SumAndMax __NEW__;     __NEW__ = SumAndMax.<allocate>();     __NEW__.<create>()@SumAndMax;     return __NEW__;   }
      Public                                   : public;

      Static                                   : static;

      TypeRef                                  : SumAndMax;
        ProgramElementName                       : SumAndMax


      ProgramElementName                       : <createObject>

      StatementBlock                           : {   SumAndMax __NEW__;   __NEW__ = SumAndMax.<allocate>();   __NEW__.<create>()@SumAndMax;   return __NEW__; }
        LocalVariableDeclaration                 : SumAndMax __NEW__;
          TypeRef                                  : SumAndMax;
            ProgramElementName                       : SumAndMax


          VariableSpecification                    : __NEW__;
            LocationVariable                         : __NEW__



        CopyAssignment                           : __NEW__ = SumAndMax.<allocate>();
          LocationVariable                         : __NEW__

          MethodReference                          : SumAndMax.<allocate>();
            TypeRef                                  : SumAndMax;
              ProgramElementName                       : SumAndMax


            ProgramElementName                       : <allocate>



        MethodBodyStatement                      : __NEW__.<create>()@SumAndMax;
          TypeRef                                  : SumAndMax;
            ProgramElementName                       : SumAndMax


          MethodReference                          : __NEW__.<create>();
            LocationVariable                         : __NEW__

            ProgramElementName                       : <create>



        Return                                   : return __NEW__;
          LocationVariable                         : __NEW__







=== -1889370832 ======================================================
```
{.. #v = #slit; ...}
```

ContextStatementBlock                    : ..{ ..   #v = #slit; ... } ...
  CopyAssignment                           : #v = #slit;
    ProgramSV                                : #v (program Variable)

    ProgramSV                                : #slit (program StringLiteral)




=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1799087603 ======================================================
```
 {..
                        #v = #sstr1 + #sstr2;
              ...}
```

ContextStatementBlock                    : ..{ ..   #v = #sstr1 + #sstr2; ... } ...
  CopyAssignment                           : #v = #sstr1 + #sstr2;
    ProgramSV                                : #v (program Variable)

    Plus                                     : #sstr1 + #sstr2;
      ProgramSV                                : #sstr1 (program SimpleStringExpression)

      ProgramSV                                : #sstr2 (program SimpleStringExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -826614079 ======================================================
```

              {.. #v = #seLeft + #sstrRight; ...}
              
```

ContextStatementBlock                    : ..{ ..   #v = #seLeft + #sstrRight; ... } ...
  CopyAssignment                           : #v = #seLeft + #sstrRight;
    ProgramSV                                : #v (program Variable)

    Plus                                     : #seLeft + #sstrRight;
      ProgramSV                                : #seLeft (program AnyJavaTypeExpression)

      ProgramSV                                : #sstrRight (program SimpleStringExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1907373441 ======================================================
```

              {.. #v = #sstrLeft + #seRight; ...}
              
```

ContextStatementBlock                    : ..{ ..   #v = #sstrLeft + #seRight; ... } ...
  CopyAssignment                           : #v = #sstrLeft + #seRight;
    ProgramSV                                : #v (program Variable)

    Plus                                     : #sstrLeft + #seRight;
      ProgramSV                                : #sstrLeft (program SimpleStringExpression)

      ProgramSV                                : #seRight (program AnyJavaTypeExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -826614079 ======================================================
```

              {.. #v = #seLeft + #sstrRight; ...}
              
```

ContextStatementBlock                    : ..{ ..   #v = #seLeft + #sstrRight; ... } ...
  CopyAssignment                           : #v = #seLeft + #sstrRight;
    ProgramSV                                : #v (program Variable)

    Plus                                     : #seLeft + #sstrRight;
      ProgramSV                                : #seLeft (program JavaCharExpression)

      ProgramSV                                : #sstrRight (program SimpleStringExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1907373441 ======================================================
```

              {.. #v = #sstrLeft + #seRight; ...}
              
```

ContextStatementBlock                    : ..{ ..   #v = #sstrLeft + #seRight; ... } ...
  CopyAssignment                           : #v = #sstrLeft + #seRight;
    ProgramSV                                : #v (program Variable)

    Plus                                     : #sstrLeft + #seRight;
      ProgramSV                                : #sstrLeft (program SimpleStringExpression)

      ProgramSV                                : #seRight (program JavaCharExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -826614079 ======================================================
```

              {.. #v = #seLeft + #sstrRight; ...}
              
```

ContextStatementBlock                    : ..{ ..   #v = #seLeft + #sstrRight; ... } ...
  CopyAssignment                           : #v = #seLeft + #sstrRight;
    ProgramSV                                : #v (program Variable)

    Plus                                     : #seLeft + #sstrRight;
      ProgramSV                                : #seLeft (program SimpleJavaBooleanExpression)

      ProgramSV                                : #sstrRight (program SimpleStringExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1907373441 ======================================================
```

              {.. #v = #sstrLeft + #seRight; ...}
              
```

ContextStatementBlock                    : ..{ ..   #v = #sstrLeft + #seRight; ... } ...
  CopyAssignment                           : #v = #sstrLeft + #seRight;
    ProgramSV                                : #v (program Variable)

    Plus                                     : #sstrLeft + #seRight;
      ProgramSV                                : #sstrLeft (program SimpleStringExpression)

      ProgramSV                                : #seRight (program SimpleJavaBooleanExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== -826614079 ======================================================
```

              {.. #v = #seLeft + #sstrRight; ...}
              
```

ContextStatementBlock                    : ..{ ..   #v = #seLeft + #sstrRight; ... } ...
  CopyAssignment                           : #v = #seLeft + #sstrRight;
    ProgramSV                                : #v (program Variable)

    Plus                                     : #seLeft + #sstrRight;
      ProgramSV                                : #seLeft (program SimpleNonStringObjectExpression)

      ProgramSV                                : #sstrRight (program SimpleStringExpression)





=== -982434426 ======================================================
```

              {.. #v = #seLeft.toString() + #sstrRight; ...}
        
```

ContextStatementBlock                    : ..{ ..   #v = #seLeft.toString() + #sstrRight; ... } ...
  CopyAssignment                           : #v = #seLeft.toString() + #sstrRight;
    ProgramSV                                : #v (program Variable)

    Plus                                     : #seLeft.toString() + #sstrRight;
      MethodReference                          : #seLeft.toString();
        ProgramSV                                : #seLeft (program SimpleNonStringObjectExpression)

        ProgramElementName                       : toString


      ProgramSV                                : #sstrRight (program SimpleStringExpression)





=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...


=== 1907373441 ======================================================
```

              {.. #v = #sstrLeft + #seRight; ...}
              
```

ContextStatementBlock                    : ..{ ..   #v = #sstrLeft + #seRight; ... } ...
  CopyAssignment                           : #v = #sstrLeft + #seRight;
    ProgramSV                                : #v (program Variable)

    Plus                                     : #sstrLeft + #seRight;
      ProgramSV                                : #sstrLeft (program SimpleStringExpression)

      ProgramSV                                : #seRight (program SimpleNonStringObjectExpression)





=== 1403828304 ======================================================
```

              {.. #v = #sstrLeft + #seRight.toString(); ...}
        
```

ContextStatementBlock                    : ..{ ..   #v = #sstrLeft + #seRight.toString(); ... } ...
  CopyAssignment                           : #v = #sstrLeft + #seRight.toString();
    ProgramSV                                : #v (program Variable)

    Plus                                     : #sstrLeft + #seRight.toString();
      ProgramSV                                : #sstrLeft (program SimpleStringExpression)

      MethodReference                          : #seRight.toString();
        ProgramSV                                : #seRight (program SimpleNonStringObjectExpression)

        ProgramElementName                       : toString






=== -1159287468 ======================================================
```
{.. ...}
```

ContextStatementBlock                    : ..{ ..  ... } ...

