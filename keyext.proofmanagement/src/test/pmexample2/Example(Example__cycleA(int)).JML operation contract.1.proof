\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Mar 09 18:28:37 CET 2020
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Mon Mar 09 18:28:37 CET 2020
contract=Example[Example\\:\\:cycleA(int)].JML operation contract.1
name=Example[Example\\:\\:cycleA(int)].JML operation contract.1
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Banach" ) (keyVersion "9e1d8db9a5"))

(autoModeTime "250")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "param,self_129,result_109,exc_129,heapAtPre_0,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_cycleA,savedHeapBefore_cycleA"))
 (builtin "One Step Simplification" (formula "7"))
(rule "ifElseUnfold" (formula "7") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
(rule "compound_assignment_5_nonsimple" (formula "7") (term "1"))
(rule "ifElseUnfold" (formula "7") (term "1") (inst "#boolv=x_1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_1"))
(rule "equality_comparison_simple" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "ifElseSplit" (formula "7"))
(branch "if x_1 true"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifElseSkipElse" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
   (rule "returnUnfold" (formula "8") (term "1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
    (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_leaf,result_110,exc_130,heapAfter_leaf,anon_heap_leaf") (contract "Example[Example::leaf()].JML operation contract.0") (modality "box"))
   (branch "Post (leaf)"
       (builtin "One Step Simplification" (formula "10"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "typeEqDerived" (formula "10") (term "0,1,1,1,1") (ifseqformula "9"))
      (rule "typeEqDerived" (formula "10") (term "0,0,1,1,1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")))
      (rule "andLeft" (formula "10"))
      (rule "assignment" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "10"))
      (rule "methodCallReturn" (formula "13") (term "1"))
      (rule "assignment" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "methodCallEmpty" (formula "13") (term "1"))
      (rule "tryEmpty" (formula "13") (term "1"))
      (rule "emptyModality" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
      (rule "closeTrue" (formula "13"))
   )
   (branch "Exceptional Post (leaf)"
       (builtin "One Step Simplification" (formula "10"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "9"))
      (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "methodCallParamThrow" (formula "14") (term "1"))
      (rule "tryCatchThrow" (formula "14") (term "1"))
      (rule "ifElseUnfold" (formula "14") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
      (rule "equality_comparison_simple" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "replace_known_right" (formula "14") (term "0,0,1,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "ifElseSplit" (formula "14"))
      (branch "if x_3 true"
          (builtin "One Step Simplification" (formula "15"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_3 false"
          (builtin "One Step Simplification" (formula "15"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifElseSplit" (formula "14"))
         (branch "if exc_130 instanceof java.lang.Throwable true"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "e"))
            (rule "delete_unnecessary_cast" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "emptyModality" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
            (rule "closeTrue" (formula "14"))
         )
         (branch "if exc_130 instanceof java.lang.Throwable false"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Pre (leaf)"
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "6")) (ifInst ""  (formula "2")))
      (rule "closeTrue" (formula "8"))
   )
)
(branch "if x_1 false"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "equality_comparison_simple" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "ifElseSplit" (formula "8"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
      (rule "equal_literals" (formula "7"))
      (rule "false_right" (formula "7"))
      (rule "returnUnfold" (formula "8") (term "1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
       (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_leaf,result_110,exc_130,heapAfter_leaf,anon_heap_leaf") (contract "Example[Example::leaf()].JML operation contract.0") (modality "box"))
      (branch "Post (leaf)"
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "9"))
         (rule "typeEqDerived" (formula "10") (term "0,1,1,1,1") (ifseqformula "9"))
         (rule "typeEqDerived" (formula "10") (term "0,0,1,1,1") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")))
         (rule "andLeft" (formula "10"))
         (rule "assignment" (formula "13") (term "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "10"))
         (rule "methodCallReturn" (formula "13") (term "1"))
         (rule "assignment" (formula "13") (term "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (rule "tryEmpty" (formula "13") (term "1"))
         (rule "emptyModality" (formula "13") (term "1"))
          (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
         (rule "closeTrue" (formula "13"))
      )
      (branch "Exceptional Post (leaf)"
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "9"))
         (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "methodCallParamThrow" (formula "14") (term "1"))
         (rule "tryCatchThrow" (formula "14") (term "1"))
         (rule "ifElseUnfold" (formula "14") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
         (rule "equality_comparison_simple" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "replace_known_right" (formula "14") (term "0,0,1,0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "ifElseSplit" (formula "14"))
         (branch "if x_3 true"
             (builtin "One Step Simplification" (formula "15"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_3 false"
             (builtin "One Step Simplification" (formula "15"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifElseSplit" (formula "14"))
            (branch "if exc_130 instanceof java.lang.Throwable true"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "e"))
               (rule "delete_unnecessary_cast" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "15"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "emptyModality" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
               (rule "closeTrue" (formula "14"))
            )
            (branch "if exc_130 instanceof java.lang.Throwable false"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Pre (leaf)"
          (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "6")) (ifInst ""  (formula "2")))
         (rule "closeTrue" (formula "8"))
      )
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "returnUnfold" (formula "9") (term "1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_2"))
      (rule "methodCallWithAssignmentUnfoldArguments" (formula "9") (term "1"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "var"))
      (rule "assignmentSubtractionInt" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "translateJavaSubInt" (formula "9") (term "0,1,0"))
      (rule "polySimp_elimSub" (formula "9") (term "0,1,0"))
      (rule "mul_literals" (formula "9") (term "1,0,1,0"))
      (rule "polySimp_addComm0" (formula "9") (term "0,1,0"))
       (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_cycleB,result_110,exc_130,heapAfter_cycleB,anon_heap_cycleB") (contract "Example[Example::cycleB(int)].JML operation contract.0#Example[Example::cycleB(int)].JML operation contract.1") (modality "box"))
      (branch "Post (cycleB)"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "5")) (ifInst ""  (formula "5")))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "8"))
         (rule "typeEqDerived" (formula "9") (term "0,1,1,1,1,1") (ifseqformula "8"))
         (rule "typeEqDerived" (formula "9") (term "0,0,1,1,1,1") (ifseqformula "8"))
         (rule "typeEqDerived" (formula "9") (term "0,0,1,1,1,1,0") (ifseqformula "8"))
         (rule "typeEqDerived" (formula "9") (term "0,1,1,1,1,1,0") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")) (ifInst ""  (formula "8")) (ifInst ""  (formula "8")) (ifInst ""  (formula "8")))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "11")))
         (rule "true_left" (formula "9"))
         (rule "inEqSimp_gtToGeq" (formula "9") (term "0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "blockEmpty" (formula "14") (term "1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0"))
         (rule "mul_literals" (formula "9") (term "1,0"))
         (rule "methodCallReturn" (formula "14") (term "1"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "methodCallEmpty" (formula "14") (term "1"))
         (rule "tryEmpty" (formula "14") (term "1"))
         (rule "emptyModality" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "10")))
         (rule "impRight" (formula "14"))
         (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "notLeft" (formula "10"))
         (rule "inEqSimp_geqRight" (formula "11"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "12"))
         (rule "add_literals" (formula "1") (term "1"))
         (rule "inEqSimp_contradEq3" (formula "12") (ifseqformula "1"))
         (rule "add_zero_left" (formula "12") (term "0,0"))
         (rule "mul_literals" (formula "12") (term "0,0"))
         (rule "qeq_literals" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "false_right" (formula "12"))
         (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "12"))
         (rule "add_zero_right" (formula "2") (term "1"))
         (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "2"))
         (rule "times_zero_1" (formula "12") (term "1,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0"))
         (rule "leq_literals" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "false_right" (formula "12"))
         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
         (rule "qeq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
      (branch "Exceptional Post (cycleB)"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "5")) (ifInst ""  (formula "5")))
         (rule "andLeft" (formula "7"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,0") (ifseqformula "7"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "8"))
         (rule "andLeft" (formula "10"))
         (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "replace_known_right" (formula "9") (term "0,0,1") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "10")) (ifInst ""  (formula "12")) (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
         (rule "true_left" (formula "9"))
         (rule "blockThrow" (formula "15") (term "1"))
         (rule "methodCallParamThrow" (formula "15") (term "1"))
         (rule "tryCatchThrow" (formula "15") (term "1"))
         (rule "ifElseUnfold" (formula "15") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_3"))
         (rule "equality_comparison_simple" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "replace_known_right" (formula "15") (term "0,0,1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "ifElseSplit" (formula "15"))
         (branch "if x_3 true"
             (builtin "One Step Simplification" (formula "16"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_3 false"
             (builtin "One Step Simplification" (formula "16"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifElseSplit" (formula "15"))
            (branch "if exc_130 instanceof java.lang.Throwable true"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "15") (term "1") (newnames "e"))
               (rule "delete_unnecessary_cast" (formula "15") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "15") (term "1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "emptyModality" (formula "15") (term "1"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")) (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
               (rule "closeTrue" (formula "15"))
            )
            (branch "if exc_130 instanceof java.lang.Throwable false"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Pre (cycleB)"
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")))
         (rule "closeTrue" (formula "9"))
      )
   )
)
)
}
