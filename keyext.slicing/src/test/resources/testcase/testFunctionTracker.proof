\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:assumeStrictfp",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 7000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_DELAYED",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_ON",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\functions {
    int b;
}
\problem {
     \exists int c; (c = Z(5(#)) & lt(c, b))
   & \exists int c; (c = Z(7(#)) & gt(c, b))
   & \exists int c; c = Z(0(#))
-> b = Z(6(#))
}

\proof {
(keyLog "0" (keyUser "arne" ) (keyVersion "bd6f1082c56a8177268809c89ccd4d7a7a8628d2"))

(autoModeTime "78")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "exLeft" (formula "3") (inst "sk=c_0") (userinteraction))
(rule "sign_case_distinction" (inst "signCasesLeft=c_0") (userinteraction))
(branch "c_0 is negative"
   (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "4") (userinteraction))
   (rule "leq_literals" (formula "1") (userinteraction))
   (rule "closeFalse" (formula "1") (userinteraction))
)
(branch "c_0 is zero"
   (rule "exLeft" (formula "1") (inst "sk=c_1"))
   (rule "andLeft" (formula "1"))
   (rule "exLeft" (formula "3") (inst "sk=c_2"))
   (rule "andLeft" (formula "3"))
   (rule "inEqSimp_ltToLeq" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
   (rule "applyEqRigid" (formula "2") (term "1,0") (ifseqformula "1"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "3"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "add_literals" (formula "4") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "4"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
   (rule "polySimp_elimOne" (formula "4") (term "0"))
   (rule "inEqSimp_strengthen0" (formula "4") (ifseqformula "6"))
   (rule "add_literals" (formula "4") (term "1"))
   (rule "inEqSimp_contradEq3" (formula "6") (ifseqformula "4"))
   (rule "mul_literals" (formula "6") (term "1,0,0"))
   (rule "add_literals" (formula "6") (term "0,0"))
   (rule "qeq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "false_right" (formula "6"))
   (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "2"))
   (rule "qeq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "closeFalse" (formula "4"))
)
(branch "c_0 is positive"
   (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "4") (userinteraction))
   (rule "qeq_literals" (formula "1") (userinteraction))
   (rule "closeFalse" (formula "1") (userinteraction))
)
)
}
