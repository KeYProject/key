\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Dec 15 18:59:00 CET 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:showSatisfiability , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\sorts {
  S;
}

\functions {
  S agatha;
  S butler;
  S charles;
}

\predicates {
  lives(S);
  hates(S, S);
  killed(S, S);
  richer(S, S);
  equal(S, S);
}
\problem {
     \exists S z7; (lives(z7) & killed(z7, agatha))
   & lives(agatha)
   & lives(butler)
   & lives(charles)
   & \forall S z8;
       (   lives(z8)
        -> z8 = agatha | (z8 = butler | z8 = charles))
   & \forall S z9;
       \forall S z0; (killed(z9, z0) -> hates(z9, z0))
   & \forall S w1;
       \forall S w2;
         (killed(w1, w2) -> !richer(w1, w2))
   & \forall S w3;
       (hates(agatha, w3) -> !hates(charles, w3))
   & \forall S w4; (!w4 = butler -> hates(agatha, w4))
   & \forall S w5;
       (!richer(w5, agatha) -> hates(butler, w5))
   & \forall S w6;
       (hates(agatha, w6) -> hates(butler, w6))
   & \forall S w7; \exists S w8; !hates(w7, w8)
   & !agatha = butler
-> killed(agatha, agatha)

}

\proof {
(keyLog "0" (keyUser "arne" ) (keyVersion "fe336a76e1"))
(keyLog "1" (keyUser "arne" ) (keyVersion "92beb41c428ccc77db9984cc2babb94b4fb9d99b"))

(autoModeTime "352")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "exLeft" (formula "1") (inst "sk=z7_0"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "14"))
(rule "nnf_imp2or" (formula "12") (term "0"))
(rule "nnf_imp2or" (formula "11") (term "0"))
(rule "double_not" (formula "11") (term "0,0"))
(rule "nnf_imp2or" (formula "10") (term "0"))
(rule "double_not" (formula "10") (term "0,0"))
(rule "nnf_imp2or" (formula "9") (term "0"))
(rule "nnf_imp2or" (formula "6") (term "0"))
(rule "nnf_imp2or" (formula "8") (term "0,0"))
(rule "nnf_imp2or" (formula "7") (term "0,0"))
(rule "commute_or" (formula "11") (term "0"))
(rule "commute_or" (formula "7") (term "0,0"))
(rule "shift_paren_or" (formula "6") (term "1,0"))
(rule "shift_paren_or" (formula "6") (term "0"))
(rule "shift_paren_or" (formula "6") (term "0,0"))
(rule "allLeft" (formula "7") (inst "t=z7_0"))
(rule "allLeft" (formula "14") (inst "t=butler"))
(rule "exLeft" (formula "14") (inst "sk=w8_0"))
(rule "notLeft" (formula "14"))
(rule "allLeft" (formula "14") (inst "t=agatha"))
(rule "exLeft" (formula "14") (inst "sk=w8_1"))
(rule "notLeft" (formula "14"))
(rule "allLeft" (formula "14") (inst "t=charles"))
(rule "exLeft" (formula "14") (inst "sk=w8_2"))
(rule "notLeft" (formula "14"))
(rule "allLeft" (formula "9") (inst "t=z7_0"))
(rule "allLeft" (formula "15") (inst "t=z7_0"))
(rule "exLeft" (formula "15") (inst "sk=w8_3"))
(rule "notLeft" (formula "15"))
(rule "allLeft" (formula "7") (inst "t=agatha"))
(rule "replace_known_left" (formula "7") (term "0,1") (ifseqformula "2"))
(rule "concrete_not_1" (formula "7") (term "1"))
(rule "concrete_or_4" (formula "7"))
(rule "allLeft" (formula "14") (inst "t=w8_0"))
(rule "replace_known_right" (formula "14") (term "0") (ifseqformula "21"))
(rule "concrete_or_2" (formula "14"))
(rule "allLeft" (formula "9") (inst "t=butler"))
(rule "allLeft" (formula "17") (inst "t=w8_0"))
(rule "replace_known_right" (formula "17") (term "1") (ifseqformula "23"))
(rule "concrete_or_4" (formula "17"))
(rule "notLeft" (formula "17"))
(rule "allLeft" (formula "14") (inst "t=w8_1"))
(rule "replace_known_right" (formula "14") (term "1") (ifseqformula "23"))
(rule "concrete_or_4" (formula "14"))
(rule "applyEqRigid" (formula "23") (term "1") (ifseqformula "14"))
(rule "allLeft" (formula "10") (inst "t=agatha"))
(rule "allLeft" (formula "11") (inst "t=charles"))
(rule "allLeft" (formula "8") (inst "t=w8_3"))
(rule "replace_known_right" (formula "8") (term "0") (ifseqformula "24"))
(rule "concrete_or_2" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "allLeft" (formula "13") (inst "t=agatha"))
(rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "2"))
(rule "concrete_not_1" (formula "13") (term "0"))
(rule "concrete_or_2" (formula "13"))
(rule "notLeft" (formula "13"))
(rule "allLeft" (formula "14") (inst "t=w8_0"))
(rule "allLeft" (formula "18") (inst "t=w8_0"))
(rule "replace_known_right" (formula "18") (term "1") (ifseqformula "26"))
(rule "concrete_or_4" (formula "18"))
(rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "18"))
(rule "applyEq" (formula "26") (term "1") (ifseqformula "18"))
(rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "18"))
(rule "applyEqRigid" (formula "29") (term "1") (ifseqformula "18"))
(rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "18"))
(rule "allLeft" (formula "21") (inst "t=z7_0"))
(rule "replace_known_right" (formula "21") (term "1") (ifseqformula "25"))
(rule "concrete_or_4" (formula "21"))
(rule "allLeft" (formula "11") (inst "t=w8_2"))
(rule "replace_known_right" (formula "11") (term "0") (ifseqformula "29"))
(rule "concrete_or_2" (formula "11"))
(rule "notLeft" (formula "11"))
(rule "allLeft" (formula "10") (inst "t=butler"))
(rule "replace_known_right" (formula "10") (term "0") (ifseqformula "31"))
(rule "concrete_or_2" (formula "10"))
(rule "notLeft" (formula "10"))
(rule "allLeft" (formula "15") (inst "t=butler"))
(rule "allLeft" (formula "14") (inst "t=agatha"))
(rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "21"))
(rule "concrete_not_1" (formula "14") (term "1"))
(rule "concrete_or_4" (formula "14"))
(rule "notLeft" (formula "14"))
(rule "allLeft" (formula "9") (inst "t=butler"))
(rule "replace_known_right" (formula "9") (term "0") (ifseqformula "34"))
(rule "concrete_or_2" (formula "9"))
(rule "notLeft" (formula "9"))
(rule "allLeft" (formula "6") (inst "t=z7_0"))
(rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "1"))
(rule "concrete_not_1" (formula "6") (term "0,0,0"))
(rule "concrete_or_2" (formula "6") (term "0,0"))
(rule "cut_direct" (formula "6") (term "1"))
(branch "CUT: z7_0 = charles TRUE"
   (rule "concrete_or_3" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "6"))
   (rule "applyEqRigid" (formula "22") (term "1") (ifseqformula "6"))
   (rule "applyEqRigid" (formula "14") (term "0,0,1,0") (ifseqformula "6"))
   (rule "applyEqRigid" (formula "32") (term "0") (ifseqformula "6"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
   (rule "applyEqRigid" (formula "29") (term "0") (ifseqformula "5"))
   (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "5"))
   (rule "applyEq" (formula "13") (term "0,0,0,0") (ifseqformula "5"))
   (rule "applyEqRigid" (formula "8") (term "0,0,0") (ifseqformula "5"))
   (rule "applyEq" (formula "7") (term "0") (ifseqformula "5"))
   (rule "applyEq" (formula "29") (term "0") (ifseqformula "5"))
   (rule "allLeft" (formula "15") (inst "t=agatha"))
   (rule "replace_known_left" (formula "15") (term "0,1") (ifseqformula "7"))
   (rule "concrete_not_1" (formula "15") (term "1"))
   (rule "concrete_or_4" (formula "15"))
   (rule "notLeft" (formula "15"))
   (rule "allLeft" (formula "18") (inst "t=agatha"))
   (rule "eqSymm" (formula "18") (term "0"))
   (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "36"))
   (rule "concrete_or_2" (formula "18"))
   (rule "close" (formula "25") (ifseqformula "18"))
)
(branch "CUT: z7_0 = charles FALSE"
   (rule "concrete_or_4" (formula "6"))
   (rule "cut_direct" (formula "6") (term "0"))
   (branch "CUT: z7_0 = agatha TRUE"
      (rule "concrete_or_1" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "6"))
      (rule "applyEq" (formula "2") (term "0") (ifseqformula "6"))
       (opengoal "     \\exists S z7; (lives(z7) & killed(z7, agatha))    & lives(agatha)    & lives(butler)    & lives(charles)    & \\forall S z8;        (   lives(z8)         -> z8 = agatha | (z8 = butler | z8 = charles))    & \\forall S z9;        \\forall S z0; (killed(z9, z0) -> hates(z9, z0))    & \\forall S w1;        \\forall S w2;          (killed(w1, w2) -> !richer(w1, w2))    & \\forall S w3;        (hates(agatha, w3) -> !hates(charles, w3))    & \\forall S w4; (!w4 = butler -> hates(agatha, w4))    & \\forall S w5;        (!richer(w5, agatha) -> hates(butler, w5))    & \\forall S w6;        (hates(agatha, w6) -> hates(butler, w6))    & \\forall S w7; \\exists S w8; !hates(w7, w8)    & !agatha = butler -> killed(agatha, agatha) ")
   )
   (branch "CUT: z7_0 = agatha FALSE"
      (rule "concrete_or_2" (formula "6"))
      (rule "applyEqRigid" (formula "33") (term "0") (ifseqformula "6"))
      (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "6"))
      (rule "applyEqRigid" (formula "14") (term "0,0,1,0") (ifseqformula "6"))
      (rule "applyEqRigid" (formula "9") (term "0,0,0") (ifseqformula "6"))
      (rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "6"))
      (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "6"))
      (rule "close" (formula "31") (ifseqformula "20"))
   )
)
)
}
