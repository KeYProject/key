/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */
package org.key_project.prover.strategy.costbased.feature;

import org.key_project.prover.proof.ProofGoal;
import org.key_project.prover.rules.RuleApp;
import org.key_project.prover.sequent.PosInOccurrence;
import org.key_project.prover.strategy.costbased.MutableState;
import org.key_project.prover.strategy.costbased.RuleAppCost;
import org.key_project.prover.strategy.costbased.termProjection.ProjectionToTerm;
import org.key_project.prover.strategy.costbased.termProjection.TermBuffer;

import org.jspecify.annotations.NonNull;


/// Feature for locally binding a <code>TermBuffer</code> to a certain value, namely to a term that
/// is generated by a <code>ProjectionToTerm</code>. This is mostly useful to make feature terms
/// more
/// readable, and to avoid repeated evaluation of projections.
public class LetFeature<Goal extends ProofGoal<@NonNull Goal>> implements Feature {

    private final TermBuffer<Goal> var;
    private final ProjectionToTerm<Goal> value;
    private final Feature body;

    public static <Goal extends ProofGoal<@NonNull Goal>> Feature create(TermBuffer<Goal> var,
            ProjectionToTerm<Goal> value, Feature body) {
        return new LetFeature<>(var, value, body);
    }

    private LetFeature(TermBuffer<Goal> var, ProjectionToTerm<Goal> value, Feature body) {
        this.var = var;
        this.value = value;
        this.body = body;
    }

    @Override
    public <G extends ProofGoal<@NonNull G>> RuleAppCost computeCost(RuleApp app,
            PosInOccurrence pos, G goal,
            MutableState mState) {
        final var outerVarContent = var.getContent(mState);

        var.setContent(value.toTerm(app, pos, (Goal) goal, mState), mState);
        final RuleAppCost res = body.computeCost(app, pos, goal, mState);

        var.setContent(outerVarContent, mState);
        return res;
    }

}
