/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */
package edu.kit.iti.formal;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import de.uka.ilkd.key.java.*;
import de.uka.ilkd.key.java.declaration.*;
import de.uka.ilkd.key.java.declaration.modifier.*;
import de.uka.ilkd.key.java.expression.*;
import de.uka.ilkd.key.java.expression.literal.*;
import de.uka.ilkd.key.java.expression.operator.*;
import de.uka.ilkd.key.java.expression.operator.adt.*;
import de.uka.ilkd.key.java.reference.*;
import de.uka.ilkd.key.java.statement.*;
import de.uka.ilkd.key.rule.metaconstruct.*;

public class ExtractHierarchy {
    public static void main(String[] args) {
        var astClasses = List.of(
            JavaSourceElement.class,
            JavaProgramElement.class,
            Literal.class,
            FreeLiteral.class,
            EmptyMapLiteral.class,
            RealLiteral.class,
            AbstractIntegerLiteral.class,
            CharLiteral.class,
            IntLiteral.class,
            LongLiteral.class,
            EmptySeqLiteral.class,
            NullLiteral.class,
            FloatLiteral.class,
            StringLiteral.class,
            BooleanLiteral.class,
            DoubleLiteral.class,
            EmptySetLiteral.class,
            EmptyStatement.class,
            Modifier.class,
            AnnotationUseSpecification.class,
            Abstract.class,
            StrictFp.class,
            Final.class,
            Static.class,
            TwoState.class,
            Native.class,
            Model.class,
            Ghost.class,
            VisibilityModifier.class,
            Protected.class,
            Private.class,
            Public.class,
            Transient.class,
            NoState.class,
            Synchronized.class,
            Volatile.class,
            JavaNonTerminalProgramElement.class,
            MethodBodyStatement.class,
            PackageReference.class,
            Throws.class,
            JavaStatement.class,
            BranchStatement.class,
            If.class,
            Switch.class,
            Exec.class,
            Try.class,
            MethodFrame.class,
            JumpStatement.class,
            ExpressionJumpStatement.class,
            Return.class,
            Throw.class,
            LabelJumpStatement.class,
            Continue.class,
            Break.class,
            SynchronizedBlock.class,
            StatementBlock.class,
            ContextStatementBlock.class,
            Assert.class,
            LoopStatement.class,
            EnhancedFor.class,
            For.class,
            Do.class,
            While.class,
            LoopScopeBlock.class,
            JmlAssert.class,
            TransactionStatement.class,
            MergePointStatement.class,
            SetStatement.class,
            LabeledStatement.class,
            CompilationUnit.class,
            Guard.class,
            ProgramTransformer.class,
            EnhancedForElimination.class,
            TypeOf.class,
            SwitchToIf.class,
            StaticInitialisation.class,
            ForInitUnfoldTransformer.class,
            ExpandMethodBody.class,
            Unpack.class,
            ForToWhile.class,
            UnwindLoop.class,
            IsStatic.class,
            ConstructorCall.class,
            ArrayPostDecl.class,
            SpecialConstructorCall.class,
            PostWork.class,
            ReattachLoopInvariant.class,
            ArrayLength.class,
            InitArray.class,
            InitArrayCreation.class,
            EvaluateArgs.class,
            DoBreak.class,
            CreateObject.class,
            MethodCall.class,
            MultipleVarDecl.class,
            BranchImp.class,
            Then.class,
            Catch.class,
            Else.class,
            Case.class,
            Default.class,
            Finally.class,
            Ccatch.class,
            VariableSpecification.class,
            FieldSpecification.class,
            ImplicitFieldSpecification.class,
            MethodReference.class,
            Operator.class,
            LogicalOr.class,
            SeqGet.class,
            SeqSingleton.class,
            TypeOperator.class,
            Instanceof.class,
            TypeCast.class,
            NewArray.class,
            ExactInstanceof.class,
            New.class,
            SeqIndexOf.class,
            UnsignedShiftRight.class,
            BinaryNot.class,
            BinaryOperator.class,
            Minus.class,
            SetUnion.class,
            BinaryXOr.class,
            Plus.class,
            Divide.class,
            BinaryAnd.class,
            Subtype.class,
            Modulo.class,
            SeqConcat.class,
            Times.class,
            SetMinus.class,
            BinaryOr.class,
            Intersect.class,
            ParenthesizedExpression.class,
            PassiveExpression.class,
            Singleton.class,
            LogicalNot.class,
            AllFields.class,
            Assignment.class,
            ShiftRightAssignment.class,
            PostIncrement.class,
            BinaryOrAssignment.class,
            MinusAssignment.class,
            PostDecrement.class,
            BinaryAndAssignment.class,
            CopyAssignment.class,
            TimesAssignment.class,
            BinaryXOrAssignment.class,
            ModuloAssignment.class,
            PreIncrement.class,
            PreDecrement.class,
            ShiftLeftAssignment.class,
            DivideAssignment.class,
            PlusAssignment.class,
            UnsignedShiftRightAssignment.class,
            Positive.class,
            ShiftLeft.class,
            LogicalAnd.class,
            ShiftRight.class,
            Negative.class,
            DLEmbeddedExpression.class,
            SeqSub.class,
            ComparativeOperator.class,
            GreaterThan.class,
            NotEquals.class,
            Equals.class,
            LessThan.class,
            LessOrEquals.class,
            GreaterOrEquals.class,
            AllObjects.class,
            SeqReverse.class,
            Conditional.class,
            SeqLength.class,
            SeqPut.class,
            SpecialConstructorReference.class,
            SuperConstructorReference.class,
            ThisConstructorReference.class,
            JavaDeclaration.class,
            MethodDeclaration.class,
            ConstructorDeclaration.class,
            TypeDeclaration.class,
            InterfaceDeclaration.class,
            ArrayDeclaration.class,
            SuperArrayDeclaration.class,
            ClassDeclaration.class,
            EnumClassDeclaration.class,
            VariableDeclaration.class,
            ParameterDeclaration.class,
            FieldDeclaration.class,
            LocalVariableDeclaration.class,
            ClassInitializer.class,
            ArrayReference.class,
            ExecutionContext.class,
            ArrayLengthReference.class,
            ArrayInitializer.class,
            LoopInit.class,
            PackageSpecification.class,
            CatchAllStatement.class,
            CcatchNonstandardParameterDeclaration.class,
            CcatchReturnParameterDeclaration.class,
            CcatchContinueParameterDeclaration.class,
            CcatchContinueWildcardParameterDeclaration.class,
            CcatchContinueLabelParameterDeclaration.class,
            CcatchReturnValParameterDeclaration.class,
            CcatchBreakLabelParameterDeclaration.class,
            CcatchBreakWildcardParameterDeclaration.class,
            CcatchBreakParameterDeclaration.class,
            TypeReferenceImp.class,
            SchemaTypeReference.class,
            TypeRef.class,
            Import.class,
            SuperReference.class,
            VariableReference.class,
            FieldReference.class,
            SchematicFieldReference.class,
            InheritanceSpecification.class,
            Extends.class,
            Implements.class,
            MetaClassReference.class,
            ThisReference.class,
            ForUpdates.class,
            Comment.class,
            SingleLineComment.class);
        for (Class<? extends JavaSourceElement> aClass : astClasses) {
            write(aClass);
        }
    }

    private static void write(Class<? extends JavaSourceElement> aClass) {
        System.out.println();
        System.out.format(aClass.isInterface() ? "interface" : "class");
        System.out.printf(" %s ", aClass.getSimpleName());

        if (aClass.getSuperclass() != null) {
            System.out.printf("extends %s", aClass.getSuperclass().getSimpleName());
        }

        if (aClass.getInterfaces().length > 0) {
            System.out.printf(" implements %s",
                Arrays.stream(aClass.getInterfaces())
                        .map(Class::getSimpleName)
                        .collect(Collectors.joining(", ")));
        }

        System.out.println("{");
        for (Field field : aClass.getDeclaredFields()) {
            System.out.printf("    %s %s;\n", field.getType().getSimpleName(), field.getName());
        }
        System.out.print("\n}");
    }
}
